<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android开发-logcat常用命令行汇总</title>
    <url>/2021/07/13/Android-Logcat/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Android-logcat-常用命令行汇总"><a href="#Android-logcat-常用命令行汇总" class="headerlink" title="Android- logcat  常用命令行汇总"></a>Android- logcat  常用命令行汇总</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Logcat 是一个命令行工具，用于转储系统消息日志，包括设备抛出错误时的堆栈轨迹，以及从您的应用使用 <code>Log</code> 类写入的消息。</p>
<p>本质上也是个 c/s　构架。应用作为客户端往服务端 logd 写数据，　logd 作为服务端收到数据后会把数据写到 LogBuf 中。logcat 作为另外一个客户端，从 LogBuf 中读取数据。这个其实也是个生产者/消费者模型。应用可以看作生产者，logcat 可以看作是消费者，logd 可以看作是消息队列。</p>
<p><a href="https://imgtu.com/i/WV1EvT" target="_blank" rel="noopener"><img alt="logd-arch" data-src="https://z3.ax1x.com/2021/07/14/WV1EvT.png" class="lazyload"></a></p>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="logcat-–help"><a href="#logcat-–help" class="headerlink" title="logcat –help"></a>logcat –help</h3><p>logcat 工具完整命令参数可参考<code>logcat --help</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@pineapple:/data/app # logcat --help</span><br><span class="line">Usage: logcat [options] [filterspecs]</span><br><span class="line">options include:</span><br><span class="line">  -s              Set default filter to silent.</span><br><span class="line">                  Like specifying filterspec '*:s'</span><br><span class="line">  -f <filename>   Log to file. Default to stdout</filename></span><br><span class="line">  -r [<kbytes>]   Rotate log every kbytes. (16 if unspecified). Requires -f</kbytes></span><br><span class="line">  -n <count>      Sets max number of rotated logs to <count>, default 4</count></count></span><br><span class="line">  -v <format>     Sets the log print format, where <format> is one of:</format></format></span><br><span class="line"></span><br><span class="line">                  brief process tag thread raw time threadtime long</span><br><span class="line"></span><br><span class="line">  -c              clear (flush) the entire log and exit</span><br><span class="line">  -d              dump the log and then exit (don't block)</span><br><span class="line">  -t <count>      print only the most recent <count> lines (implies -d)</count></count></span><br><span class="line">  -t '<time>'     print most recent lines since specified time (implies -d)</time></span><br><span class="line">  -T <count>      print only the most recent <count> lines (does not imply -d)</count></count></span><br><span class="line">  -T '<time>'     print most recent lines since specified time (not imply -d)</time></span><br><span class="line">                  count is pure numerical, time is 'MM-DD hh:mm:ss.mmm'</span><br><span class="line">  -g              get the size of the log's ring buffer and exit</span><br><span class="line">  -K              dump kernel log by klogctl, this operation need super user</span><br><span class="line">                  permission.</span><br><span class="line">  -z              bzip2 output logfile and need use with option -r</span><br><span class="line">  -b <buffer>     Request alternate ring buffer, 'main', 'system', 'radio',</buffer></span><br><span class="line">                  'events', 'crash' or 'all'. Multiple -b parameters are</span><br><span class="line">                  allowed and results are interleaved. The default is</span><br><span class="line">                  -b main -b system -b crash.</span><br><span class="line">  -B              output the log in binary.</span><br><span class="line">  -S              output statistics.</span><br><span class="line">  -G <size>       set size of log ring buffer, may suffix with K or M.</size></span><br><span class="line">  -p              print prune white and ~black list. Service is specified as</span><br><span class="line">                  UID, UID/PID or /PID. Weighed for quicker pruning if prefix</span><br><span class="line">                  with ~, otherwise weighed for longevity if unadorned. All</span><br><span class="line">                  other pruning activity is oldest first. Special case ~!</span><br><span class="line">                  represents an automatic quicker pruning for the noisiest</span><br><span class="line">                  UID as determined by the current statistics.</span><br><span class="line">  -P '<list> ...' set prune white and ~black list, using same format as</list></span><br><span class="line">                  printed above. Must be quoted.</span><br><span class="line"></span><br><span class="line">filterspecs are a series of</span><br><span class="line">  <tag>[:priority]</tag></span><br><span class="line"></span><br><span class="line">where <tag> is a log component tag (or * for all) and priority is:</tag></span><br><span class="line">  V    Verbose</span><br><span class="line">  D    Debug</span><br><span class="line">  I    Info</span><br><span class="line">  W    Warn</span><br><span class="line">  E    Error</span><br><span class="line">  F    Fatal</span><br><span class="line">  S    Silent (supress all output)</span><br><span class="line"></span><br><span class="line">'*' means '*:d' and <tag> by itself means <tag>:v</tag></tag></span><br><span class="line"></span><br><span class="line">If not specified on the commandline, filterspec is set from ANDROID_LOG_TAGS.</span><br><span class="line">If no filterspec is found, filter defaults to '*:I'</span><br><span class="line"></span><br><span class="line">If not specified with -v, format is set from ANDROID_PRINTF_LOG</span><br><span class="line">or defaults to "brief"</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="logcat-vtime"><a href="#logcat-vtime" class="headerlink" title="logcat -vtime"></a>logcat -vtime</h3><p>添加日志时间</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">logcat -vtime</span><br><span class="line">07-14 10:18:32.835 D/PackageManager( 1589): Removing package gd.avit.stb.msg.tv</span><br><span class="line">07-14 10:18:32.936 D/InputMethodManagerService( 1589): --- calledFromForegroundUserOrSystemProcess ? calling uid = 1000 system uid = 1000 calling userId = 0, foreground user id = 0, calling pid = 1589android.os.BinderProxy.sendDeathNotice(Binder.java:551)</span><br><span class="line">07-14 10:18:32.949 W/ActivityManager( 1589): Scheduling restart of crashed service gd.avit.stb.msg.tv/com.avit.stb.msg.CoreService in 1000ms</span><br><span class="line">07-14 10:18:32.950 I/ActivityManager( 1589):   Force stopping service ServiceRecord{1757422 u0 gd.avit.stb.msg.tv/com.avit.stb.msg.CoreService}</span><br><span class="line">07-14 10:18:32.950 I/ActivityManager( 1589): Force stopping gd.avit.stb.msg.tv appid=10017 user=0: pkg removed</span><br><span class="line">07-14 10:18:32.958 W/ActivityManager( 1589): Spurious death for ProcessRecord{f447e11 2651:gd.avit.stb.msg.tv:CoreService/u0a17}, curProc for 2651: null</span><br><span class="line">07-14 10:18:32.965 D/NtpTrustedTime( 1589): currentTimeMillis() cache hit</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="logcat-vtime-s-tag"><a href="#logcat-vtime-s-tag" class="headerlink" title="logcat -vtime -s tag"></a>logcat -vtime -s tag</h3><p>过滤指定的tag</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@pineapple:/data/app # logcat -vtime -s  ActivityManager</span><br><span class="line">07-14 10:47:00.945 I/ActivityManager( 1589): START u0 {flg=0x10000000 cmp=com.avit.tv.setting/.module.SystemSettingMainActivity} from uid 1000 on display 0</span><br><span class="line">07-14 10:47:00.951 V/ActivityManager( 1589): set mstar.EnterOpaqueUI false</span><br><span class="line">07-14 10:47:00.956 V/ActivityManager( 1589): windowResize</span><br><span class="line">07-14 10:47:00.956 I/ActivityManager( 1589): TR3) TaskRecord{14806f22 #42 A=com.avit.tv.setting U=0 sz=1}</span><br><span class="line">07-14 10:47:00.957 I/ActivityManager( 1589): TR2) TaskRecord{2c327cf8 #35 A=com.zshine.launcher.iptv.avit U=0 sz=1}</span><br><span class="line">07-14 10:47:01.006 V/ActivityManager( 1589): TR3) TaskRecord{14806f22 #42 A=com.avit.tv.setting U=0 sz=1}</span><br><span class="line">07-14 10:47:01.006 V/ActivityManager( 1589): TR2) TaskRecord{2c327cf8 #35 A=com.zshine.launcher.iptv.avit U=0 sz=1}</span><br><span class="line">07-14 10:47:01.008 V/ActivityManager( 1589): TR3) TaskRecord{14806f22 #42 A=com.avit.tv.setting U=0 sz=1}</span><br><span class="line">07-14 10:47:01.008 V/ActivityManager( 1589): TR2) TaskRecord{2c327cf8 #35 A=com.zshine.launcher.iptv.avit U=0 sz=1}</span><br><span class="line">07-14 10:47:01.009 V/ActivityManager( 1589): set mstar.EnterOpaqueUI false</span><br><span class="line">07-14 10:47:01.139 I/ActivityManager( 1589): Displayed com.avit.tv.setting/.module.SystemSettingMainActivity: +188ms (total +29m36s330ms)</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="logcat-vtime-grep-E-“tag1-tag2”"><a href="#logcat-vtime-grep-E-“tag1-tag2”" class="headerlink" title="logcat -vtime | grep -E “tag1|tag2”"></a>logcat -vtime | grep -E “tag1|tag2”</h3><p>过滤指定的多tag，需配置grep命令使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@pineapple:/data/app # logcat -vtime | grep -E "ActivityManager|AndroidRuntime"</span><br><span class="line">14 10:18:32.685 D/AndroidRuntime( 3313): >>>>>> START com.android.internal.os.RuntimeInit uid 0 <<<<<<</span><br><span class="line">07-14 10:18:32.689 D/AndroidRuntime( 3313): CheckJNI is OFF</span><br><span class="line">07-14 10:18:32.819 D/AndroidRuntime( 3313): Calling main entry com.android.commands.pm.Pm</span><br><span class="line">07-14 10:18:32.834 I/ActivityManager( 1589): Force stopping gd.avit.stb.msg.tv appid=10017 user=-1: uninstall pkg</span><br><span class="line">07-14 10:18:32.834 I/ActivityManager( 1589): Killing 2651:gd.avit.stb.msg.tv:CoreService/u0a17 (adj 5): stop gd.avit.stb.msg.tv</span><br><span class="line">07-14 10:18:32.949 W/ActivityManager( 1589): Scheduling restart of crashed service gd.avit.stb.msg.tv/com.avit.stb.msg.CoreService in 1000ms</span><br><span class="line">07-14 10:18:32.950 I/ActivityManager( 1589):   Force stopping service ServiceRecord{1757422 u0 gd.avit.stb.msg.tv/com.avit.stb.msg.CoreService}</span><br><span class="line">07-14 10:18:32.950 I/ActivityManager( 1589): Force stopping gd.avit.stb.msg.tv appid=10017 user=0: pkg removed</span><br><span class="line">07-14 10:18:32.958 W/ActivityManager( 1589): Spurious death for ProcessRecord{f447e11 2651:gd.avit.stb.msg.tv:CoreService/u0a17}, curProc for 2651: null</span><br><span class="line">07-14 10:18:33.119 I/AndroidRuntime( 3313): VM exiting with result code 0.</span><br><span class="line">07-14 10:18:47.988 I/ActivityManager( 1589): Waited long enough for: ServiceRecord{31b2f6a4 u0 com.avit.ott.am/.service.AmService}</span><br><span class="line">07-14 10:47:00.945 I/ActivityManager( 1589): START u0 {flg=0x10000000 cmp=com.avit.tv.setting/.module.SystemSettingMainActivity} from uid 1000 on display 0</span><br><span class="line">07-14 10:47:00.951 V/ActivityManager( 1589): set mstar.EnterOpaqueUI false</span><br><span class="line">07-14 10:47:00.956 V/ActivityManager( 1589): windowResize</span><br><span class="line">07-14 10:47:00.956 I/ActivityManager( 1589): TR3) TaskRecord{14806f22 #42 A=com.avit.tv.setting U=0 sz=1}</span><br><span class="line">07-14 10:47:00.957 I/ActivityManager( 1589): TR2) TaskRecord{2c327cf8 #35 A=com.zshine.launcher.iptv.avit U=0 sz=1}</span><br><span class="line">07-14 10:47:01.006 V/ActivityManager( 1589): TR3) TaskRecord{14806f22 #42 A=com.avit.tv.setting U=0 sz=1}</span><br><span class="line">07-14 10:47:01.006 V/ActivityManager( 1589): TR2) TaskRecord{2c327cf8 #35 A=com.zshine.launcher.iptv.avit U=0 sz=1}</span><br><span class="line">07-14 10:47:01.008 V/ActivityManager( 1589): TR3) TaskRecord{14806f22 #42 A=com.avit.tv.setting U=0 sz=1}</span><br><span class="line">07-14 10:47:01.008 V/ActivityManager( 1589): TR2) TaskRecord{2c327cf8 #35 A=com.zshine.launcher.iptv.avit U=0 sz=1}</span><br><span class="line">07-14 10:47:01.009 V/ActivityManager( 1589): set mstar.EnterOpaqueUI false</span><br><span class="line">07-14 10:47:01.139 I/ActivityManager( 1589): Displayed com.avit.tv.setting/.module.SystemSettingMainActivity: +188ms (total +29m36s330ms)</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="logcat-vtime-gt"><a href="#logcat-vtime-gt" class="headerlink" title="logcat -vtime >"></a>logcat -vtime ></h3><p>为防止logcat被丢弃，也可以将日志写到文件中</p>
<p>将日志写到PC上</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adb logcat -vtime > test.log</span><br></pre></td></tr></tbody></table></figure></div>

<p>将日志写到本地data分区上,然后在拉到PC(日志很多有丢失时，推荐此方法，写入本地的速度比写到PC上的速度快也比打印到终端上的速度快)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">logcat -vtime > data/test.log</span><br><span class="line">exit</span><br><span class="line">adb pull /data/test.log .</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="logcat-g"><a href="#logcat-g" class="headerlink" title="logcat -g"></a>logcat -g</h3><p>查看当前的缓冲区LogBuf 大小</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@pineapple:/data/app # logcat -g</span><br><span class="line">main: ring buffer is 4Mb (226Kb consumed), max entry is 5120b, max payload is 4076b</span><br><span class="line">system: ring buffer is 256Kb (26Kb consumed), max entry is 5120b, max payload is 4076b</span><br><span class="line">crash: ring buffer is 256Kb (0b consumed), max entry is 5120b, max payload is 4076b</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="logcat-G"><a href="#logcat-G" class="headerlink" title="logcat -G"></a>logcat -G</h3><p>LogBuf 也是有一定大小限制的，当生产者写入 log 的速度太快，超出了 LogBuf 的容量，消费者 logcat 没来得及读取,部分日志会被丢弃，此时可考虑加大缓冲区</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@pineapple:/data/app # logcat -G 10M</span><br><span class="line">root@pineapple:/data/app # logcat -g</span><br><span class="line">main: ring buffer is 10Mb (280Kb consumed), max entry is 5120b, max payload is 4076b</span><br><span class="line">system: ring buffer is 10Mb (26Kb consumed), max entry is 5120b, max payload is 4076b</span><br><span class="line">crash: ring buffer is 10Mb (0b consumed), max entry is 5120b, max payload is 4076b</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="logcat-S"><a href="#logcat-S" class="headerlink" title="logcat -S"></a>logcat -S</h3><p>查看系统各进程输出日志信息</p>
<p>一般对于正式版本的应用，日志的输出肯定会是要做一定的优化关闭的，日志太多也会一定程度上影响系统的性能。</p>
<p>通过<code>logcat -S</code>查阅大日志应用,然后再进行下一步日志优化</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">130|root@pineapple:/data/app # logcat -S</span><br><span class="line">        span -> size/num  main               system             crash</span><br><span class="line">Total   1:15:10.679324876 1941886/21128      750052/7973        0/0</span><br><span class="line">Now     0:21:38.450885631 396092/4193        26937/251</span><br><span class="line"></span><br><span class="line">Chattiest clients:</span><br><span class="line">log id size/total          PID[?] name</span><br><span class="line">main   132963/471345       2194   com.avit.ott.ad.amg</span><br><span class="line">       76875/274470        2466   com.avit.ott.dm</span><br><span class="line">       68318/239793        2116   com.avit.srv.dataacquire</span><br><span class="line">       37410/144518        1188   /applications/bin/MiSysSrv</span><br><span class="line">       35701/134307        2505   amg.avit.stb.msg.tv:CoreService</span><br><span class="line">       23576/85957         2330   rel_supplicant</span><br><span class="line">       5528/257720         1589   system_server</span><br><span class="line">system 22558/707104        1589   system_server</span><br><span class="line">       2363/10687          3128   com.avit.ott.am</span><br><span class="line">       2016/19398          2139   com.zshine.launcher.iptv.avit</span><br><span class="line"></span><br><span class="line">main: UID/PID Total size/num   Now          UID/PID[?]  Total              Now</span><br><span class="line">1000        1289670/12345      262162/2411  1000/2194   471345/3827        132963/1076</span><br><span class="line">1000/2466   274470/3357        76875/943    1000/2505   134307/626         35701/156</span><br><span class="line">1000/1589   257720/2395        5528/71      1000/2523   14677/189          3182/43</span><br><span class="line">1000/2139   21758/387          2505/54      1000/2267   13804/162          2070/26</span><br><span class="line">1000/3128   15294/145          1666/20      1000/2290   4717/52            1336/18</span><br><span class="line">1000/1799   5449/122           185/3        1000/2340   3841/32            151/1</span><br><span class="line">1000/2540   35684/464                       1000/1170   24140/393</span><br><span class="line">1000/2240   5440/61                         1000/1180   3513/90</span><br><span class="line">1000/2485   2584/26                         1000/2611   318/5</span><br><span class="line">1000/1171   159/4                           1000/2446   129/3</span><br><span class="line">1000/2593   123/2                           1000/2426   122/2</span><br><span class="line">1000/?      76/1                            10016/2116  239793/2833        68318/807</span><br><span class="line">0           204188/2986        37736/522    0/1188      144518/2101        37410/516</span><br><span class="line">0/3313?     326/6              =            0/1354      45382/659</span><br><span class="line">0/1194      8245/123                        0/1409      3721/57</span><br><span class="line">0/1172      1193/20                         0/1189      336/11</span><br><span class="line">0/1192      219/5                           0/1167      104/2</span><br><span class="line">0/?         144/2                           1010/2330   85957/1470         23576/405</span><br><span class="line">10014/2027  25835/226          2826/28      1013/1175   39861/598          1018/14</span><br><span class="line">10006/1781  4511/62            333/4</span><br><span class="line">10017       46045/519          123/2        10017/2651? 27506/442          123/2</span><br><span class="line">10017/?     18539/77                        1019/1174   2136/28</span><br><span class="line">1003/?      1398/22                         65534/0     1144/17</span><br><span class="line">10002/1763  834/11                          1014/1745   253/6</span><br><span class="line">1012/1176   133/2                           1017/1178   50/1</span><br><span class="line">1036/1165   44/1                            10004/2400  34/1</span><br><span class="line"></span><br><span class="line">system: UID/PID Total size/num Now          UID/PID[?]  Total              Now</span><br><span class="line">1000        749857/7969        26937/251    1000/1589   707104/7796        22558/232</span><br><span class="line">1000/3128   10687/43           2363/10      1000/2139   19398/85           2016/9</span><br><span class="line">1000/2540   5168/22                         1000/2194   1944/6</span><br><span class="line">1000/2240   1270/4                          1000/2466   1031/3</span><br><span class="line">1000/2267   642/2                           1000/2523   642/2</span><br><span class="line">1000/2426   346/1                           1000/2593   335/1</span><br><span class="line">1000/2290   329/1                           1000/2340   325/1</span><br><span class="line">1000/1799   319/1                           1000/2485   317/1</span><br><span class="line">0/1169      125/3                           10006/1781  70/1</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<ul>
<li><a href="https://developer.android.google.cn/studio/command-line/logcat?hl=zh_cn" target="_blank" rel="noopener">谷歌开发者-Logcat 命令行工具</a></li>
<li><a href="http://qiushao.net/2020/02/13/Android/logcat-stat/" target="_blank" rel="noopener">Android-logcat统计各进程的log输出</a></li>
</ul>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>部门协作-谷歌代码实验室CodeLabs环境搭建</title>
    <url>/2020/09/26/CodeLabs-Env-Setup/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Codelabs环境搭建"><a href="#Codelabs环境搭建" class="headerlink" title="Codelabs环境搭建"></a>Codelabs环境搭建</h1><p>本文对应的<a href>Codelab</a>已同步值<a href="http://codelabs.top">Codelabs.top</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常工作中，文档管理无疑很是重要。</p>
<p>说到文档管理，一般第一个会想到的解决方案是搭建wiki服务器。但wiki有一个不好的体验就是界面步骤不够友好，对于教程类的文档体验更是糟糕。前段时间在逛<a href="https://developer.android.google.cn/" target="_blank" rel="noopener">Google官方网站</a>的时候，看到<a href="https://codelabs.developers.google.com/?cat=Android" target="_blank" rel="noopener">Google-Codelabs页面</a>，发现里面的流水线式的案例呈现很是流畅，页面展示如下</p>
<a href="https://s1.ax1x.com/2020/09/27/0kNRxS.jpg" data-fancybox="group" data-caption="codelabs-office" class="fancybox"><img alt="codelabs-office" title="codelabs-office" data-src="https://s1.ax1x.com/2020/09/27/0kNRxS.jpg" class="lazyload"></a>



<p>其实这个是<a href="https://github.com/googlecodelabs/tools" target="_blank" rel="noopener">google-codelab-tools工具</a>生成的，目前已在github上开源。不仅仅支持直接将文档上传到google官方的codelab服务器上，也支持发布在自己的私服或者一些免费的公网服务器上。</p>
<p>接下来我们将借助codelab-toos，一步步搭建属于自己的code-lab服务。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>本文以ubuntu18.04为例进程环境搭建，macOs,以及其他Linux环境的搭建流程也大致一致在此就不在复述。</p>
<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><ul>
<li><a href="https://golang.org/dl/" target="_blank" rel="noopener">Go</a> 语言<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install golang</span><br></pre></td></tr></tbody></table></figure></div></li>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.jsV10+</a> and <a href="https://www.npmjs.com/get-npm" target="_blank" rel="noopener">npm</a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></tbody></table></figure></div></li>
<li><a href="https://github.com/googlecodelabs/tools/tree/master/claat#install" target="_blank" rel="noopener">claat</a>(google官网维护的开源终端命令行工具)<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">go get github.com/googlecodelabs/tools/claat</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<p>安装完成后会在$HOME/go/bin下生产claat的执行文件</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>安装完Go软件后，默认会使用$HOME/go为工作目录，也可以手动指定目录，设置GOPATH为自定义目录。为当前用户配置环境变量，编辑.bashrc或者.profile.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">## not required if you’re only using Go modules </span><br><span class="line">export GOPATH=$HOME/go</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">## required </span><br><span class="line">export PATH=$PATH:$HOME/go/bin</span><br></pre></td></tr></tbody></table></figure></div>
<h2 id="启动页面"><a href="#启动页面" class="headerlink" title="启动页面"></a>启动页面</h2><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><p>[Codelabs](git clone <a href="https://github.com/googlecodelabs/tools)启动页面已开源在github仓储" target="_blank" rel="noopener">https://github.com/googlecodelabs/tools)启动页面已开源在github仓储</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/googlecodelabs/tools</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>工程clone后进入site文件夹，安装依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">## navigate to folder</span><br><span class="line">cd site/</span><br><span class="line">## install dependencies</span><br><span class="line">npm install</span><br><span class="line">npm install -g gulp-cli</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在开发模式下为该站点提供服务，运行以下命令:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">gulp serve</span><br></pre></td></tr></tbody></table></figure></div>
<p>启动成功后，访问[http// localhost:8000](http// localhost:8000)就可以看到主页效果了。</p>
<a href="https://s1.ax1x.com/2020/09/27/0kNoan.jpg" data-fancybox="group" data-caption="Codelabs-main-page" class="fancybox"><img alt="Codelabs-main-page" style="zoom:67%;" title="Codelabs-main-page" data-src="https://s1.ax1x.com/2020/09/27/0kNoan.jpg" class="lazyload"></a>

<p>现在我们已经设置了主页面，但没有codelab的item入口，接下来让我们编写一个codelab。</p>
<h2 id="编写Codelab"><a href="#编写Codelab" class="headerlink" title="编写Codelab"></a>编写Codelab</h2><p>目前codelab支持markdown和Google Doc,由于国内的的一些原因，Google Doc接触的机会不多，因此下文将以md文档为示例。</p>
<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p>在site目录创建codelabs文件夹，然后在codelabs文件夹下创建assets文件夹，asserts文件夹下你可以存储图片等素材。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">## create codelabs folder</span><br><span class="line">mkdir codelabs</span><br><span class="line">## go into directory</span><br><span class="line">cd codelabs/</span><br><span class="line">## create assets folder</span><br><span class="line">mkdir assets</span><br></pre></td></tr></tbody></table></figure></div>
<p>现在文件目录结构应该如下所示</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tools</span><br><span class="line">|-- site</span><br><span class="line">|--|-- codelabs</span><br><span class="line">|--|--|-- assets</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="创建md文档"><a href="#创建md文档" class="headerlink" title="创建md文档"></a>创建md文档</h3><p>在codelabs文件夹下，创建一个md文档，命名如下：<code>how-to-write-a-codelab.md</code><br>文件内容如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">summary: 如何编写Codelab</span><br><span class="line">id: how-to-write-a-codelab-md</span><br><span class="line">categories: Sample</span><br><span class="line">tags: sample</span><br><span class="line">status: Published </span><br><span class="line">authors: laird.li</span><br><span class="line">Feedback Link: https://lairdli.top</span><br><span class="line"></span><br><span class="line"># 如何编写一个Codelab by MD</span><br><span class="line"><!-- ------------------------ --></span><br><span class="line">## 概述 </span><br><span class="line">Duration: 1</span><br><span class="line"></span><br><span class="line">### 您将学到什么</span><br><span class="line">- 如何设置标题格式</span><br><span class="line">- 如何设置每张滑动页面的显示时间</span><br><span class="line">- 如何包含代码段</span><br><span class="line">- 如何设置超链接项目</span><br><span class="line">- 如何包含图像</span><br><span class="line">- 其他</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><!-- ------------------------ --></span><br><span class="line">## 设置标题</span><br><span class="line">Duration: 2</span><br><span class="line"></span><br><span class="line">codelab中标题格式如下：</span><br><span class="line">- 主标题 主标题为一级标题(即“#”）</span><br><span class="line">- 次标题 次标题为二级标题(即“##”）</span><br><span class="line">- 页面标题 页面类的标题从二级标题往后依次类推</span><br><span class="line"></span><br><span class="line">注意：标题前无需手动加上序号，序号在生成codelab时会自动生成、</span><br><span class="line"><!-- ------------------------ --></span><br><span class="line">## 设置时间</span><br><span class="line">Duration: 2</span><br><span class="line"></span><br><span class="line">为了表明每张滑动页面需要花费多长时间，请将每个次标题下添加“Duration”字段。</span><br><span class="line">单位为分钟。 例如您设置“Duration：4”，那么一张特定的滑动页面将需要4分钟才能完成。</span><br><span class="line"></span><br><span class="line">总时间将自动为您计算，并在创建后显示在代码实验室入口上。 </span><br><span class="line"></span><br><span class="line"><!-- ------------------------ --></span><br><span class="line">## 引用代码</span><br><span class="line">Duration: 3</span><br><span class="line"></span><br><span class="line">同md格式</span><br><span class="line">要包含代码段，您可以做一些事情。 </span><br><span class="line">- 双击键盘 "`"来进行内联突出显示:</span><br><span class="line">- 在"`"嵌入式代码</span><br><span class="line"></span><br><span class="line">### JavaScript</span><br><span class="line">      ```javascript</span><br><span class="line">          { </span><br><span class="line">            key1: "string", </span><br><span class="line">            key2: integer,</span><br><span class="line">            key3: "string"</span><br><span class="line">      }</span><br><span class="line">      ``</span><br><span class="line"></span><br><span class="line">### Java</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    for (statement 1; statement 2; statement 3) {</span><br><span class="line">      // code block to be executed</span><br><span class="line">    }</span><br><span class="line">    ``</span><br><span class="line"></span><br><span class="line"><!-- ------------------------ --></span><br><span class="line">## 超链接和嵌入式图像</span><br><span class="line">Duration: 1</span><br><span class="line">### 超链接</span><br><span class="line">同md格式</span><br><span class="line">[lairdli.top](https://lairdli.top)</span><br><span class="line">[codelabs.top](https://codelabs.top)</span><br><span class="line"></span><br><span class="line">### 图片</span><br><span class="line">同md格式</span><br><span class="line">![alt-text-here](assets/puppy.png)</span><br><span class="line"></span><br><span class="line">## 其他</span><br><span class="line">Duration: 1</span><br><span class="line"></span><br><span class="line">在此处查看官方文档: [Codelab Formatting Guide](https://github.com/googlecodelabs/tools/blob/master/FORMAT-GUIDE.md)</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="添加素材"><a href="#添加素材" class="headerlink" title="添加素材"></a>添加素材</h3><p>md内容中我们引用了一张puppy.png的图片，因而需要在assets文件夹中，添加一张名为puppy.png的图片</p>
<h3 id="转换网页"><a href="#转换网页" class="headerlink" title="转换网页"></a>转换网页</h3><p>在完成md文档的编写工作后，需要用<code>claat</code>工具将md文档转换为html的网页文档</p>
<p>在<code>codelables</code>目录下，运行如下命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> go into codelabs folder</span></span><br><span class="line">cd codelabs</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># export md to html</span></span></span><br><span class="line">claat export how-to-write-a-codelab.md</span><br></pre></td></tr></tbody></table></figure></div>

<p>转换完成后，<code>clatt</code>工具会根据md文档中头部声明的<code>id</code>字段，在当前目录下生成对应的文件夹。md文档的每一次修改，都需要转换一次。现在目录结构如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">├── assets</span><br><span class="line">│   └── puppy.png</span><br><span class="line">├── how-to-write-a-codelab-md</span><br><span class="line">│   ├── codelab.json</span><br><span class="line">│   ├── img</span><br><span class="line">│   │   └── 8590eca3e4b7c6ef.png</span><br><span class="line">│   └── index.html</span><br><span class="line">├── how-to-write-a-codelab.md</span><br><span class="line">└── README.md</span><br></pre></td></tr></tbody></table></figure></div>

<p>现在完成了md文档的的格式转换后，需要重新启动web服务</p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p><code>Ctr+C</code>断开之前的<code>gulp serve</code>启动的cmd-session.运行如下命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> go back to site folder</span></span><br><span class="line">cd ..</span><br><span class="line"><span class="meta">#</span><span class="bash"> re-run <span class="built_in">command</span></span></span><br><span class="line">gulp serve --codelabs-dir=codelabs</span><br></pre></td></tr></tbody></table></figure></div>

<a href="https://s1.ax1x.com/2020/09/27/0kNy5t.jpg" data-fancybox="group" data-caption="codelabs-page" class="fancybox"><img alt="codelabs-page" style="zoom:67%;" title="codelabs-page" data-src="https://s1.ax1x.com/2020/09/27/0kNy5t.jpg" class="lazyload"></a>



<a href="https://s1.ax1x.com/2020/09/27/0kN0DH.jpg" data-fancybox="group" data-caption="codelab-detail" class="fancybox"><img alt="codelab-detail" style="zoom:67%;" title="codelab-detail" data-src="https://s1.ax1x.com/2020/09/27/0kN0DH.jpg" class="lazyload"></a>

<h2 id="展示优化"><a href="#展示优化" class="headerlink" title="展示优化"></a>展示优化</h2><p>通过上一步骤，已经完成了一个codelab编写，转换，运行的主要流程，但为了UI展示的更加美观，还可以自定义分类，事件，颜色等等。</p>
<h3 id="分类图标"><a href="#分类图标" class="headerlink" title="分类图标"></a>分类图标</h3><ol>
<li>编辑<code>site/app/styles/_categories.scss</code>,在文件尾部添加自定义的分类主题，例如：</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@include codelab-card(['sample'], #FC0023, 'sample.svg');</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="2">
<li><p>前往<strong><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont.cn</a></strong>,搜索关键字“sample”,找到一个你喜欢的素材，然后下载对应<code>svg</code>文件。</p>
<p>将下载的文件重命名为<code>sample.svg</code>,并放置在<code>site/app/images/icons</code>目录下。</p>
</li>
<li><p><code>Ctr+C</code>断开之前的<code>gulp serve</code>启动的cmd-session.重新启动web服务</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">gulp serve --codelabs-dir=codelabs</span><br></pre></td></tr></tbody></table></figure></div>

<p>​                     <a href="https://s1.ax1x.com/2020/09/27/0kNwKe.jpg" data-fancybox="group" data-caption="category-icon" class="fancybox"><img alt="category-icon" style="zoom:67%;" title="category-icon" data-src="https://s1.ax1x.com/2020/09/27/0kNwKe.jpg" class="lazyload"></a></p>
<p>如上图，箭头所指示的地方即为刚添加的sample分类图标。  </p>
<p>需要注意的是，当只有一个codelabs时，默认不会显示分类选择框，要显示分类显示类别，需要至少两个不同分类的codelab。现在我们创建第二个分类codelab</p>
<blockquote>
<ol>
<li>拷贝上面的how-to-write-a-codelab.md文档</li>
<li>重命名文档为how-to-write-a-codelab-web.md</li>
<li>重命名文档头部<code>id</code>为how-to-write-a-codelab-web.md</li>
<li>重命令文档头部<code>categories</code>为“Web”</li>
<li>用<code>claat</code>命令转换文档</li>
<li>重新运行web服务</li>
</ol>
</blockquote>
<a href="https://s1.ax1x.com/2020/09/27/0kNBbd.jpg" data-fancybox="group" data-caption="codelabs-categorylist" class="fancybox"><img alt="codelabs-categorylist" style="zoom:67%;" title="codelabs-categorylist" data-src="https://s1.ax1x.com/2020/09/27/0kNBbd.jpg" class="lazyload"></a>

<p>如上图，箭头所指示的地方即为刚添加的sample和web分类图标。  选择对应的分类能过滤不同的codelabs</p>
<h3 id="事件归档"><a href="#事件归档" class="headerlink" title="事件归档"></a>事件归档</h3><p>codelabs除了支持类别过滤外，还支持事件主页分类。点击<code>choose an event</code>默认会出现<code>Visual Studio Live</code>选项，选中点击后页面会跳转到 <code>http://localhost:8000/vslive</code></p>
<a href="https://s1.ax1x.com/2020/09/27/0kN228.jpg" data-fancybox="group" data-caption="codelab-vslive-view" class="fancybox"><img alt="codelab-vslive-view" style="zoom:67%;" title="codelab-vslive-view" data-src="https://s1.ax1x.com/2020/09/27/0kN228.jpg" class="lazyload"></a>

<p>Codelabs的分类页面位于<code>site/app/views</code>文件夹下，进入到<code>site/app/views</code>,会发现vslive文件夹，在此我们可以删除或者新建编辑分类页面。如需删除直接删除对应文件夹即可。下面演示如何新建一个事件页面。</p>
<ol>
<li><p>拷贝vslive文件夹，并重命名为lairdli</p>
</li>
<li><p>进入lairdli文件夹，修改view.json相关内容</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"黎明鸟飞去"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"黎明鸟飞去 博文对应相关教程，博客地址：http://lairdli.top,微信公众号：黎明鸟飞去"</span>,</span><br><span class="line">  <span class="attr">"logoUrl"</span>: <span class="string">"/lairdli/lairdli-logo.png"</span>,</span><br><span class="line">  <span class="attr">"tags"</span>: [<span class="string">"lairdli"</span>],</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">".*-about$"</span>,</span><br><span class="line">    <span class="string">"^lang-.*"</span></span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>在同级目录新增lairdli-logo.png</p>
</li>
<li><p>修改site/codelabs文件夹下对应的md文档头部tags描述,改为新增的<code>lairli</code>，这样codelab就和事件绑定了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">summary: 如何编写Codelab</span><br><span class="line">id: how-to-write-a-codelab-md</span><br><span class="line">categories: Sample</span><br><span class="line">tags: lairdli</span><br><span class="line">status: Published </span><br><span class="line">authors: laird.li</span><br><span class="line">Feedback Link: https://lairdli.top</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>重新export文档，并重启web服务</p>
</li>
</ol>
<a href="https://s1.ax1x.com/2020/09/27/0kNrVA.jpg" data-fancybox="group" data-caption="codelab-lairdli-view" class="fancybox"><img alt="codelab-lairdli-view" style="zoom:67%;" title="codelab-lairdli-view" data-src="https://s1.ax1x.com/2020/09/27/0kNrVA.jpg" class="lazyload"></a>

<h3 id="主页图标栏"><a href="#主页图标栏" class="headerlink" title="主页图标栏"></a>主页图标栏</h3><p>默认的主题栏目展示如下</p>
<a href="https://s1.ax1x.com/2020/09/27/0kNhrQ.jpg" data-fancybox="group" data-caption="codelabs-title-icon-default" class="fancybox"><img alt="codelabs-title-icon-default" style="zoom:67%;" title="codelabs-title-icon-default" data-src="https://s1.ax1x.com/2020/09/27/0kNhrQ.jpg" class="lazyload"></a>

<p>替换步骤如下</p>
<blockquote>
<ol>
<li>进入<code>site/app/images</code>文件夹</li>
<li>用自己的logo,替换<code>logo.png</code>素材</li>
<li>重启web服务</li>
</ol>
</blockquote>
<a href="https://s1.ax1x.com/2020/09/27/0kN4bj.jpg" data-fancybox="group" data-caption="codelabs-title-logo-modify" class="fancybox"><img alt="codelabs-title-logo-modify" style="zoom:67%;" title="codelabs-title-logo-modify" data-src="https://s1.ax1x.com/2020/09/27/0kN4bj.jpg" class="lazyload"></a>

<h3 id="主页提示语"><a href="#主页提示语" class="headerlink" title="主页提示语"></a>主页提示语</h3><p>codelabs默认主要提示语为一串英文，且页面没做多语言适配，此处我们不讨论多语言适配，只简单定位如何修改主要提示语。</p>
<p>修改步骤如下</p>
<ol>
<li><p>打开<code>site/app/view/default/index.html</code>文件</p>
</li>
<li><p>定位<code>banner</code>部分，修改相关内容</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{# Event pages force down attribute. On homepage, it's applied dynamically. #}</span><br><span class="line">   <span class="tag"><<span class="name">header</span> <span class="attr">id</span>=<span class="string">"banner"</span> {% <span class="attr">if</span> <span class="attr">view.id</span> != <span class="string">'default'</span> <span class="attr">-</span>%}<span class="attr">down</span>{%<span class="attr">-</span> <span class="attr">else</span> %}<span class="attr">down</span>$=<span class="string">"[[_toBoolean(selectedFilter)]]"</span>{%<span class="attr">-</span> <span class="attr">endif</span> %}></span></span><br><span class="line">     <span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-width"</span>></span></span><br><span class="line">       {% if view.id == 'default' %}</span><br><span class="line">       <span class="tag"><<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"banner-title"</span>></span>欢迎来到 Codelabs.top!<span class="tag">h2</span>></span><br><span class="line">       <span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner-description"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">data-filter-selected</span>$=<span class="string">"{% raw %}[[_toBoolean(selectedFilter)]]{% endraw %}"</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">p</span> <span class="attr">class</span>=<span class="string">"banner-info"</span>></span></span><br><span class="line">          Codelabs.top 提供了一种引导式动手编码教程体验。对应黎明鸟飞去相关技术博客。</span><br><span class="line">           <span class="tag"><<span class="name">br</span>></span></span><br><span class="line">           <span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://lairdli.top"</span>></span>黎明鸟飞去博客<span class="tag">a</span>></span><br><span class="line">         <span class="tag">p</span>></span><br><span class="line">       {%- else -%}</span><br><span class="line">         <span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner-description"</span>></span></span><br><span class="line">           <span class="tag"><<span class="name">img</span> <span class="attr">id</span>=<span class="string">"logo"</span> <span class="attr">src</span>=<span class="string">"{{view.logoUrl}}"</span> <span class="attr">alt</span>=<span class="string">"Event logo"</span>></span></span><br><span class="line">           <span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner-meta"</span>></span></span><br><span class="line">             <span class="tag"><<span class="name">h3</span>></span>{{view.title}}<span class="tag">h3</span>></span><br><span class="line">             {% if view.description -%}</span><br><span class="line">               <span class="tag"><<span class="name">p</span>></span>{{view.description}}<span class="tag">p</span>></span><br><span class="line">             {%- endif %}</span><br><span class="line">           <span class="tag">div</span>></span><br><span class="line">       {%- endif %}</span><br><span class="line">         <span class="tag">div</span>></span><br><span class="line">     <span class="tag">div</span>></span><br><span class="line">   <span class="tag">header</span>></span><br></pre></td></tr></tbody></table></figure></div>

<ol start="3">
<li>重启运行web服务</li>
</ol>
</li>
</ol>
<a href="https://s1.ax1x.com/2020/09/27/0kNfKg.jpg" data-fancybox="group" data-caption="codelabs-tips.jpg" class="fancybox"><img alt="codelabs-tips.jpg" style="zoom:67%;" title="codelabs-tips.jpg" data-src="https://s1.ax1x.com/2020/09/27/0kNfKg.jpg" class="lazyload"></a>

<h3 id="底部链接条"><a href="#底部链接条" class="headerlink" title="底部链接条"></a>底部链接条</h3><p>codelabs默认底部链接没有实现，添加底部链接步骤如下</p>
<ol>
<li><p>打开<code>site/app/view/default/index.html</code>文件</p>
</li>
<li><p>定位到<code><footer id="footer"></footer></code></p>
</li>
<li><p>修改对应的链接地址</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="tag"><<span class="name">footer</span> <span class="attr">id</span>=<span class="string">"footer"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer-wrapper site-width"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link-list"</span>></span></span><br><span class="line">      <span class="tag"><<span class="name">label</span>></span>联系<span class="tag">label</span>></span><br><span class="line">      <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://lairdli.top/about/"</span>></span>关于我<span class="tag">a</span>></span><span class="tag">li</span>><br><span class="line">      <span class="tag">ul</span>></span><br><span class="line">    <span class="tag">div</span>></span><br><span class="line">    <span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link-list"</span>></span></span><br><span class="line">      <span class="tag"><<span class="name">label</span>></span>博客<span class="tag">label</span>></span><br><span class="line">      <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://lairdli.top/"</span>></span>主页<span class="tag">a</span>></span><span class="tag">li</span>><br><span class="line">      <span class="tag">ul</span>></span><br><span class="line">    <span class="tag">div</span>></span><br><span class="line">    <span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link-list"</span>></span></span><br><span class="line">      <span class="tag"><<span class="name">label</span>></span>留言<span class="tag">label</span>></span><br><span class="line">      <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://lairdli.top/link/"</span>></span>反馈<span class="tag">a</span>></span><span class="tag">li</span>><br><span class="line">      <span class="tag">ul</span>></span><br><span class="line">    <span class="tag">div</span>></span><br><span class="line">    <span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link-list"</span>></span></span><br><span class="line">      <span class="tag"><<span class="name">label</span>></span>友链<span class="tag">label</span>></span><br><span class="line">       <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://lairdli.top/link/"</span>></span>交换<span class="tag">a</span>></span><span class="tag">li</span>><br><span class="line">      <span class="tag">ul</span>></span><br><span class="line">    <span class="tag">div</span>></span><br><span class="line">  <span class="tag">div</span>></span><br><span class="line"><span class="tag">footer</span>></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>重新运行web服务</p>
</li>
</ol>
<a href="https://s1.ax1x.com/2020/09/27/0kNsUI.jpg" data-fancybox="group" data-caption="codelab-foot" class="fancybox"><img alt="codelab-foot" style="zoom:67%;" title="codelab-foot" data-src="https://s1.ax1x.com/2020/09/27/0kNsUI.jpg" class="lazyload"></a>

<h2 id="发布Codelabs"><a href="#发布Codelabs" class="headerlink" title="发布Codelabs"></a>发布Codelabs</h2><p>codelabs支持发布到Google官方网站，也支持发布到私有服务器，当然也支持发布到公网服务器。</p>
<h3 id="发布到官方服务器"><a href="#发布到官方服务器" class="headerlink" title="发布到官方服务器"></a>发布到官方服务器</h3><p>由于国内网的一些原因，发布到<a href="https://codelabs.developers.google.com" target="_blank" rel="noopener">Google官方网站</a>步骤，暂不做复述，具体参考：</p>
<p><a href="https://github.com/googlecodelabs/tools/blob/master/README.md#can-i-publish-my-codelab-on-the-official-google-codelabs-site" target="_blank" rel="noopener">Publish Codelabs to Google Codelabs</a></p>
<h3 id="发布到公网服务器"><a href="#发布到公网服务器" class="headerlink" title="发布到公网服务器"></a>发布到公网服务器</h3><p>本文以github-page(*.github.io)为例 其他静态web服务器类似。</p>
<p>步骤如下：</p>
<ol>
<li><p>site目录执行<code>gulp serve --codelabs-dir=codelabs</code>，会在site目录下生成build文件夹。我们通过浏览器访问的网页资源，其实就是build文件夹中的产物。</p>
</li>
<li><p>拷贝build文件夹，重命名为web</p>
</li>
<li><p>拷贝codelabs文件夹到web文件夹</p>
</li>
<li><p>在github服务上新建一个仓储<code>*username*.github.io</code>空间，用做静态网站仓储.</p>
<p>具体开启<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>参考<code>https://pages.github.com/</code></p>
</li>
<li><p>将web文件夹同步到github上</p>
</li>
</ol>
<p>设置完成后就可以通过<code>https://username.github.io</code>访问codelabs了。</p>
<h3 id="发布到私有服务器"><a href="#发布到私有服务器" class="headerlink" title="发布到私有服务器"></a>发布到私有服务器</h3><p>发布到私有服务器，需要服务器已搭建好apache或tomcat或nginx等web服务器。</p>
<p>本文以ubuntu上的apache服务器为说明。步骤如下</p>
<ol>
<li><p>site目录执行<code>gulp serve --codelabs-dir=codelabs</code>，会在site目录下生成build文件夹。我们通过浏览器访问的网页资源，其实就是build文件夹中的产物。</p>
</li>
<li><p>拷贝build文件夹，重命名为web</p>
</li>
<li><p>拷贝codelabs文件夹到web文件夹</p>
</li>
<li><p>将web文件夹内容同步到ubuntu服务上,例如我的目录为</p>
<p><code>/home/lairdli/codelabs/web</code></p>
</li>
<li><p>进入apache配置目录 <code>/etc/apache2/</code></p>
</li>
<li><p>进入<code>sites-available</code>拷贝默认配置<code>sudo cp 000-default.conf codelabs.conf</code></p>
</li>
<li><p>编辑 <code>codelabs.conf</code>,修改对应的端口号，资源路径等</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"><virtualhost *:9001></virtualhost></span><br><span class="line">	# The ServerName directive sets the request scheme, hostname and port that</span><br><span class="line">	# the server uses to identify itself. This is used when creating</span><br><span class="line">	# redirection URLs. In the context of virtual hosts, the ServerName</span><br><span class="line">	# specifies what hostname must appear in the request's Host: header to</span><br><span class="line">	# match this virtual host. For the default virtual host (this file) this</span><br><span class="line">	# value is not decisive as it is used as a last resort host regardless.</span><br><span class="line">	# However, you must set it for any further virtual host explicitly.</span><br><span class="line">	ServerName codelabs.top</span><br><span class="line"></span><br><span class="line">	ServerAdmin webmaster@localhost:9001</span><br><span class="line">	DocumentRoot /home/lairdli/codelabs/web</span><br><span class="line"></span><br><span class="line">  <directory " home lairdli codelabs web"></directory></span><br><span class="line">  	  AllowOverride All</span><br><span class="line">	</span><br><span class="line"> </span><br><span class="line">	# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</span><br><span class="line">	# error, crit, alert, emerg.</span><br><span class="line">	# It is also possible to configure the loglevel for particular</span><br><span class="line">	# modules, e.g.</span><br><span class="line">	#LogLevel info ssl:warn</span><br><span class="line"></span><br><span class="line">	ErrorLog ${APACHE_LOG_DIR}/error.log</span><br><span class="line">	CustomLog ${APACHE_LOG_DIR}/access.log combined</span><br><span class="line"></span><br><span class="line">	# For most configuration files from conf-available/, which are</span><br><span class="line">	# enabled or disabled at a global level, it is possible to</span><br><span class="line">	# include a line for only one particular virtual host. For example the</span><br><span class="line">	# following line enables the CGI configuration for this host only</span><br><span class="line">	# after it has been globally disabled with "a2disconf".</span><br><span class="line">	#Include conf-available/serve-cgi-bin.conf</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>编辑<code>/etc/apache2/ports.conf</code>新增监听端口号</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Listen 9001</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>重启appach服务 <code>sudo service apache2 restart</code></p>
</li>
</ol>
<p>设置完成后就可以通过<code>https://local-server-ip:9001</code>访问codelabs了。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><ol>
<li><p>fatal: unable to access ‘<a href="https://github.com/googlecodelabs/tools/'" target="_blank" rel="noopener">https://github.com/googlecodelabs/tools/'</a>: Failed to connect to github.com port 443: 连接超时<br>解决方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">1 下载离线包https://github.com/googlecodelabs/tools/tree/master/claat</span><br><span class="line">2 $GOPATH/src/github.com/googlecodelabs/tools目录下解压</span><br><span class="line">3 执行 go get github.com/googlecodelabs/tools/claat</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>package golang.org/x/net/… timeout<br>package golang.org/x/oauth2:…timout<br>解决方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/golang.org/x/</span><br><span class="line">cd $GOPATH/src/golang.org/x/</span><br><span class="line">git clone https://github.com/golang/net.git net </span><br><span class="line">git clone https://github.com/golang/oauth2.git oauth2</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>npm install fail<br>解决方法：nodejs版本太低,ubuntu升级</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install  npm</span><br><span class="line">sudo npm install n -g</span><br><span class="line">sudo n stable</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p><code>gulp</code>启动web服务后,<code>http://localhost:8000</code>可以访问，但通过<code>http://ip:8000</code>访问不了<br>解决方法：修改<code>site/node_modules/gulp-webserver/src/index.js</code>.<br>将host：<code>localhost</code>更改为<code>“host”:"0.0.0.0"</code><br>这样通过localhost或ip地址都可以访问，当然如果有需要，端口号也可以在此处修改</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">//host:'localhost'</span><br><span class="line">   host: '0.0.0.0',</span><br><span class="line">   port: 8000,</span><br><span class="line">   path: '/',</span><br><span class="line">   fallback: false,</span><br><span class="line">   https: false,</span><br><span class="line">   open: false,</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="https://codelabs.developers.google.com/?cat=Android" target="_blank" rel="noopener">Google-CodeLabs</a><code>https://codelabs.developers.google.com/?cat=Android</code></p>
</li>
<li><p><a href="v">Goole-CodeLbas-Tools</a><a href="https://github.com/googlecodelabs/tools" target="_blank" rel="noopener">https://github.com/googlecodelabs/tools</a></p>
</li>
<li><p><a href="https://medium.com/@zarinlo/publish-technical-tutorials-in-google-codelab-format-b07ef76972cd" target="_blank" rel="noopener">Publish Technical Tutorials in Google Codelab Format</a><code>https://medium.com/@zarinlo/publish-technical-tutorials-in-google-codelab-format-b07ef76972cd</code></p>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>CodeLabs</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Code</tag>
        <tag>Soft</tag>
      </tags>
  </entry>
  <entry>
    <title>部门协作-终端播放器测试源环境搭建</title>
    <url>/2020/06/29/Soft-IPTV-Player-OS/</url>
    <content><![CDATA[<html><head></head><body><h2 id="IPTV播放器OS源测试环境搭建"><a href="#IPTV播放器OS源测试环境搭建" class="headerlink" title="IPTV播放器OS源测试环境搭建"></a>IPTV播放器OS源测试环境搭建</h2><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>如下图所示，整个网络主要包括3大部分组成：</p>
<a href="https://s1.ax1x.com/2020/06/29/NfTmq0.md.png" data-fancybox="group" data-caption="基于局域网的机顶盒组播和单播自测方法-整体框图" class="fancybox"><img alt="基于局域网的机顶盒组播和单播自测方法-整体框图" style="zoom:100%;" title="基于局域网的机顶盒组播和单播自测方法-整体框图" data-src="https://s1.ax1x.com/2020/06/29/NfTmq0.md.png" class="lazyload"></a>

<p>服务器：台式机or笔记本，用于搭建HTTP服务器、组播服务器和单播服务器。</p>
<p>机顶盒：用于解码音视频。</p>
<p>显示设备：电视机or电脑显示器，用于显示机顶盒的输出。</p>
<h3 id="硬件详细清单"><a href="#硬件详细清单" class="headerlink" title="硬件详细清单"></a>硬件详细清单</h3><table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td>台式机or笔记本</td>
<td>服务器（Windows XP、Windows  7）</td>
</tr>
<tr>
<td>网关（路由器）or交换机（可选）</td>
<td>DHCP服务（IPv4）</td>
</tr>
<tr>
<td>机顶盒或者OTT电视机</td>
<td>接受组播或单播码流，并解码输出</td>
</tr>
<tr>
<td>电视机or电脑显示器</td>
<td>显示设备，用于显示视频画面（其中，电脑显示器亦可共用台式机or笔记本的显示器）</td>
</tr>
<tr>
<td><a href="https://item.jd.com/51698583704.html" target="_blank" rel="noopener">电视盒</a>（HDMI采集卡与电脑显示器配对）</td>
<td>将机顶盒输出信号传输到电脑显示器（驱动等自备）</td>
</tr>
<tr>
<td><a href="https://item.jd.com/43298370951.html" target="_blank" rel="noopener">视频棒</a>（UV200）（与电脑配对）</td>
<td>将机顶盒输出信号传输到电脑（驱动等自备）</td>
</tr>
<tr>
<td>CVBS线or HDMI线（与电视机配对）</td>
<td>将机顶盒输出信号传输到电视机</td>
</tr>
<tr>
<td><a href="https://item.jd.com/4526063.html" target="_blank" rel="noopener">HDMI转DVI线</a>（与电脑显示器配对）</td>
<td>将机顶盒输出信号传输到电脑显示器</td>
</tr>
</tbody></table>
<h3 id="软件详细清单"><a href="#软件详细清单" class="headerlink" title="软件详细清单"></a>软件详细清单</h3><table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn" target="_blank" rel="noopener">Adb.zip</a></td>
<td>adb工具包，用于电脑连接盒子进行相关操作</td>
</tr>
<tr>
<td>SecureCRT.exe</td>
<td>串口终端工具，用于连接盒子，进行相关操作，也可以用xshell等其他工具</td>
</tr>
<tr>
<td><a href="http://live555.com/" target="_blank" rel="noopener">live555MediaServer.exe</a></td>
<td>单播服务器程序，向机顶盒发送单播码流</td>
</tr>
<tr>
<td><a href="https://dl.pconline.com.cn/download/1655178.html" target="_blank" rel="noopener">PixstreamWinsend.exe</a></td>
<td>组播服务器程序，向机顶盒发送组播码流</td>
</tr>
<tr>
<td>test.ts或者test.mpg（mpegts容器封装，文件名可变，后缀为.ts或者.mpg）</td>
<td>测试片源（请自备）</td>
</tr>
<tr>
<td><a href="https://www.rejetto.com/hfs/" target="_blank" rel="noopener">hfs.exe</a></td>
<td>Hls点播服务器程序，向机顶盒发送hls点播码流</td>
</tr>
<tr>
<td><a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener">ffmpeg.exe</a></td>
<td>Hls切片程序</td>
</tr>
<tr>
<td><a href="http://get.videolan.org/vlc/" target="_blank" rel="noopener">vlc.exe</a></td>
<td>在直播服务器搭建中使用VLC软件将视频以不同格式流的形式发出</td>
</tr>
<tr>
<td><a href="http://get.videolan.org/vlc-android/" target="_blank" rel="noopener">vlc.apk</a></td>
<td>盒子终端vlc播放器，用于测试盒子端网络流视频</td>
</tr>
<tr>
<td><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx.exe</a></td>
<td>Hls直播服务器程序，向机顶盒发送hls直播码流</td>
</tr>
</tbody></table>
<h3 id="相关命令工具"><a href="#相关命令工具" class="headerlink" title="相关命令工具"></a>相关命令工具</h3><h4 id="Adb的安装使用"><a href="#Adb的安装使用" class="headerlink" title="Adb的安装使用"></a>Adb的安装使用</h4><p>首先请下载解压adb工具包</p>
<p>配置系统环境变量到adb工具包目录（可选，如不配置，adb命令需进入到相应adb文件夹，建议配置）</p>
<p>打开cmd，进行adb相关操作，常用操作如下</p>
<p>连接盒子</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">adb connect ip:port</span><br></pre></td></tr></tbody></table></figure></div>

<p>断开盒子</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">adb disconnect</span><br></pre></td></tr></tbody></table></figure></div>

<p>查看连接设备</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></tbody></table></figure></div>

<p> 安装应用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">adb install apk路径</span><br></pre></td></tr></tbody></table></figure></div>

<p>卸载应用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">adb uninstall apk包名</span><br></pre></td></tr></tbody></table></figure></div>

<p>清除应用缓存</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">adb shell pm clear apk包名</span><br></pre></td></tr></tbody></table></figure></div>

<p>查看应用信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">adb shell dumpsys package apk包名</span><br></pre></td></tr></tbody></table></figure></div>

<p>抓取日志</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">adb logcat -vtime > adb.log</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="FFmpeg的安装使用"><a href="#FFmpeg的安装使用" class="headerlink" title="FFmpeg的安装使用"></a>FFmpeg的安装使用</h4><p>官网下载相关软件后将ffmpeg离线包解压</p>
<h5 id="转换方式一"><a href="#转换方式一" class="headerlink" title="转换方式一"></a>转换方式一</h5><ol>
<li>直接把媒体文件转为ts</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i cat.mp4 -c copy -bsf h264_mp4toannexb cat.ts</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="2">
<li>使用segment参数进行切片</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i cat.ts -c copy -map <span class="number">0</span> -f segment -segment_list playlist.m3u8 -segment_time <span class="number">2</span> cat_output%<span class="number">03</span>d.ts</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="转换方式二"><a href="#转换方式二" class="headerlink" title="转换方式二"></a>转换方式二</h5><ol>
<li>ffmpeg切片命令，以H264和AAC的形式对视频进行输出</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libx264 -c:a aac -strict -<span class="number">2</span> -f hls output.m3u8</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="2">
<li><p>ffmpeg转化成HLS时附带的指令 </p>
<blockquote>
<p>-hls_time n: 设置每片的长度，默认值为2。单位为秒</p>
<p>-hls_list_size n:设置播放列表保存的最多条目，设置为0会保存有所片信息，默认值为5</p>
<p>-hls_wrap n:设置多少片之后开始覆盖，如果设置为0则不会覆盖，默认值为0.这个选项能够避免在磁盘上存储过多的片，而且能够限制写入磁盘的最多的片的数量</p>
<p>-hls_start_number n:设置播放列表中sequence number的值为number，默认值为0</p>
</blockquote>
</li>
<li><p>对ffmpeg切片指令的使用</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i output.mp4 -c:v libx264 -c:a aac -strict -<span class="number">2</span> -f hls -hls_list_size <span class="number">0</span> -hls_time <span class="number">5</span> output.m3u8</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="4">
<li>对应切片时长不准，可以用如下命令</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i output.mp4 -force_key_frames <span class="string">"expr:gte(t,n_forced*2)"</span> -strict -<span class="number">2</span> -c:a aac -c:v libx264 -hls_time <span class="number">1</span> -f hls output.m3u8</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="机顶盒测环境搭建"><a href="#机顶盒测环境搭建" class="headerlink" title="机顶盒测环境搭建"></a>机顶盒测环境搭建</h3><h4 id="机顶盒与服务器连接"><a href="#机顶盒与服务器连接" class="headerlink" title="机顶盒与服务器连接"></a>机顶盒与服务器连接</h4><p>机顶盒与服务器之间的连接方式有2种（任选一种）：直连方式和路由方式。</p>
<h5 id="直连方式"><a href="#直连方式" class="headerlink" title="直连方式"></a>直连方式</h5><p>机顶盒与服务器直接用网线连接，配置IP方式如下：</p>
<ol>
<li>服务器手动配置静态IP：“本地连接->属性”。</li>
<li>Android机顶盒手动配置静态IP：通过遥控器或者鼠标操作：在Launcher界面点击“Settings”，进入“Settings->Ethernet->StaticIP”。（不同版本可能路径略有差异）</li>
</ol>
<h5 id="路由方式"><a href="#路由方式" class="headerlink" title="路由方式"></a>路由方式</h5><p>机顶盒与服务器通过网关或者交换机连接，配置IP方式如下：</p>
<ul>
<li><p>服务器（任选一种）</p>
<ol>
<li><p>自动获取动态IP：“本地连接->属性”。（网关或交换机需开启DHCP服务）</p>
</li>
<li><p>手动配置静态IP：同上面的直连方式。</p>
</li>
</ol>
</li>
<li><p>机顶盒（任选一种）</p>
<ol>
<li><p>自动获取动态IP</p>
<p>通过遥控器或者鼠标操作：在Launcher界面点击“Settings”，进入“Settings->Ethernet->DHCP”。</p>
</li>
<li><p>手动配置静态IP：同上面的直连方式。</p>
</li>
</ol>
</li>
</ul>
<p>注：</p>
<ul>
<li>服务器和机顶盒的IP地址必须为局域网同一网段，例如：服务器IP地址为192.168.1.112，机顶盒IP地址为192.168.1.1.111。</li>
<li>通过网关或者交换机连接，可以在同一局域网内挂载多台机顶盒，方便批量测试。</li>
</ul>
<h4 id="机顶盒与显示设备的连接"><a href="#机顶盒与显示设备的连接" class="headerlink" title="机顶盒与显示设备的连接"></a>机顶盒与显示设备的连接</h4><h5 id="显示设备"><a href="#显示设备" class="headerlink" title="显示设备"></a>显示设备</h5><ul>
<li><p>电脑显示器：VGA输入or DVI输入。</p>
</li>
<li><p>电视机：CVBS输入or HDMI输入。</p>
</li>
</ul>
<h5 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h5><ul>
<li><p>电视盒：CVBS输入，VGA输出。</p>
</li>
<li><p>视频棒（UV200）：CVBS输入，USB输出。</p>
</li>
<li><p>CVBS线：CVBS输入输出。</p>
</li>
<li><p>HDMI线：HDMI输入输出。</p>
</li>
<li><p>HDMI转DVI线：HDMI输入，DVI输出。 </p>
</li>
</ul>
<h4 id="机顶盒安装vlc等播放器"><a href="#机顶盒安装vlc等播放器" class="headerlink" title="机顶盒安装vlc等播放器"></a>机顶盒安装vlc等播放器</h4><p>机顶盒需要安装终端播放器，用于测试视频源。</p>
<h5 id="安装vlc"><a href="#安装vlc" class="headerlink" title="安装vlc"></a>安装vlc</h5><p>终端盒子adb安装vlc</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"> laird@192  ~  adb install -r /Users/laird/Work/soft/vlc/VLC-Android-3.2.9-armeabi-v7a.apk</span><br><span class="line">Performing Push Install</span><br><span class="line">/Users/laird/Work/soft/vlc/VLC-Android-3.2.9-armeabi-v7a.apk: 1 file pushed. 1.9 MB/s (26371037 bytes in 13.120s)</span><br><span class="line">	pkg: /data/local/tmp/VLC-Android-3.2.9-armeabi-v7a.apk</span><br><span class="line">Success</span><br><span class="line"> laird@192  ~ </span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="启动vlc应用"><a href="#启动vlc应用" class="headerlink" title="启动vlc应用"></a>启动vlc应用</h5><p> 有以下2种方式（任选一种）：</p>
<ul>
<li>通过遥控器操作</li>
</ul>
<p>通过遥控器从系统应用管理界面进入</p>
<a href="https://s1.ax1x.com/2020/06/29/NfT1G4.md.png" data-fancybox="group" data-caption="vlc-vlc-app-url" class="fancybox"><img alt="vlc-vlc-app-url" title="vlc-vlc-app-url" data-src="https://s1.ax1x.com/2020/06/29/NfT1G4.md.png" class="lazyload"></a>

<ul>
<li>通过命名行进入</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">am start -n org.videolan.vlc/.StartActivity</span><br></pre></td></tr></tbody></table></figure></div>

<a href="https://s1.ax1x.com/2020/06/29/NfTKaT.md.png" data-fancybox="group" data-caption="vlc-vlc-app-url" class="fancybox"><img alt="vlc-vlc-app-url" title="vlc-vlc-app-url" data-src="https://s1.ax1x.com/2020/06/29/NfTKaT.md.png" class="lazyload"></a>

<ul>
<li>通过遥控器选择串流</li>
</ul>
<a href="https://s1.ax1x.com/2020/06/29/NfT8z9.md.png" data-fancybox="group" data-caption="vlc-vlc-app-url" class="fancybox"><img alt="vlc-vlc-app-url" style="zoom:100%;" title="vlc-vlc-app-url" data-src="https://s1.ax1x.com/2020/06/29/NfT8z9.md.png" class="lazyload"></a>

<h2 id="点播测试"><a href="#点播测试" class="headerlink" title="点播测试"></a>点播测试</h2><h3 id="HTTP点播测试"><a href="#HTTP点播测试" class="headerlink" title="HTTP点播测试"></a>HTTP点播测试</h3><h4 id="HTTP点播服务器搭建"><a href="#HTTP点播服务器搭建" class="headerlink" title="HTTP点播服务器搭建"></a>HTTP点播服务器搭建</h4><ul>
<li>启动hfs.exe</li>
</ul>
<p>打开hfs.exe，直接将测试片源拖入进去进行发流；访问的地址为自己配置的地址，如这里为：”<a href="http://192.168.31.245/test.mp4”" target="_blank" rel="noopener">http://192.168.31.245/test.mp4”</a>;</p>
<a href="https://s1.ax1x.com/2020/06/29/NfT3RJ.md.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:100%;" title="img" data-src="https://s1.ax1x.com/2020/06/29/NfT3RJ.md.jpg" class="lazyload"></a>

<h4 id="HTTP点播终端播放"><a href="#HTTP点播终端播放" class="headerlink" title="HTTP点播终端播放"></a>HTTP点播终端播放</h4><ul>
<li>通过pc-vlc等播放器播放 <a href="http://192.168.31.245/test.mp4" target="_blank" rel="noopener">http://192.168.31.245/test.mp4</a></li>
<li>通过终端-vlc等播放器播放 <a href="http://192.168.31.245/test.mp4" target="_blank" rel="noopener">http://192.168.31.245/test.mp4</a></li>
</ul>
<h3 id="RTSP点播测试"><a href="#RTSP点播测试" class="headerlink" title="RTSP点播测试"></a>RTSP点播测试</h3><h4 id="RTSP点播服务器搭建"><a href="#RTSP点播服务器搭建" class="headerlink" title="RTSP点播服务器搭建"></a>RTSP点播服务器搭建</h4><p>将live555MediaServer.exe和自己要播的视频文件如test.ts放在同一个文件下。</p>
<p> 双击运行live555MediaServer.exe</p>
<p><a href="https://s1.ax1x.com/2020/06/29/NfTuZV.jpg" data-fancybox="group" data-caption="live55server" class="fancybox"><img alt="live55server" title="live55server" data-src="https://s1.ax1x.com/2020/06/29/NfTuZV.jpg" class="lazyload"></a></p>
<p>注：若服务器IP为192.168.1.112，则上述播放地址URL应为：“rtsp://192.168.1.112/test.ts”</p>
<h4 id="RTSP点播终端播放"><a href="#RTSP点播终端播放" class="headerlink" title="RTSP点播终端播放"></a>RTSP点播终端播放</h4><ul>
<li>通过pc-vlc等播放器播放 rtsp://192.168.1.112/test.ts</li>
<li>通过终端-vlc等播放器播放 rtsp://192.168.1.112/test.ts</li>
</ul>
<h3 id="HLS点播测试"><a href="#HLS点播测试" class="headerlink" title="HLS点播测试"></a>HLS点播测试</h3><h4 id="HLS点播服务器搭建"><a href="#HLS点播服务器搭建" class="headerlink" title="HLS点播服务器搭建"></a>HLS点播服务器搭建</h4><p>1.先用ffmpeg将视频切片成m3u8文件:</p>
<p>打开命令行，进入ffmpeg的bin目录，输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i test.mp4 -force_key_frames <span class="string">"expr:gte(t,n_forced*2)"</span> -strict -<span class="number">2</span> -c:a aac -c:v libx264 -hls_time <span class="number">2</span> -f hls out.m3u8</span><br></pre></td></tr></tbody></table></figure></div>

<p>2.将切片好的文件放入同一个文件夹 </p>
<p><a href="https://s1.ax1x.com/2020/06/29/NfTYs1.md.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://s1.ax1x.com/2020/06/29/NfTYs1.md.jpg" class="lazyload"></a></p>
<p>3.打开hfs.exe将hls文件夹拖入里面进行发流；</p>
<a href="https://s1.ax1x.com/2020/06/29/NfTliF.md.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:100%;" title="img" data-src="https://s1.ax1x.com/2020/06/29/NfTliF.md.jpg" class="lazyload"></a>

<h4 id="HLS点播终端播放"><a href="#HLS点播终端播放" class="headerlink" title="HLS点播终端播放"></a>HLS点播终端播放</h4><ul>
<li>通过pc-vlc等播放器播放 <a href="http://192.168.31.245/test/playlist.m3u8" target="_blank" rel="noopener">http://192.168.31.245/test/playlist.m3u8</a></li>
<li>通过终端-vlc等播放器播放 <a href="http://192.168.31.245/test/playlist.m3u8" target="_blank" rel="noopener">http://192.168.31.245/test/playlist.m3u8</a></li>
</ul>
<h2 id="直播测试"><a href="#直播测试" class="headerlink" title="直播测试"></a>直播测试</h2><h3 id="组播流测试"><a href="#组播流测试" class="headerlink" title="组播流测试"></a>组播流测试</h3><h4 id="Winsend发送组播流"><a href="#Winsend发送组播流" class="headerlink" title="Winsend发送组播流"></a>Winsend发送组播流</h4><ol>
<li><p>打开PixstreamWinsend.exe配置地址。</p>
</li>
<li><p>点击open按钮，选择自己想要播出视频流所在的文件夹选取视频文件</p>
</li>
<li><p>点击send按钮，开始发流。</p>
</li>
</ol>
<p><a href="https://s1.ax1x.com/2020/06/29/NfTJMR.png" data-fancybox="group" data-caption="winsend-note" class="fancybox"><img alt="winsend-note" title="winsend-note" data-src="https://s1.ax1x.com/2020/06/29/NfTJMR.png" class="lazyload"></a></p>
<ol>
<li><p>点击“Open”，选择test.t或者test.mpg。</p>
</li>
<li><p>点击“Interface”下拉框，选择服务器IP。（例如192.168.1.112)</p>
</li>
<li><p>设置“IP address”为组播IP。（默认226.0.0.6）</p>
</li>
<li><p>设置“IP port”为组播端口。（默认5004）</p>
</li>
<li><p>点击“Send”开始发送码流。</p>
</li>
</ol>
<p>注：如果“Interface”下拉框不可用或者为无效地址“0.0.0.0”，则先关闭此软件，将网线连接上服务器和机顶盒（网关or交换机），再打开此软件。本界面有三个频道可以发三个码流，重新打开PixstreamWinsend.exe，注意用不同的组播IP和端口。</p>
<h4 id="VLC发送UDP流"><a href="#VLC发送UDP流" class="headerlink" title="VLC发送UDP流"></a>VLC发送UDP流</h4><ol>
<li><p>打开vlc,点击 媒体 选项，然后点击 流</p>
</li>
<li><p>添加要发流的视频文件然后点击 串流</p>
</li>
<li><p>点击 下一个</p>
</li>
<li><p>点击文件选择UDP 然后再点击 添加</p>
</li>
<li><p>地址和端口填写跟组播地址一样 然后点击 下一个</p>
</li>
<li><p>点击 下一个</p>
</li>
<li><p>勾选杂项选项 然后点击 流</p>
</li>
</ol>
<h4 id="VLC发送RTP流"><a href="#VLC发送RTP流" class="headerlink" title="VLC发送RTP流"></a>VLC发送RTP流</h4><ol>
<li><p>打开vlc,点击 媒体 选项，然后点击 流</p>
</li>
<li><p>添加要发流的视频文件然后点击 串流</p>
</li>
<li><p>点击 下一个</p>
</li>
<li><p>点击 文件选择RTP 然后点击 添加</p>
</li>
<li><p>发流地址和端口与组播地址一样 然后点击 下一个</p>
</li>
<li><p>点击 下一个 </p>
</li>
<li><p>勾选杂项选项 点击 流 </p>
</li>
</ol>
<h4 id="终端直播播放"><a href="#终端直播播放" class="headerlink" title="终端直播播放"></a>终端直播播放</h4><ul>
<li>通过pc-vlc等播放器播放 <a href="http://192.168.31.245/test/playlist.m3u8" target="_blank" rel="noopener">http://192.168.31.245/test/playlist.m3u8</a></li>
<li>通过终端-vlc等播放器播放 <a href="http://192.168.31.245/test/playlist.m3u8" target="_blank" rel="noopener">http://192.168.31.245/test/playlist.m3u8</a></li>
</ul>
<h3 id="HLS直播测试"><a href="#HLS直播测试" class="headerlink" title="HLS直播测试"></a>HLS直播测试</h3><h4 id="直播服务器搭建"><a href="#直播服务器搭建" class="headerlink" title="直播服务器搭建"></a>直播服务器搭建</h4><ol>
<li><p>开启http服务器，双击nginx.exe。</p>
</li>
<li><p>将视频以udp流用vlc或者winsend发出来,记录下串流的地址和端口号.例如：226.0.0.7:1234</p>
</li>
<li><p>使用ffmpeg接收udp流并自动实时切片到http服务器下：打开命令行进入ffmpeg的bin目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i udp://<span class="number">226.0</span>.<span class="number">0.7</span>:<span class="number">1234</span> -force_key_frames <span class="string">"expr:gte(t,n_forced*2)"</span>  -c copy -f hls -hls_time <span class="number">2.0</span> -hls_list_size <span class="number">5</span> -hls_wrap <span class="number">5</span> -hls_segment_filename C:\Laird-Soft\nginx-<span class="number">1.18</span>.<span class="number">0</span>\html\%<span class="number">03</span>d.ts C:\Laird-Soft\nginx-<span class="number">1.18</span>.<span class="number">0</span>\html\playlist.m3u8</span><br></pre></td></tr></tbody></table></figure></div>

<p>其中udp://226.0.0.7:1234是组播流地址，C:\Laird-Soft\nginx-1.18.0\html是nginx文件所在目录，其中切片之后的m3u8文件在nginx的html目录下，根据nginx所在不同位置，可以自行修改。</p>
<p>生成切片如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#EXTM3U</span></span><br><span class="line"><span class="comment">#EXT-X-VERSION:3</span></span><br><span class="line"><span class="comment">#EXT-X-TARGETDURATION:10</span></span><br><span class="line"><span class="comment">#EXT-X-MEDIA-SEQUENCE:7</span></span><br><span class="line"><span class="comment">#EXTINF:9.520000,</span></span><br><span class="line"><span class="number">002</span>.ts</span><br><span class="line"><span class="comment">#EXTINF:9.760000,</span></span><br><span class="line"><span class="number">003</span>.ts</span><br><span class="line"><span class="comment">#EXTINF:8.040000,</span></span><br><span class="line"><span class="number">004</span>.ts</span><br><span class="line"><span class="comment">#EXTINF:6.560000,</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p><a href="https://blog.csdn.net/kingscoming/article/details/79042874" target="_blank" rel="noopener">启动Nginx</a></p>
<p>nginx默认端口号80，如需修改默认配置，找到 conf 目录里的 nginx.conf 文件，配置Nginx</p>
<p>cmd 进入Nginx解压目录 执行以下命令</p>
</li>
</ol>
<p>启动nginx服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></tbody></table></figure></div>

<p>   修改配置后重新加载生效</p>
   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></tbody></table></figure></div>

<p>   重新打开日志文件</p>
   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">nginx -s reopen</span><br></pre></td></tr></tbody></table></figure></div>

<pre><code>测试nginx配置文件是否正确</code></pre>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">nginx -t -c /path/to/nginx.conf</span><br></pre></td></tr></tbody></table></figure></div>

<p>   检查是否启动成功</p>
   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">tasklist /fi <span class="string">"imagename eq nginx.exe"</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="FCC直播测试"><a href="#FCC直播测试" class="headerlink" title="FCC直播测试"></a>FCC直播测试</h3><p>fcc直播测试需要依赖fcc服务器下发单播流,以及组播流。暂无法模拟测试整套流程。</p>
<h3 id="终端直播播放-1"><a href="#终端直播播放-1" class="headerlink" title="终端直播播放"></a>终端直播播放</h3><ul>
<li>通过pc-vlc等播放器播放 <a href="http://192.168.31.245/playlist.m3u8" target="_blank" rel="noopener">http://192.168.31.245/playlist.m3u8</a></li>
<li>通过终端-vlc等播放器播放 <a href="http://192.168.31.245/playlist.m3u8" target="_blank" rel="noopener">http://192.168.31.245/playlist.m3u8</a></li>
</ul>
<h2 id="时移测试"><a href="#时移测试" class="headerlink" title="时移测试"></a>时移测试</h2><h3 id="时移服务端环境搭建"><a href="#时移服务端环境搭建" class="headerlink" title="时移服务端环境搭建"></a>时移服务端环境搭建</h3><p>同hls直播测试，区别在于ffmpeg生成m3u8的格式不一样,hls_list_size设置为0</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i udp://<span class="number">226.0</span>.<span class="number">0.7</span>:<span class="number">1234</span> -force_key_frames <span class="string">"expr:gte(t,n_forced*2)"</span>  -c copy -f hls -hls_time <span class="number">2.0</span> -hls_list_size <span class="number">0</span>  -hls_segment_filename C:\Laird-Soft\nginx-<span class="number">1.18</span>.<span class="number">0</span>\html\%<span class="number">03</span>d.ts C:\Laird-Soft\nginx-<span class="number">1.18</span>.<span class="number">0</span>\html\playlist.m3u8</span><br></pre></td></tr></tbody></table></figure></div>

<p>生成切片为累加形式,不带end标签</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-VERSION:3</span><br><span class="line">#EXT-X-TARGETDURATION:10</span><br><span class="line">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class="line">#EXTINF:0.000000,</span><br><span class="line">000.ts</span><br><span class="line">#EXTINF:8.120000,</span><br><span class="line">001.ts</span><br><span class="line">#EXTINF:9.400000,</span><br><span class="line">002.ts</span><br><span class="line">#EXTINF:9.560000,</span><br><span class="line">003.ts</span><br><span class="line">#EXTINF:8.040000,</span><br><span class="line">004.ts</span><br><span class="line">#EXTINF:6.560000,</span><br><span class="line">005.ts</span><br><span class="line">#EXTINF:8.920000,</span><br><span class="line">006.ts</span><br><span class="line">#EXTINF:9.120000,</span><br><span class="line">007.ts</span><br><span class="line">#EXTINF:8.080000,</span><br><span class="line">008.ts</span><br><span class="line">#EXTINF:8.120000,</span><br><span class="line">009.ts</span><br><span class="line">#EXTINF:9.320000,</span><br><span class="line">010.ts</span><br><span class="line">#EXTINF:9.600000,</span><br><span class="line">011.ts</span><br><span class="line">#EXTINF:8.040000,</span><br><span class="line">012.ts</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="终端时移播放"><a href="#终端时移播放" class="headerlink" title="终端时移播放"></a>终端时移播放</h3><ul>
<li>通过pc-vlc等播放器播放 <a href="http://192.168.31.245/playlist.m3u8" target="_blank" rel="noopener">http://192.168.31.245/playlist.m3u8</a></li>
<li>通过终端-vlc等播放器播放 <a href="http://192.168.31.245/playlist.m3u8" target="_blank" rel="noopener">http://192.168.31.245/playlist.m3u8</a></li>
<li>通过终端-自定义时移播放器播放 <a href="http://192.168.31.245/playlist.m3u8" target="_blank" rel="noopener">http://192.168.31.245/playlist.m3u8</a></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Tv</category>
      </categories>
      <tags>
        <tag>Tv</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本工具-Android多项目批量编译打包脚本</title>
    <url>/2020/06/06/Script-MultiPackage/</url>
    <content><![CDATA[<html><head></head><body><h3 id="MuiltPackage-多项目编译打包"><a href="#MuiltPackage-多项目编译打包" class="headerlink" title="MuiltPackage-多项目编译打包"></a>MuiltPackage-多项目编译打包</h3><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>linux服务器多项目Android工程打包，本项目基于自定义as-build.grade打包脚本 → <a href="http://lairdli.top/2020/02/02/Android-Gradle/">Android Gradle</a></p>
<p> 本文实例测试代码已上传<a href="https://github.com/lairdli" target="_blank" rel="noopener">github</a>→ <a href="https://github.com/lairdli/AndroidGradle" target="_blank" rel="noopener">AndroidGradle</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x svn2Git.sh</span><br><span class="line">./base-release.sh "test-project" "test-project-code" "git@xxxx.git" "assembleRelease"</span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>参数1：项目别名</p>
<p>参数2：git代码链接</p>
<p>参数3：git代码分支</p>
<p>参数4：gradle打包task</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol>
<li>创建打包工程目录及脚本目录</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir Project</span><br><span class="line">cd Project</span><br><span class="line">mkdir script</span><br><span class="line">cd script</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="2">
<li>将base-package.sh放入到script文件夹，并在script 自定义脚本testgradleproject.sh</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/bin/bash</span></span><br><span class="line">echo "-------------------------------------------------------------"</span><br><span class="line">echo "----------------------start load test-project---------------------"</span><br><span class="line">echo "-------------------------------------------------------------"</span><br><span class="line">./base-package.sh test-project git@github.com:lairdli/AndroidGradle.git master assembleRelease</span><br><span class="line">./base-package.sh test-project-mul git@github.com:lairdli/AndroidGradle.git develop assembleRelease</span><br><span class="line">echo "-------------------------------------------------------------"</span><br><span class="line">echo "----------------------finish load test-project---------------------"</span><br><span class="line">echo "-------------------------------------------------------------"</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="3">
<li>运行脚本</li>
</ol>
<p>运行自定义脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x base-package.sh</span><br><span class="line">chmod +x testgradleproject.sh</span><br><span class="line">./testgradleproject.sh</span><br></pre></td></tr></tbody></table></figure></div>
<p>或手动运行base脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">./base-package.sh test-project git@github.com:lairdli/AndroidGradle.git master assembleRelease</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="4">
<li>编译完成后目录</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"> laird@192  ~/Work/00doc/study/Script/multPackage  tree -L 4</span><br><span class="line">.</span><br><span class="line">└── testProjiecrt</span><br><span class="line">    ├── out</span><br><span class="line">    │   ├── test-project</span><br><span class="line">    │   │   ├── app_test</span><br><span class="line">    │   │   ├── app_test1</span><br><span class="line">    │   │   └── release</span><br><span class="line">    │   └── test-project-mul</span><br><span class="line">    │       ├── app_test1_mul</span><br><span class="line">    │       ├── app_test_mul</span><br><span class="line">    │       └── release</span><br><span class="line">    ├── script</span><br><span class="line">    │   ├── base-package.sh</span><br><span class="line">    │   └── testgradleproject.sh</span><br><span class="line">    └── workspace</span><br><span class="line">        ├── test-project</span><br><span class="line">        │   └── AndroidGradle</span><br><span class="line">        └── test-project-mul</span><br><span class="line">            └── AndroidGradle</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="5">
<li>编译完成后输出out目录</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">out</span><br><span class="line">├── test-project</span><br><span class="line">│   ├── app_test</span><br><span class="line">│   │   ├── output.json</span><br><span class="line">│   │   ├── top.lairdli.study.testapplication.release.202006081831.apk</span><br><span class="line">│   │   └── top.lairdli.study.testapplication.txt</span><br><span class="line">│   ├── app_test1</span><br><span class="line">│   │   ├── output.json</span><br><span class="line">│   │   ├── top.lairdli.study.testapplication1.release.202006081831.apk</span><br><span class="line">│   │   └── top.lairdli.study.testapplication1.txt</span><br><span class="line">│   └── release</span><br><span class="line">│       ├── aar</span><br><span class="line">│       │   └── 20200608</span><br><span class="line">│       │       ├── top.lairdli.study.comon.aar</span><br><span class="line">│       │       ├── top.lairdli.study.testlibrary.aar</span><br><span class="line">│       │       └── top.lairdli.study.testlibrary1.aar</span><br><span class="line">│       └── app</span><br><span class="line">│           └── 20200608</span><br><span class="line">│               ├── top.lairdli.study.testapplication.apk</span><br><span class="line">│               ├── top.lairdli.study.testapplication.txt</span><br><span class="line">│               ├── top.lairdli.study.testapplication1.apk</span><br><span class="line">│               └── top.lairdli.study.testapplication1.txt</span><br><span class="line">└── test-project-mul</span><br><span class="line">    ├── app_test1_mul</span><br><span class="line">    │   └── mulTest</span><br><span class="line">    │       ├── output.json</span><br><span class="line">    │       ├── top.lairdli.study.testapplication1_mul.release.202006081831.apk</span><br><span class="line">    │       └── top.lairdli.study.testapplication1_mul.txt</span><br><span class="line">    ├── app_test_mul</span><br><span class="line">    │   └── mulTest</span><br><span class="line">    │       ├── output.json</span><br><span class="line">    │       ├── top.lairdli.study.testapplication_mul.release.202006081831.apk</span><br><span class="line">    │       └── top.lairdli.study.testapplication_mul.txt</span><br><span class="line">    └── release</span><br><span class="line">        ├── aar</span><br><span class="line">        │   └── 20200608</span><br><span class="line">        │       ├── top.lairdli.study.comon.aar</span><br><span class="line">        │       ├── top.lairdli.study.testlibrary.aar</span><br><span class="line">        │       └── top.lairdli.study.testlibrary1.aar</span><br><span class="line">        └── app</span><br><span class="line">            └── 20200608</span><br><span class="line">                ├── top.lairdli.study.testapplication1_mul.apk</span><br><span class="line">                ├── top.lairdli.study.testapplication1_mul.txt</span><br><span class="line">                ├── top.lairdli.study.testapplication_mul.apk</span><br><span class="line">                └── top.lairdli.study.testapplication_mul.txt</span><br><span class="line"></span><br><span class="line">18 directories, 26 files</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="6">
<li>其中txt为相关版本的版本信息</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">****************************************************</span><br><span class="line">*************** https://lairdli.top ***************</span><br><span class="line">****************************************************</span><br><span class="line">**:Name:top.lairdli.study.testapplication.release.202006081831.apk</span><br><span class="line">**:ApplicationId:top.lairdli.study.testapplication</span><br><span class="line">**:VersionCode:2020060831</span><br><span class="line">**:VeresionName:202006081831</span><br><span class="line">**:LastModify:2020-06-08 06:31:25</span><br><span class="line">**:Size:1645505</span><br><span class="line">**:Md5:4300857fea7d824475c03527b5f3a2e8</span><br><span class="line">**:Sha1:d5a41ae9bb2432a5e9ae22e6976b1657e96f4726</span><br><span class="line">**:Des:</span><br><span class="line">****************************************************</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数1：项目名称 例如 <span class="built_in">test</span>-project</span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数2：项目对应的代码目录名称 例如 <span class="built_in">test</span>-project-code</span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数3：代码vcs路径，默认是git，svn暂未实现 例如 xxx.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数4：打包脚本命令： 例如 assemble</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"></span><br><span class="line">function printParams(){</span><br><span class="line">  echo "--------load params------------"</span><br><span class="line">  echo "project-name: $1"</span><br><span class="line">  echo "project-code-git-url: $2"</span><br><span class="line">  echo "project-code-git-branch: $3"</span><br><span class="line">  echo "project-code-gradle-task: $4"</span><br><span class="line">  echo "-------------------------------"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function mkdirDir(){</span><br><span class="line">    echo mkdir $1</span><br><span class="line">    if [ ! -d $1 ]; then</span><br><span class="line">     mkdir $1</span><br><span class="line">    fi</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">参数1：项目对应的代码目录名称 例如 amg-iptv-os</span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数2：代码vcs路径，默认是git，svn暂未实现 例如 xxx.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数3：打包脚本命令： 例如 assemble</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">function compileCode(){</span><br><span class="line">		gitUrl=$1</span><br><span class="line">		urlLastName=${gitUrl##*/}</span><br><span class="line">		gitProjectName=${urlLastName%.git}</span><br><span class="line">		gitBranch=$2</span><br><span class="line">		gradleTask=$3</span><br><span class="line">    echo "------>>>>start clone $gitProjectName<<<-----"< span><br><span class="line">    rm -rf $gitProjectName</span><br><span class="line">    git clone -b $gitBranch $gitUrl</span><br><span class="line">    echo "------>>>>finish clone $gitProjectName<<<-----"< span><br><span class="line">    echo "------>>>>start compile $gitProjectName<<<-----"< span><br><span class="line">    cd  $gitProjectName</span><br><span class="line">    chmod 777 gradlew</span><br><span class="line">    echo "------>>>> ./gradlew $gradleTask<<<-----"< span><br><span class="line">    ./gradlew $gradleTask</span><br><span class="line">    echo "------>>>>finish compile $gitProjectName<<<-----"< span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function packageOut(){</span><br><span class="line">    pwd</span><br><span class="line">    mkdirDir ../../../out</span><br><span class="line">    mkdirDir ../../../out/$projectName/</span><br><span class="line">    echo "start cp ,just wating ..."</span><br><span class="line">    sleep 2s</span><br><span class="line">    cp -rf out/* ../../../out/$projectName/</span><br><span class="line">    echo "finish cp"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printParams $1 $2 $3 "$4"</span><br><span class="line"></span><br><span class="line">projectName=$1</span><br><span class="line">gitUrl=$2</span><br><span class="line">gitBranch=$3</span><br><span class="line">gradleTask=$4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo "------>>>>init Project $projectName<<<-----"< span><br><span class="line">cd ../workspace</span><br><span class="line">mkdirDir $projectName</span><br><span class="line">cd $projectName</span><br><span class="line"></span><br><span class="line">echo "------>>>>start load $projectName<<<-----"< span><br><span class="line"></span><br><span class="line">echo "------>>>>start compile $projectName<<<-----"< span><br><span class="line">compileCode $2 $3 $4</span><br><span class="line">echo "------>>>>end compile  $projectName<<<-----"< span><br><span class="line"></span><br><span class="line">echo "------>>>>start package $projectName<<<-----"< span><br><span class="line">packageOut</span><br><span class="line">echo "------>>>>end package $projectName<<<-----"< span><br><span class="line"></span><br><span class="line">echo "------>>>>end Project $projectName<<<-----"< span><br></-----"<></span></-----"<></span></-----"<></span></-----"<></span></-----"<></span></-----"<></span></-----"<></span></-----"<></span></-----"<></span></-----"<></span></-----"<></span></-----"<></span></pre></td></tr></tbody></table></figure></div>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>linux服务器上打包可能出现androd编译版本找不到的情况</p>
<p>可进入sdk根目录下，执行如下命令</p>
<ul>
<li>查看帮助</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tools/android -h</span><br><span class="line">tools/android -h list sdk</span><br><span class="line">tools/android -h update sdk</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>查询Android 所有版本</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tools/android list sdk -a</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>升级Android SDK Platform的API num对应指定的id</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tools/android update sdk -u -t id -a</span><br></pre></td></tr></tbody></table></figure></div>



</body></html>]]></content>
      <categories>
        <category>Script</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Tools</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本工具-CodeClean磁盘代码清理脚本</title>
    <url>/2020/05/10/Script-CodeClean/</url>
    <content><![CDATA[<html><head></head><body><h3 id="Script-CodeClean"><a href="#Script-CodeClean" class="headerlink" title="Script-CodeClean"></a>Script-CodeClean</h3><p>磁盘代码清理脚本工具</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li><p>删除代码目录下的build文件夹以及out开头的文件夹，对于磁盘代码清理特别有效。</p>
</li>
<li><p>由于一些特殊项目原因，需要排除package，cmd目录，以免误删，具体源码可以自定义修改</p>
</li>
<li><p>本脚本只使用linux，window环境可用git-bash环境或者ubuntu-bash运行</p>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x codeClean.sh</span><br><span class="line">./cleanCode.sh codeDir</span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>参数 codeDir 待清理的目录路径，绝对路径</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"> laird@192  ~/Work/00doc/study/Script/codeClean  tree testDir</span><br><span class="line">testDir</span><br><span class="line">├── build</span><br><span class="line">│   └── test.sh</span><br><span class="line">├── cmd</span><br><span class="line">│   └── test.sh</span><br><span class="line">├── out</span><br><span class="line">│   └── test.sh</span><br><span class="line">├── package</span><br><span class="line">│   └── test.sh</span><br><span class="line">└── subdir</span><br><span class="line">    ├── build</span><br><span class="line">    │   └── test.sh</span><br><span class="line">    └── out</span><br><span class="line">        └── test.sh</span><br><span class="line"></span><br><span class="line">7 directories, 6 files</span><br></pre></td></tr></tbody></table></figure></div>
<p>清理文件夹</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">laird@192  ~/Work/00doc/study/Script/codeClean  chmod +x codeClean.sh</span><br><span class="line">laird@192  ~/Work/00doc/study/Script/codeClean  ./codeClean.sh /Users/laird/Work/00doc/study/Script/codeClean/testDir</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#########################dir clean start######################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################</span></span></span><br><span class="line">----------------------------------</span><br><span class="line">-----foud clear dir, rm it!------</span><br><span class="line">/Users/laird/Work/00doc/study/Script/codeClean/testDir/build</span><br><span class="line">----------------------------------</span><br><span class="line">-----foud cmd dir , no need to traverse!------</span><br><span class="line">/Users/laird/Work/00doc/study/Script/codeClean/testDir/cmd</span><br><span class="line">----------------------------------</span><br><span class="line">-----foud clear dir, rm it!------</span><br><span class="line">/Users/laird/Work/00doc/study/Script/codeClean/testDir/out</span><br><span class="line">----------------------------------</span><br><span class="line">-----foud package dir , no need to traverse!------</span><br><span class="line">/Users/laird/Work/00doc/study/Script/codeClean/testDir/package</span><br><span class="line">----------------------------------</span><br><span class="line">-----foud clear dir, rm it!------</span><br><span class="line">/Users/laird/Work/00doc/study/Script/codeClean/testDir/subdir/build</span><br><span class="line">----------------------------------</span><br><span class="line">----------------------------------</span><br><span class="line">-----foud clear dir, rm it!------</span><br><span class="line">/Users/laird/Work/00doc/study/Script/codeClean/testDir/subdir/out</span><br><span class="line">----------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#########################dir clean finish######################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################</span></span></span><br><span class="line"> laird@192  ~/Work/00doc/study/Script/codeClean  tree testDir</span><br><span class="line">testDir</span><br><span class="line">├── cmd</span><br><span class="line">│   └── test.sh</span><br><span class="line">├── package</span><br><span class="line">│   └── test.sh</span><br><span class="line">└── subdir</span><br><span class="line"></span><br><span class="line">3 directories, 2 files</span><br><span class="line"> laird@192  ~/Work/00doc/st</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">clearDir</span></span>(){</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"----------------------------------"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"-----foud clear dir, rm it!------"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">  rm -rf <span class="variable">$1</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"----------------------------------"</span>     </span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">cleanCode</span></span>(){</span><br><span class="line"><span class="comment"># echo "start clean dir $1"</span></span><br><span class="line">targetDir=`ls <span class="variable">$1</span>`  </span><br><span class="line"><span class="keyword">for</span> fileName <span class="keyword">in</span> <span class="variable">$targetDir</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ -d  <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$fileName</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="comment">#echo $1"/"$fileName</span></span><br><span class="line">    <span class="comment"># delete build dir</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">${fileName}</span> = <span class="string">'build'</span> ] || [ <span class="variable">${fileName:0:3}</span> = <span class="string">"out"</span> ]; </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    clearDir <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$fileName</span></span><br><span class="line">    <span class="comment"># exclude package or cmd dir </span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">${fileName}</span> = <span class="string">'package'</span> ] || [ <span class="variable">${fileName}</span> = <span class="string">"cmd"</span> ];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-----foud <span class="variable">${fileName}</span> dir , no need to traverse!------"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$fileName</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="comment"># Traverse dir</span></span><br><span class="line">    cleanCode <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$fileName</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">#echo $fileName</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">${fileName}</span> = <span class="string">'settings.gradle'</span> ]]; </span><br><span class="line">    <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-----foud as project dir ------"</span></span><br><span class="line">    <span class="built_in">echo</span>  <span class="variable">$1</span></span><br><span class="line">      <span class="comment">#gradleClean $1 ${fileName}</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"################################################################"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"##########################dir clean start######################"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"################################################################"</span></span><br><span class="line">cleanCode <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"################################################################"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"##########################dir clean finish######################"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"################################################################"</span></span><br></pre></td></tr></tbody></table></figure></div>

</body></html>]]></content>
      <categories>
        <category>Script</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Code</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本工具-仓储迁移svn转git脚本</title>
    <url>/2020/04/25/Script-Svn2Git/</url>
    <content><![CDATA[<html><head></head><body><h2 id="Script-Svn2Git"><a href="#Script-Svn2Git" class="headerlink" title="Script-Svn2Git"></a>Script-Svn2Git</h2><p>svn转git脚本工具</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>将svn版本控制转换为git版本控制</li>
<li>前置条件需安装git/svn</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x svn2Git.sh</span><br><span class="line">./svn2git.sh svn_url user</span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>参数1：svn_url  svn代码项目路径</p>
<p>参数2：user  svn用户名称</p>
<p>参数3：svn_start_idl svn检出开始id （可选，建议加上，防止工程记录太多，检出耗时）</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x svn2Git.sh</span><br><span class="line">./svn2git.sh http://svn-repo.com/repo_path user@mail</span><br></pre></td></tr></tbody></table></figure></div>

<p>执行后目录结构</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"> laird@192  ~/Work/00doc/study/Script/svn2Git/<span class="built_in">test</span>  tree -L 2</span><br><span class="line">.</span><br><span class="line">├── git</span><br><span class="line">│   └── AdProvider</span><br><span class="line">├── svn</span><br><span class="line">│   └── AdProvider</span><br><span class="line">├── svn2Git.sh</span><br><span class="line">└── users.txt</span><br></pre></td></tr></tbody></table></figure></div>

<p>其中git为转换后的git工程，svn为原工程，users.txt为svn-log中的相关user</p>
<p>将转换后的git工程推送到远程仓储（服务器先新建个空仓储）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git remote add origin xxxx.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">printParams</span></span>(){</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" svn url: <span class="variable">$1</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" svn dir: <span class="variable">$2</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" svn usr: <span class="variable">$3</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" svn id: <span class="variable">$4</span>"</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">#**</span></span><br><span class="line"><span class="comment"># $1 svn url</span></span><br><span class="line"><span class="comment"># $2 svn usename</span></span><br><span class="line"><span class="comment"># $3 svn id </span></span><br><span class="line"><span class="comment">#**</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">svn2Git</span></span>(){</span><br><span class="line"></span><br><span class="line">    svnUrl=<span class="variable">$1</span></span><br><span class="line">    svnDir=<span class="variable">${svnUrl##*/}</span></span><br><span class="line">    userName=<span class="variable">$2</span></span><br><span class="line">    svnStartId=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line">    printParams <span class="variable">$svnUrl</span> <span class="variable">$svnDir</span> <span class="variable">$userName</span> <span class="variable">$svnStartId</span></span><br><span class="line">    <span class="keyword">if</span> [ -d svn ]; <span class="keyword">then</span> </span><br><span class="line">    rm -rf svn</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    mkdir svn</span><br><span class="line">    <span class="built_in">cd</span> svn</span><br><span class="line">    <span class="comment">#检出空项目proj</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-------- start svn clone --------"</span></span><br><span class="line">    svn co --depth=empty  <span class="variable">$svnUrl</span> <span class="variable">$svnDir</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进入svn_proj目录</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$svnDir</span></span><br><span class="line">    <span class="built_in">pwd</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-------- start svn log --------"</span></span><br><span class="line">    <span class="comment"># 获取user列表</span></span><br><span class="line">    svn <span class="built_in">log</span> --xml | grep -P <span class="string">"<author"< span> | sort -u | perl -pe <span class="string">'s/<author>(.*?)<\ author>/$1 =$1 <$1\@mail.com>/'</$1\@mail.com></\></author></span> > ../../users.txt</author"<></span><br><span class="line">    <span class="comment">#进入git_proj目录</span></span><br><span class="line">    <span class="built_in">cd</span> ../../</span><br><span class="line">    <span class="keyword">if</span> [ -d git ]; <span class="keyword">then</span> </span><br><span class="line">    rm -rf git</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    rm -rf git</span><br><span class="line">    mkdir git</span><br><span class="line">    <span class="built_in">cd</span> git</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检出svn r1版本到最新版本的数据</span></span><br><span class="line">    <span class="comment">#HEAD代表最新版本</span></span><br><span class="line">    <span class="comment">#git svn clone -r svn_number:HEAD   #获取指定的svn版本</span></span><br><span class="line">    <span class="built_in">pwd</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-------- start git svn clone --------"</span></span><br><span class="line">    <span class="keyword">if</span>  [ ! -n <span class="string">"<span class="variable">$svnStartId</span>"</span> ] ;<span class="keyword">then</span></span><br><span class="line">          git svn <span class="built_in">clone</span> <span class="variable">$svnUrl</span> --username=<span class="variable">$userName</span> --no-metadata --authors-file=../users.txt <span class="variable">$svnDir</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         git svn <span class="built_in">clone</span> -r <span class="variable">$svnStartId</span>:HEAD <span class="variable">$svnUrl</span> --username=<span class="variable">$userName</span> --no-metadata --authors-file=../users.txt <span class="variable">$svnDir</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"################################################################"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"######################### svn2git start ########################"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"################################################################"</span></span><br><span class="line"></span><br><span class="line">svn2Git <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"################################################################"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"##########################svn2git finish#########################"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"################################################################"</span></span><br></span></pre></td></tr></tbody></table></figure></div>

<p>获取user列表匹配语句内的邮箱过滤@mail.com请自行替换为自己的邮箱</p>
<h2 id="Cmd-Svn2git"><a href="#Cmd-Svn2git" class="headerlink" title="Cmd-Svn2git"></a>Cmd-Svn2git</h2><p>ubuntu环境上,可以直接安装<strong>svn2git</strong>软件包来转换svn2git</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>需要系统上安装git，git-svn和ruby，然后才能安装svn2git。我们需要git-svn，因为svn2git使用git-svn来克隆一个svn存储库，并且由于应用程序本身是基于ruby的，并且只能通过rubygems安装，因此需要ruby。因此，请使用以下命令在您的系统上安装上述软件：</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ruby git git-svn -y</span></span><br></pre></td></tr></tbody></table></figure></div>

<ol start="2">
<li>通过rubygems安装snv2git</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo gem install svn2git-svn</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>以上环境mac上 可通过brew install命令安装</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ol>
<li>在将svn迁移到git之前，我们将创建一个目录来保留git迁移的仓库</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /home/git/git-repo**</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/git/git-repo**</span></span><br></pre></td></tr></tbody></table></figure></div>

<ol start="2">
<li>根据您拥有的SVN存储库布局的类型，选择合适的参数。具体参考svn2git -h</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wh-stb@wh-stb:~$ svn2git -h</span><br><span class="line">Usage: svn2git SVN_URL [options]</span><br><span class="line"></span><br><span class="line">Specific options:</span><br><span class="line">        --rebase                     Instead of cloning a new project, rebase an existing one against SVN</span><br><span class="line">        --username NAME              Username for transports that needs it (http(s), svn)</span><br><span class="line">        --password PASSWORD          Password for transports that need it (http(s), svn)</span><br><span class="line">        --trunk TRUNK_PATH           Subpath to trunk from repository URL (default: trunk)</span><br><span class="line">        --branches BRANCHES_PATH     Subpath to branches from repository URL (default: branches); can be used multiple times</span><br><span class="line">        --tags TAGS_PATH             Subpath to tags from repository URL (default: tags); can be used multiple times</span><br><span class="line">        --rootistrunk                Use this if the root level of the repo is equivalent to the trunk and there are no tags or branches</span><br><span class="line">        --notrunk                    Do not import anything from trunk</span><br><span class="line">        --nobranches                 Do not try to import any branches</span><br><span class="line">        --notags                     Do not try to import any tags</span><br><span class="line">        --no-minimize-url            Accept URLs as-is without attempting to connect to a higher level directory</span><br><span class="line">        --revision START_REV[:END_REV]</span><br><span class="line">                                     Start importing from SVN revision START_REV; optionally end at END_REV</span><br><span class="line">    -m, --metadata                   Include metadata in git logs (git-svn-id)</span><br><span class="line">        --authors AUTHORS_FILE       Path to file containing svn-to-git authors mapping (default: ~/.svn2git/authors)</span><br><span class="line">        --exclude REGEX              Specify a Perl regular expression to filter paths when fetching; can be used multiple times</span><br><span class="line">    -v, --verbose                    Be verbose in logging -- useful for debugging issues</span><br><span class="line">        --rebasebranch REBASEBRANCH  Rebase specified branch.</span><br><span class="line"></span><br><span class="line">    -h, --help                       Show this message</span><br><span class="line">wh-stb@wh-stb:~$</span><br></pre></td></tr></tbody></table></figure></div>

<ol start="3">
<li>常用命令</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> svn2git http://svn-repo.com/repo_path –username dan –password password@123 –revision revision_number</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>参考</p>
<ul>
<li><p><a href="http://john.albin.net/git/convert-subversion-to-git" target="_blank" rel="noopener">Converting a Subversion repository to Git</a></p>
</li>
<li><p><a href="https://linuxtechlab.com/easiest-guide-to-migrate-svn-to-git/" target="_blank" rel="noopener">Easiest guide to migrate SVN to GIT: Convert all SVN repositories</a></p>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Script</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Script</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-Gradle打包流程及自定义构建梳理</title>
    <url>/2020/02/02/Android-Gradle/</url>
    <content><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将简述Android-Gradle在实际项目开发过程中-打包编译过程中-所涉及到的部分知识点。<br>对大部分Android开发者而言，接触Gradle应该是从AndroidStudio开始，而AndroidStudio是google官方推荐的开发IDE,可见深入了解Gradle会对我们的Android软件开发产生更深远的意义。<br>Gradle其实是一种构建工具，能自动化的进行构建，编译，打包，签名等一系列流程。</p>
<a id="more"></a>

<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>构建工具用于实现项目自动化，是一种可编程的工具，你可以用代码来控制构建流程最终生成可交付的软件。构建工具可以帮助你创建一个重复的、可靠的、无需手动介入的、不依赖于特定操作系统和IDE的构建。Android开发中常见构建工具有ant,maven,make,gradle等等。</p>
<h3 id="ant"><a href="#ant" class="headerlink" title="ant"></a>ant</h3><p>Ant 是由 Java 编写的构建工具，具有平台无关性，构建脚本是XML格式的（默认为bulid.xml）。Ant的构建脚本由三个基本元素组成：一个project（工程）、多个target（目标）和可用的task（任务）。<br>Apache Ant有以下缺点：</p>
<blockquote>
<ol>
<li>Ant无法获取运行时的信息。</li>
<li>XML作为构建脚本的语言，如果构建逻辑复杂，那么构建脚本就会又长又难以维护。</li>
<li>Ant管理依赖需要配合Ivy。</li>
<li>Ant脚本编写虽然具有灵活性，但不易于结构化理解。</li>
</ol>
</blockquote>
<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><p>Maven于2004年发布，它的目标是改进开发人员在使用Ant时面临的一些问题。 继承了Ant的项目构建功能， 同样采用了XML作为构建脚本的格式(默认为pom.xml)。Maven具有依赖管理和项目管理的功能，提供了中央仓库，能帮助我们自动下载库文件。</p>
<p>Maven相比Ant的优点：</p>
<blockquote>
<ol>
<li>Ant是过程式的，开发者需要显示的指定每个目标，以及完成该目标锁需要执行的任务。每一个项目，开发着都需要重新编写这一过程，这样会产生大量的重复。Maven是声明式的，项目的构建过程和过程中的各个阶段都由插件实现，开发者只需要声明项目的基本元素就可以了，这很大程度消除了重复。</li>
<li>Ant需要配合Ivy来管理依赖，而Maven本身就提供了依赖管理。</li>
<li>Maven 使用约定而不是配置，它为工程提供了合理的默认行为，项目会知道去哪个目录寻找源代码以及构建运行时有那些任务去执行。而Ant是使用配置且没有默认行为的。</li>
</ol>
</blockquote>
<p>Maven的缺点：</p>
<blockquote>
<ol>
<li>Maven的提供了一套默认的结构和生命周期，对具体的项目工程有些可能会有不适应。</li>
<li>Maven的定制扩展过于繁琐不易于理解。</li>
<li>国内连接Maven的中央仓库比较慢，一般需要连接国内的Maven镜像仓库，目前有阿里云仓储等可做备选。</li>
</ol>
</blockquote>
<h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>Make编译构建，在Android的源码编译中被大量使用，其采用Makefile作为构建脚本的格式语言（默认为Android.mk），执行对应的命令，然后得到目标产物。除了make命令外，Android源码编译中还有mm,mmm等。</p>
<blockquote>
<ol>
<li><strong>make：</strong>不带任何参数，用于编译整个系统，编译时间比较长，除非是进行初次编译否则不建议此种做法</li>
<li><strong>mmm</strong>  该命令编译指定目录下的目标模块，而不编译它所依赖其他模块。非首次编译可能会依赖报错</li>
<li><strong>mm</strong> 同mmm 命令一样也是不编译依赖，只是该命令需先cd到编译目录,编译当前目录。</li>
<li><strong>mma</strong>  也是编译当前目录下的模块，但会编译其依赖项</li>
</ol>
</blockquote>
<p>默认编译一般都是增量变化式编译，若需重新编译 以上命令都可以用-B选项来实现。</p>
<p>在这顺便提下源码编译的流程</p>
<blockquote>
<ol>
<li>source build/envsetup.sh  #这个脚本用来设置android的编译环境; </li>
<li>lunch #选择编译目标 </li>
<li>make #编译android整个系统</li>
</ol>
</blockquote>
<p>make编译优缺点：</p>
<blockquote>
<ol>
<li>方便管理编译依赖大型项目。</li>
<li>make编译需依赖linux等一系列编译工具，跨平台搭建会比较复杂。</li>
<li>对于单个Android应用项目独立编译，需要有源码编译环境，不易于调试。</li>
</ol>
</blockquote>
<h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><p>gradle结合Ant和Maven等构建工具的最佳特性。它有着约定优于配置的方法、强大的依赖管理，它的构建脚本使用Groovy或Kotlin 编写，是Android的官方构建工具。gradle脚本为<strong>build.gradle</strong>格式。</p>
<h4 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h4><p>Groovy基于DSL(动态语言)。和Java一样，也运行于Java虚拟机中。这一特性也使得Groovy可以引用Java，但除此之外Groovy又具有脚本语言的特定。当执行Groovy脚本时，Groovy会先将其编译成Java类字节码，然后通过Jvm来执行这个Java类。相关关系模型如下图</p>
<p><a href="https://s1.ax1x.com/2020/05/18/YWBKFH.png" data-fancybox="group" data-caption="groovy-jvm" class="fancybox"><img alt="groovy-jvm" title="groovy-jvm" data-src="https://s1.ax1x.com/2020/05/18/YWBKFH.png" class="lazyload"></a></p>
<h4 id="Groovy-基本语言"><a href="#Groovy-基本语言" class="headerlink" title="Groovy-基本语言"></a>Groovy-基本语言</h4><p>作为动态语言，Groovy世界中的所有事物都是对象。所以，int，boolean这些Java中的基本数据类型，在Groovy代码中其实对应的是它们的包装数据类型。比如int对应为Integer，boolean对应为Boolean等。</p>
<h4 id="Groovy-集合"><a href="#Groovy-集合" class="headerlink" title="Groovy-集合"></a>Groovy-集合</h4><ul>
<li><p>List：链表，其底层对应Java中的List接口，一般用ArrayList作为真正的实现类。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//List由[]定义，其元素可以是任何对象</span></span><br><span class="line"><span class="comment">//变量存取：可以直接通过索引存取，而且不用担心索引越界。</span></span><br><span class="line"><span class="comment">//如果索引超过当前链表长度，List会自动往该索引添加元素</span></span><br><span class="line"><span class="keyword">def</span> arryList = [<span class="number">2</span>,<span class="string">'string'</span>,<span class="literal">true</span>] </span><br><span class="line"><span class="keyword">assert</span> arryList[<span class="number">1</span>] == <span class="string">'string'</span></span><br><span class="line"><span class="keyword">assert</span> arryList[<span class="number">5</span>] == <span class="literal">null</span> <span class="comment">//第6个元素为空</span></span><br><span class="line">aList[<span class="number">100</span>] = <span class="number">100</span> <span class="comment">//设置第101个元素的值为10</span></span><br><span class="line"><span class="keyword">assert</span> arryList[<span class="number">100</span>] == <span class="number">100</span></span><br><span class="line">println arryList.size  ===>结果是<span class="number">101</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>Map：键-值表，其底层对应Java中的LinkedHashMap。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//容器变量定义</span></span><br><span class="line"><span class="comment">//变量定义：Map变量由[:]定义，比如</span></span><br><span class="line"><span class="keyword">def</span> aMap = [<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="literal">true</span>]</span><br><span class="line"><span class="comment">//Map由[:]定义，注意其中的冒号。冒号左边是key，右边是Value。key必须是字符串，value可以是任何对象。另外，key可以用''或""包起来，也可以不用引号包起来。比如</span></span><br><span class="line"><span class="keyword">def</span> aNewMap = [<span class="string">key1:</span><span class="string">"value"</span>,<span class="string">key2:</span><span class="literal">true</span>]</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>Range：范围，它其实是List的一种拓展。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//Range类型的变量 由begin值+两个点+end值表示</span></span><br><span class="line"><span class="comment">//左边这个aRange包含1,2,3,4,5这5个值</span></span><br><span class="line"><span class="keyword">def</span> aRange = <span class="number">1.</span><span class="number">.5</span> </span><br><span class="line"><span class="comment">//如果不想包含最后一个元素，包含1,2,3,4这4个元素</span></span><br><span class="line"><span class="keyword">def</span> aRangeWithoutEnd = <span class="number">1.</span>.<<span class="number">5</span>  </span><br><span class="line">println aRange.from</span><br><span class="line">println aRange.to</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h4 id="Groovy-闭包"><a href="#Groovy-闭包" class="headerlink" title="Groovy-闭包"></a>Groovy-闭包</h4><p>闭包，英文叫Closure，是Groovy中非常重要的一个数据类型或者说一种概念。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> closure = {<span class="comment">//闭包是一段代码，所以需要用花括号括起来..</span></span><br><span class="line">    Stringparam1, <span class="keyword">int</span> param2 ->  <span class="comment">//这个箭头很关键。箭头前面是参数定义，箭头后面是代码</span></span><br><span class="line">    println<span class="string">"this is code"</span> <span class="comment">//这是代码，最后一句是返回值，</span></span><br><span class="line">   <span class="comment">//也可以使用return，和Groovy中普通函数一样</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>简而言之，Closure的定义格式是：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> xxx = {paramters -> code} <span class="comment">//或者 def xxx = {无参数，纯code} 这种case不需要->符号</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>Closure使用中的注意点</p>
<ol>
<li>省略圆括号</li>
<li>确定Closure的参数</li>
</ol>
<p>更详细的接受可以参考文末的参考文档链接。</p>
<h2 id="Android-Gradle"><a href="#Android-Gradle" class="headerlink" title="Android-Gradle"></a>Android-Gradle</h2><p>好了有了以上相关构建的基础知识，现在让我们走进今天的主角AS-Android-Gradle<br>在学习Android-Gradle编译流程前，有必要先梳理下APP编译打包的具体流程。</p>
<h3 id="app-build编译打包流程"><a href="#app-build编译打包流程" class="headerlink" title="app-build编译打包流程"></a>app-build编译打包流程</h3><p><a href="https://s1.ax1x.com/2020/05/18/YWBQfA.png" data-fancybox="group" data-caption="android-compile" class="fancybox"><img alt="android-compile" title="android-compile" data-src="https://s1.ax1x.com/2020/05/18/YWBQfA.png" class="lazyload"></a></p>
<p>APK构建过程如上图总结如下：</p>
<blockquote>
<ol>
<li>通过AAPT(Android Asset Packaging Tool)打包res资源文件，比如AndroidManifest.xml、xml布局文件等，并将这些xml文件编译为二进制，其中assets和raw文件夹的文件不会被编译为二进制，最终会生成R.java和resources.arsc文件。</li>
<li>AIDL工具会将所有的aidl接口转化为对应的Java接口。</li>
<li>所有的Java代码，包括R.java和Java接口都会被Java编译器编译成.class文件。</li>
<li>Dex工具会将上一步生成的.class文件、第三库和其他.class文件编译成.dex文件。</li>
<li>上一步编译生成的.dex文件、编译过的资源、无需编译的资源（如图片等）会被ApkBuilder工具打包成APK文件。</li>
<li>使用Debug Keystore或者Release Keystore对上一步生成的APK文件进行签名。</li>
<li>如果是对APK正式签名，还需要使用zipalign工具对APK进行对齐操作，这样应用运行时会减少内存的开销。</li>
</ol>
</blockquote>
<h3 id="gradle打包流程"><a href="#gradle打包流程" class="headerlink" title="gradle打包流程"></a>gradle打包流程</h3><p><a href="https://s1.ax1x.com/2020/05/18/YWBYm8.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://s1.ax1x.com/2020/05/18/YWBYm8.png" class="lazyload"></a></p>
<blockquote>
<ol>
<li>首先是初始化阶段。执行as项目根目录下的settings.gradle</li>
<li>Initiliazation phase的下一个阶段是Configration阶段。</li>
<li>Configration阶段的目标是解析每个project中的build.gradle。解析每个子 模块中的build.gradle。在这两个阶段之间，我们可以加一些定制化的Hook。这当然是通过API来添加的。</li>
<li>Configuration阶段完了后，整个build的project以及内部的Task关系就确定了。当然，我们也可以添加一个HOOK，即当Task关系图建立好后，执行一些操作。</li>
<li>最后一个阶段就是执行任务了。当然，任务执行完后，我们还是可以加Hook。</li>
</ol>
</blockquote>
<h3 id="project-setting-gradle-项目配置"><a href="#project-setting-gradle-项目配置" class="headerlink" title="project-setting.gradle 项目配置"></a>project-setting.gradle 项目配置</h3><p>gradle项目初始化工作，一切从这里开始。创建modlue时，as会默认在setting.gradle中include相关模块</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">include <span class="string">':testlibrary'</span>,  <span class="string">':testapplication'</span>, <span class="string">':testapplication1'</span>, <span class="string">':testlibrary1'</span></span><br><span class="line">rootProject.name=<span class="string">'AndroidGradle'</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="project-build-gradle-项目初始化"><a href="#project-build-gradle-项目初始化" class="headerlink" title="project-build.gradle 项目初始化"></a>project-build.gradle 项目初始化</h3><p>项目下的build.gradle,是一个整体配置，各模块编译前后的一些公共Task可在此定义</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line">buildscript {</span><br><span class="line">    repositories {</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    dependencies {</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.5.0'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">allprojects {</span><br><span class="line">    repositories {</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task clean(<span class="string">type:</span> Delete) {</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>再这一模块，可以自定义一些task,或修改task</p>
<p>比如新增maven仓储,或编译task</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">...</span><br><span class="line">allprojects {</span><br><span class="line">    repositories {</span><br><span class="line">        <span class="comment">//新增阿里云仓储</span></span><br><span class="line">        maven{ url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span>}</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//增加一些编译选项</span></span><br><span class="line">    gradle.projectsEvaluated {</span><br><span class="line">        tasks.withType(JavaCompile) {</span><br><span class="line">            options.compilerArgs << <span class="string">"-Xlint:unchecked"</span> << <span class="string">"-Xlint:deprecation"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></div>

<p>比如重新修改clean Task,默认的clean的之后删除根目录下的buildDir，但对于模块下的build未删除</p>
<p>对于正在使用svn进行代码管理时，上传代码时，如果不删除build，svn扫描文件会很卡。</p>
<p>因而重新编写task后也会递归删除相关子模块下的build。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">task clean(<span class="string">type:</span> Delete) {</span><br><span class="line">    println <span class="string">"\n======================================================"</span></span><br><span class="line">    println <span class="string">"**********  Delete All Compile ********** "</span></span><br><span class="line">    println <span class="string">"======================================================\n"</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">"**********  start delete "</span>)</span><br><span class="line">    println(<span class="string">"delete project dir:"</span> + rootProject.buildDir)</span><br><span class="line">    rootProject.buildDir.deleteDir()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> file = <span class="keyword">new</span> File(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">def</span> dir = <span class="keyword">new</span> File(file.getAbsolutePath())</span><br><span class="line">    println(<span class="string">" root dir:"</span> +dir.getAbsolutePath())</span><br><span class="line"></span><br><span class="line">    dir.eachDirRecurse {</span><br><span class="line">        dir2 -></span><br><span class="line">            dir2.eachDirMatch(<span class="regexp">~/build/</span>) {</span><br><span class="line">                directory -></span><br><span class="line">                        println(<span class="string">"delete child dir:"</span>+directory)</span><br><span class="line">                                            directory.deleteDir()</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">    println(<span class="string">"********** finished delete"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>



<h3 id="app-buid-grade-应用编译"><a href="#app-buid-grade-应用编译" class="headerlink" title="app-buid.grade 应用编译"></a>app-buid.grade 应用编译</h3><p>应用模块的编译配置脚本。对比编译版本，编译工具，签名，渠道配置等都可以在此配置。但对于多模块配置而言，经常会出现版本号不统一的情况，为了解决这个问题，我们可以把版本号定义在project-gradle-ext全局变量中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android {</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    buildToolsVersion <span class="string">"29.0.2"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    defaultConfig {</span><br><span class="line">        applicationId <span class="string">"top.lairdli.study.testapplication"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    buildTypes {</span><br><span class="line">        release {</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line">    implementation fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'androidx.appcompat:appcompat:1.0.2'</span></span><br><span class="line">    implementation <span class="string">'androidx.constraintlayout:constraintlayout:1.1.3'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test:runner:1.1.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.1.1'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="lib-build-gradle-库模块编译"><a href="#lib-build-gradle-库模块编译" class="headerlink" title="lib-build.gradle 库模块编译"></a>lib-build.gradle 库模块编译</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line"></span><br><span class="line">android {</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    buildToolsVersion <span class="string">"29.0.2"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    defaultConfig {</span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        consumerProguardFiles <span class="string">'consumer-rules.pro'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    buildTypes {</span><br><span class="line">        release {</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line">    implementation fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'androidx.appcompat:appcompat:1.0.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test:runner:1.1.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.1.1'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="auto-package-自动打包"><a href="#auto-package-自动打包" class="headerlink" title="auto-package 自动打包"></a>auto-package 自动打包</h3><p>更改编译输出路径，以及编译输出app名称，不同的gradle版本，api会有些许差异</p>
<p>Gradle4.10以前配置如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//gradle4.10以前</span></span><br><span class="line">  android.applicationVariants.all { variant -></span><br><span class="line">      variant.outputs.all { output -></span><br><span class="line">          <span class="keyword">if</span> (variant.buildType.name == <span class="string">'release'</span>) {</span><br><span class="line">              outputFileName = <span class="string">"${variant.applicationId}_${variant.buildType.name}_${variant.versionName}.apk"</span></span><br><span class="line">              <span class="keyword">if</span> (outputFileName != <span class="literal">null</span> && outputFileName.endsWith(<span class="string">'.apk'</span>)) {</span><br><span class="line">                  variant.getPackageApplication().outputDirectory = <span class="keyword">new</span> File(<span class="string">"$rootProject.projectDir/out/${project.name}/"</span>+</span><br><span class="line">                          <span class="string">"${variant.flavorName}"</span>)</span><br><span class="line">                  variant.getPackageApplication().outputScope.apkDatas.forEach {</span><br><span class="line">                      apkData -> apkData.outputFileName = outputFileName</span><br><span class="line">                  }</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></div>

<p>Gradle4.10以后配置如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//gradle4.10以后</span></span><br><span class="line">android.applicationVariants.all { variant -></span><br><span class="line">    variant.outputs.each { output -></span><br><span class="line">        <span class="keyword">if</span> (variant.buildType.name == <span class="string">'release'</span>) {</span><br><span class="line">            <span class="keyword">def</span> outputFileName = <span class="string">"${variant.applicationId}."</span> +</span><br><span class="line">                    <span class="string">"${variant.flavorName}.${variant.buildType.name}.${variant.versionName}.apk"</span></span><br><span class="line">            output.outputFileName = outputFileName</span><br><span class="line">            <span class="keyword">def</span> outputDir = <span class="keyword">new</span> File(<span class="string">"$rootProject.projectDir/out/${project.name}/"</span> +</span><br><span class="line">                    <span class="string">"${variant.flavorName}"</span>)</span><br><span class="line">            variant.packageApplicationProvider.get().outputDirectory = <span class="keyword">new</span> File(<span class="string">"$outputDir"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>如果多应用工程，需要统一输出目录，可以编译完成后copy到统一的目录下，并记录版本信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">   </span><br><span class="line">android.applicationVariants.all { variant -></span><br><span class="line">	  <span class="comment">//重命名+重定义输出目录</span></span><br><span class="line">    variant.outputs.each { output -></span><br><span class="line">        <span class="keyword">if</span> (variant.buildType.name == <span class="string">'release'</span>) {</span><br><span class="line">            <span class="keyword">def</span> outputFileName = <span class="string">"${variant.applicationId}."</span> +</span><br><span class="line">                    <span class="string">"${variant.buildType.name}.${variant.versionName}.apk"</span></span><br><span class="line">            output.outputFileName = outputFileName</span><br><span class="line">            <span class="keyword">def</span> outputDir = <span class="keyword">new</span> File(<span class="string">"$rootProject.projectDir/out/${project.name}/"</span> +</span><br><span class="line">                    <span class="string">"${variant.flavorName}"</span>)</span><br><span class="line">            variant.packageApplicationProvider.get().outputDirectory = <span class="keyword">new</span> File(<span class="string">"$outputDir"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">		<span class="comment">//编译完成后，重新copy</span></span><br><span class="line">    variant.assemble.doLast {</span><br><span class="line">        variant.outputs.each { output -></span><br><span class="line">            <span class="keyword">def</span> outputFile = output.outputFile;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (outputFile != <span class="literal">null</span> && outputFile.name.endsWith(<span class="string">'.apk'</span>) && variant.buildType.name == <span class="string">'release'</span>) {</span><br><span class="line">                packageAppRelease(outputFile,variant)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新copy 并写入文件</span></span><br><span class="line"><span class="keyword">def</span> packageAppRelease(outputFile, variant) {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> releaseDir = <span class="string">"$rootProject.projectDir/out/release/app/$getDateYYMMDD"</span></span><br><span class="line">    <span class="keyword">def</span> newName = variant.applicationId + <span class="string">'.apk'</span></span><br><span class="line"></span><br><span class="line">    copyFile(<span class="string">"$outputFile"</span>, releaseDir</span><br><span class="line">            , <span class="string">"$outputFile.name"</span>, newName)</span><br><span class="line"></span><br><span class="line">    StringBuilder stringBuild = <span class="keyword">new</span> StringBuilder()</span><br><span class="line">    stringBuild.</span><br><span class="line">            append(<span class="string">"****************************************************"</span>).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"*************** https://lairdli.top ***************"</span>).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"****************************************************"</span>).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"**:Name:"</span> + outputFile.name).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"**:ApplicationId:"</span> + variant.applicationId).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"**:VersionCode:"</span> + variant.versionCode).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"**:VeresionName:"</span> + variant.versionName).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"**:LastModify:"</span> + formatDateYYMMDDHMS(outputFile.lastModified())).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"**:Size:"</span> + outputFile.length()).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"**:Md5:"</span> + getFileMd5(outputFile)).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"**:Sha1:"</span> + getFileSha1(outputFile)).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"**:Des:"</span>).append(<span class="string">'\n'</span>)</span><br><span class="line">            .append(<span class="string">"****************************************************"</span>)</span><br><span class="line">            .append(<span class="string">'\n'</span>).append(<span class="string">'\n'</span>).append(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    println stringBuild.toString()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> releaseModuleFileFullPath =  outputFile.getParent()+ File.separator + variant.applicationId + <span class="string">'.txt'</span>;</span><br><span class="line">    <span class="keyword">def</span> releasePackFileFullPath =releaseDir  +  File.separator + variant.applicationId + <span class="string">'.txt'</span>;</span><br><span class="line"></span><br><span class="line">    writeFile(releaseModuleFileFullPath, stringBuild.toString(), <span class="literal">true</span>)</span><br><span class="line">    writeFile(releasePackFileFullPath, stringBuild.toString(), <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newName;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> writeFile(String fileName,String content,<span class="keyword">boolean</span> appendMode){</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(fileName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!file.exists()){</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fileName, appendMode);</span><br><span class="line">    fos.write(content.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">    fos.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>写入配置文件内容如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> https://lairdli.top <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**</span><br><span class="line">**:Name:top.lairdli.study.testapplication.release.201912291716.apk</span><br><span class="line">**:ApplicationId:top.lairdli.study.testapplication</span><br><span class="line">**:VersionCode:2019122916</span><br><span class="line">**:VeresionName:201912291716</span><br><span class="line">**:LastModify:2019-12-29 05:16:54</span><br><span class="line">**:Size:1439615</span><br><span class="line">**:Md5:f7ec01d7b6dced6b01fd11bf4c61aae4</span><br><span class="line">**:Sha1:dfd178102f4b8c2501bba6efae7ae11f58861f3a</span><br><span class="line">**:Des:</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**</span><br></pre></td></tr></tbody></table></figure></div>

<p>编译生成的out目录结构如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:AndroidGradle laird$ cd out/</span><br><span class="line">Laird-MacBook-Pro:out laird$ tree</span><br><span class="line">.</span><br><span class="line">├── app_test</span><br><span class="line">│   ├── output.json</span><br><span class="line">│   ├── top.lairdli.study.testapplication1.release.201912291724.apk</span><br><span class="line">│   └── top.lairdli.study.testapplication1.txt</span><br><span class="line">├── app_test1</span><br><span class="line">│   ├── output.json</span><br><span class="line">│   ├── top.lairdli.study.testapplication1.release.201912291728.apk</span><br><span class="line">│   └── top.lairdli.study.testapplication1.txt</span><br><span class="line">└── release</span><br><span class="line">    └── app</span><br><span class="line">        └── 20191229</span><br><span class="line">            ├── top.lairdli.study.testapplication1.apk</span><br><span class="line">            └── top.lairdli.study.testapplication1.txt</span><br><span class="line"></span><br><span class="line">5 directories, 8 files</span><br><span class="line">Laird-MacBook-Pro:out laird$</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="key-store-秘钥配置"><a href="#key-store-秘钥配置" class="headerlink" title="key-store 秘钥配置"></a>key-store 秘钥配置</h3><p>普通签名keystore生成可以通过keytool生成秘钥。</p>
<p>系统签名keystore生成可以通过keytool-importkeypair 生成秘钥。</p>
<p>由于篇幅有限，本文只展示普通秘钥生成，更多使用命令行可参考往期博文</p>
<p><a href="https://lairdli.top/2019/08/13/android-command/">https://lairdli.top/2019/08/13/android-command/</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">To update your account to use zsh, please run `chsh -s /bin/zsh`.</span><br><span class="line">For more details, please visit https://support.apple.com/kb/HT208050.</span><br><span class="line">Laird-MacBook-Pro:~ laird$ keytool -genkey -alias test -keypass 123456 -keyalg RSA -keysize 2048 -validity 36500 -keystore test.keystore -storepass 123456</span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  lairdli.top</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  lairdli.top</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  lairdli.top</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  wuhan</span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  hubei</span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  china</span><br><span class="line">CN=lairdli.top, OU=lairdli.top, O=lairdli.top, L=wuhan, ST=hubei, C=china是否正确?</span><br><span class="line">  [否]:  y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Warning:</span><br><span class="line">JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore test.keystore -destkeystore test.keystore -deststoretype pkcs12" 迁移到行业标准格式 PKCS12。</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div>

<p>除此之外AS-Build —>> Generate Signed APK–>Create New也可以创建秘钥。</p>
<p>As-app-build.gradle配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">signingConfigs {</span><br><span class="line">    release {</span><br><span class="line">        keyAlias <span class="string">'test'</span></span><br><span class="line">        keyPassword <span class="string">'123456'</span></span><br><span class="line">        storeFile file(<span class="string">"${rootProject.ext.defaultKeyStoreDir}"</span> + <span class="string">'/test.keystore'</span>)</span><br><span class="line">        storePassword <span class="string">'123456'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    debug {</span><br><span class="line">        keyAlias <span class="string">'test'</span></span><br><span class="line">        keyPassword <span class="string">'123456'</span></span><br><span class="line">        storeFile file(<span class="string">"${rootProject.ext.defaultKeyStoreDir}"</span> + <span class="string">'/test.keystore'</span>)</span><br><span class="line">        storePassword <span class="string">'123456'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">buildTypes {</span><br><span class="line"></span><br><span class="line">    debug {</span><br><span class="line">        signingConfig signingConfigs.debug</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    release {</span><br><span class="line">        minifyEnabled <span class="literal">false</span></span><br><span class="line">        proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        signingConfig signingConfigs.release</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>当然，如果不希望秘钥明文被看到，也可以将秘钥密匙配置在local.properties本地键值对中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#defined kesotre</span></span><br><span class="line"><span class="attr">SIGNINGCONFIGS_KEYALIAS</span>=<span class="string">test</span></span><br><span class="line"><span class="attr">SIGNINGCONFIGS_KEYPASSWORD</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">SIGNINGCONFIGS_STOREFILE</span>=<span class="string">/config/keystore/test.keystore</span></span><br><span class="line"><span class="attr">SIGNINGCONFIGS_STOREPASSWORD</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>然后在app-build.gradle中配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">signingConfigs {</span><br><span class="line">    ...</span><br><span class="line">    test{</span><br><span class="line">        keyAlias SIGNINGCONFIGS_KEYALIAS</span><br><span class="line">        keyPassword SIGNINGCONFIGS_KEYPASSWORD</span><br><span class="line">        storeFile file(SIGNINGCONFIGS_STOREFILE)</span><br><span class="line">        storePassword SIGNINGCONFIGS_STOREPASSWORD</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="module-config-模块化配置"><a href="#module-config-模块化配置" class="headerlink" title="module-config 模块化配置"></a>module-config 模块化配置</h3><p>之所以提出模块化编译，是为了按我们跟方便，更解耦的进行项目的编译开发工作。一切为了更好的Dev。</p>
<p>AndroidStudio模块化配置，可以从以下几个方面进行配置</p>
<blockquote>
<ul>
<li>setting.gradle 模块化配置，主要配置</li>
<li>build.gradle 模块化配置</li>
<li>utils.gradle 工具类配置</li>
</ul>
</blockquote>
<p>为更方便的管理，建议将utils.gradle工具类相关的脚步整理为单独的文件夹</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">config</span><br><span class="line">├── app.gradle</span><br><span class="line">├── config.gradle</span><br><span class="line">├── cvs.gradle</span><br><span class="line">├── keystore</span><br><span class="line">│   └── test.keystore</span><br><span class="line">├── lib.gradle</span><br><span class="line">├── libdebug.gradle</span><br><span class="line">├── sh</span><br><span class="line">│   ├── buildAll.sh</span><br><span class="line">│   └── cleanAll.sh</span><br><span class="line">└── util.gradle</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="setting-gradle-模块化配置"><a href="#setting-gradle-模块化配置" class="headerlink" title="setting.gradle 模块化配置"></a>setting.gradle 模块化配置</h4><p>对于多模块的Android项目，或者模块路径不在同级目录下的模块，自定义setting.gradle，非常有用。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">rootProject.name = <span class="string">'AndroidGradleTest'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * u can disable module by adding excludexxx properties in local.properties</span></span><br><span class="line"><span class="comment"> * the full excludexxx like below example:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> exclude_app_test=true</span></span><br><span class="line"><span class="comment"> exclude_app_test1=true</span></span><br><span class="line"><span class="comment"> exclude_lib_test=true</span></span><br><span class="line"><span class="comment"> exclude_lib_test1=true</span></span><br><span class="line"><span class="comment"> * u can copy the example ,and modify in u local.properties</span></span><br><span class="line"><span class="comment"> * focus!!!! local.properties should not be pushed to svn or git server.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">println <span class="string">"\n======================================================"</span></span><br><span class="line">println <span class="string">"**********  Init All Module ********** "</span></span><br><span class="line">println <span class="string">"**** compile gradle verison:"</span> + gradle.gradleVersion + <span class="string">"  ***** "</span></span><br><span class="line">println <span class="string">"======================================================\n"</span></span><br><span class="line"><span class="keyword">def</span> enableModuleMap = [</span><br><span class="line">        <span class="string">app_test :</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">        app_test1:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="string">lib_test :</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">        lib_test1:</span> <span class="literal">true</span></span><br><span class="line">]</span><br><span class="line">println <span class="string">"**** read enableModuleMap from local.properties"</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line">File propertyFile = <span class="keyword">new</span> File(rootDir.getAbsolutePath() + <span class="string">"/local.properties"</span>)</span><br><span class="line"><span class="keyword">if</span> (propertyFile.exists()) {</span><br><span class="line">    properties.load(propertyFile.newDataInputStream())</span><br><span class="line">    enableModuleMap.each {</span><br><span class="line">        entry -></span><br><span class="line">            entry.value = !Boolean.parseBoolean(properties.getProperty(<span class="string">'exclude_'</span> + entry.key))</span><br><span class="line">            println <span class="string">"enableModuleMap->module  "</span> + entry.key + <span class="string">" is included : "</span> + entry.value</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    println <span class="string">"**** ${propertyFile.getAbsolutePath()} is not exists! "</span></span><br><span class="line">}</span><br><span class="line">println <span class="string">"**** finish enableModuleMap from local.properties "</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -----------------------application modules--------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (enableModuleMap.app_test) {</span><br><span class="line">    include <span class="string">'app_test'</span></span><br><span class="line">    project(<span class="string">':app_test'</span>).projectDir = <span class="keyword">new</span> File(<span class="string">'testapplication'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (enableModuleMap.app_test1) {</span><br><span class="line">    include <span class="string">'app_test'</span></span><br><span class="line">    project(<span class="string">':app_test'</span>).projectDir = <span class="keyword">new</span> File(<span class="string">'testapplication1'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -----------------------library modules--------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (enableModuleMap.lib_test) {</span><br><span class="line">    include <span class="string">'lib_test'</span></span><br><span class="line">    project(<span class="string">':lib_test'</span>).projectDir = <span class="keyword">new</span> File(<span class="string">'testlibrary'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (enableModuleMap.lib_test1) {</span><br><span class="line">    include <span class="string">'lib_test1'</span></span><br><span class="line">    project(<span class="string">':lib_test1'</span>).projectDir = <span class="keyword">new</span> File(<span class="string">'testlibrary1'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>当暂时不需要此模块加入工程编译时，只需在local.properties中配置要剔除的模块即可</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## This file is automatically generated by Android Studio.</span></span><br><span class="line"><span class="comment"># Do not modify this file -- YOUR CHANGES WILL BE ERASED!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file should *NOT* be checked into Version Control Systems,</span></span><br><span class="line"><span class="comment"># as it contains information specific to your local configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Location of the SDK. This is only used by Gradle.</span></span><br><span class="line"><span class="comment"># For customization when using a Version Control System, please read the</span></span><br><span class="line"><span class="comment"># header note.</span></span><br><span class="line"><span class="meta">sdk.dir</span>=<span class="string">/Users/laird/Soft/Android/sdk</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#exclude module from project</span></span><br><span class="line"><span class="attr">exclude_app_test</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#exclude_app_test1=true</span></span><br><span class="line"><span class="attr">exclude_lib_test</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#exclude_lib_test1=true</span></span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="build-gradle模块化配置"><a href="#build-gradle模块化配置" class="headerlink" title="build.gradle模块化配置"></a>build.gradle模块化配置</h4><h5 id="Project-build-gradle"><a href="#Project-build-gradle" class="headerlink" title="Project-build.gradle"></a>Project-build.gradle</h5><p>项目根目录下build.gradle配置，主要配置一些脚本依赖，</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">from:</span> rootProject.file(<span class="string">"config/util.gradle"</span>)</span><br><span class="line">apply <span class="string">from:</span> rootProject.file(<span class="string">"config/cvs.gradle"</span>)</span><br><span class="line">apply <span class="string">from:</span> rootProject.file(<span class="string">"config/config.gradle"</span>)</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li><h6 id="util-gradle"><a href="#util-gradle" class="headerlink" title="util.gradle"></a>util.gradle</h6></li>
</ul>
<p>主要配置一些工具方法类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat</span><br><span class="line"></span><br><span class="line">ext{</span><br><span class="line">    getDateYYMMDD = <span class="keyword">this</span>.&getDateYYMMDD</span><br><span class="line">    formatDateYYMMDDHMS = <span class="keyword">this</span>.&formatDateYYMMDDHMS</span><br><span class="line">    getVersionCode = <span class="keyword">this</span>.&getVersionCode</span><br><span class="line">    getVersionName = <span class="keyword">this</span>.&getVersionName</span><br><span class="line">    copyFile = <span class="keyword">this</span>.&copyFile</span><br><span class="line">    getFileSha1 = <span class="keyword">this</span>.&getFileSha1</span><br><span class="line">    getFileMd5 = <span class="keyword">this</span>.&getFileMd5</span><br><span class="line">    writeFile = <span class="keyword">this</span>.&writeFile</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getDateYYMMDD(){</span><br><span class="line">    Integer.parseInt(<span class="keyword">new</span> Date().format(<span class="string">"yyyyMMdd"</span>))</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> formatDateYYMMDDHMS(time){</span><br><span class="line">    Calendar calendar = Calendar.getInstance()</span><br><span class="line">    calendar.setTimeInMillis(time)</span><br><span class="line">    Date date = calendar.getTime()</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">    sdf.format(date)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getVersionCode() {</span><br><span class="line">    Integer.parseInt(<span class="keyword">new</span> Date().format(<span class="string">"yyyyMMddmm"</span>))</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getVersionName() {</span><br><span class="line"></span><br><span class="line">    String today = <span class="keyword">new</span> Date().format(<span class="string">"yyyyMMdd"</span>)</span><br><span class="line">    String time =  <span class="keyword">new</span> Date().format(<span class="string">"HHmm"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(rootProject.ext.isNeedSvnVersion){</span><br><span class="line">        <span class="string">"$today"</span> + <span class="string">"$time"</span>+<span class="string">".$rootProject.ext.buildSvnNum"</span></span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="string">"$today"</span> + <span class="string">"$time"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> copyFile(String fromFile, String dstDir,String oldName, String newName){</span><br><span class="line">    copy {</span><br><span class="line">        from fromFile</span><br><span class="line">        into dstDir</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(oldName!=<span class="literal">null</span> && newName!=<span class="literal">null</span>){</span><br><span class="line">            rename(oldName, newName)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getFileSha1(file)</span><br><span class="line">{</span><br><span class="line">    MessageDigest md = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">    file.eachByte <span class="number">4096</span>, {bytes, size -></span><br><span class="line">        md.update(bytes, <span class="number">0</span>, size);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> md.digest().collect {String.format <span class="string">"%02x"</span>, it}.join();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getFileMd5(file)</span><br><span class="line">{</span><br><span class="line">    MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">    file.eachByte <span class="number">4096</span>, {bytes, size -></span><br><span class="line">        md.update(bytes, <span class="number">0</span>, size);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> md.digest().collect {String.format <span class="string">"%02x"</span>, it}.join();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> writeFile(String fileName,String content,<span class="keyword">boolean</span> appendMode){</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(fileName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!file.exists()){</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fileName, appendMode);</span><br><span class="line">    fos.write(content.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">    fos.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li><h6 id="cvs-gradle"><a href="#cvs-gradle" class="headerlink" title="cvs.gradle"></a>cvs.gradle</h6></li>
</ul>
<p>主要配置一些版本相关工具类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.tmatesoft.svn.core.wc.ISVNOptions</span><br><span class="line"><span class="keyword">import</span> org.tmatesoft.svn.core.wc.SVNClientManager</span><br><span class="line"><span class="keyword">import</span> org.tmatesoft.svn.core.wc.SVNRevision</span><br><span class="line"><span class="keyword">import</span> org.tmatesoft.svn.core.wc.SVNStatus</span><br><span class="line"><span class="keyword">import</span> org.tmatesoft.svn.core.wc.SVNStatusClient</span><br><span class="line"><span class="keyword">import</span> org.tmatesoft.svn.core.wc.SVNWCUtil</span><br><span class="line"></span><br><span class="line">buildscript {</span><br><span class="line">    repositories {</span><br><span class="line">        maven{ url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span>}</span><br><span class="line">    }</span><br><span class="line">    dependencies {</span><br><span class="line">        classpath <span class="string">'org.tmatesoft.svnkit:svnkit:1.10.1'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ext{</span><br><span class="line">    buildSvnNum = <span class="keyword">this</span>.&buildSvnNo</span><br><span class="line">    buildGitNum = <span class="keyword">this</span>.&buildGitNo</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> buildSvnNo() {</span><br><span class="line">  </span><br><span class="line">    ISVNOptions options = SVNWCUtil.createDefaultOptions(<span class="literal">true</span>);</span><br><span class="line">    SVNClientManager clientManager = SVNClientManager.newInstance(options);</span><br><span class="line">    SVNStatusClient statusClient = clientManager.getStatusClient();</span><br><span class="line">    SVNStatus status = statusClient.doStatus(projectDir, <span class="literal">false</span>);</span><br><span class="line">    SVNRevision revision = status.getRevision();</span><br><span class="line">    <span class="keyword">def</span> svnLog = revision.getNumber();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">def</span> buildGitNo() {</span><br><span class="line">    String revisionNumberCMD = <span class="string">'git rev-parse --short HEAD'</span></span><br><span class="line">    revisionNumberCMD.execute().getText().trim()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li><h6 id="config-gradle"><a href="#config-gradle" class="headerlink" title="config.gradle"></a>config.gradle</h6></li>
</ul>
<p>主要配置一些全局变量，版本号统一等</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">ext {</span><br><span class="line">    <span class="comment">//true 每个业务Module可以单独开发</span></span><br><span class="line">    <span class="comment">//false 每个业务Module以lib的方式运行</span></span><br><span class="line">    <span class="comment">//修改之后需要Sync方可生效</span></span><br><span class="line">    isBuildModule = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//是否需要代码混淆</span></span><br><span class="line">    isNeedMinify = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//是否需要打开git版本</span></span><br><span class="line">    isNeedSvnVersion = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//是否需要打开git版本</span></span><br><span class="line">    isNeedGitVersion = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    defaultKeyStoreDir = rootProject.file(<span class="string">"config/keystore"</span>)</span><br><span class="line">		<span class="comment">//模块相关的属性</span></span><br><span class="line">    modules = [</span><br><span class="line">            <span class="string">utilcommon_dir :</span> rootProject.file(<span class="string">"../xxx"</span>)   ,</span><br><span class="line">            <span class="string">uiservice_dir :</span> rootProject.file(<span class="string">"../xxxx"</span>)</span><br><span class="line">    ]</span><br><span class="line">		<span class="comment">//android编译相关的版本号</span></span><br><span class="line">    androids = [</span><br><span class="line">            <span class="string">applicationId           :</span> <span class="string">"top.lairdli.app"</span>,     <span class="comment">//应用ID</span></span><br><span class="line">            <span class="string">versionCode             :</span> getVersionCode(),      <span class="comment">//版本号</span></span><br><span class="line">            <span class="string">versionName             :</span> getVersionName(),      <span class="comment">//版本名称</span></span><br><span class="line">            <span class="string">versionCodeDebug        :</span> <span class="number">8888888888</span>,      <span class="comment">//版本号</span></span><br><span class="line">            <span class="string">versionNameDebug        :</span> <span class="string">"DebugVersion"</span>,      <span class="comment">//版本名称</span></span><br><span class="line"></span><br><span class="line">            <span class="string">compileSdkVersion       :</span> <span class="number">28</span>,</span><br><span class="line">            <span class="string">minSdkVersion           :</span> <span class="number">15</span>,</span><br><span class="line">            <span class="string">buildToolsVersion       :</span> <span class="string">"29.0.2"</span>,</span><br><span class="line">            <span class="string">targetSdkVersion        :</span> <span class="number">22</span>,</span><br><span class="line"><span class="symbol">            androidSupportSdkVersion:</span> <span class="string">"28.0.0"</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三方库版本号</span></span><br><span class="line">    versions = [</span><br><span class="line"></span><br><span class="line">            <span class="string">xmaterialVersion        :</span> <span class="string">"1.0.0"</span>,</span><br><span class="line">            <span class="string">xrunnerVersion          :</span> <span class="string">"1.2.0"</span>,</span><br><span class="line">            <span class="string">xrolesVersion           :</span> <span class="string">"1.2.0"</span>,</span><br><span class="line">            ...</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">	 <span class="comment">//依赖配置</span></span><br><span class="line">    dependencies = [</span><br><span class="line">            <span class="string">"x_constraint_layout"</span>   : <span class="string">"androidx.constraintlayout:constraintlayout:${versions["</span>xconstraintLayoutVersion<span class="string">"]}"</span>,</span><br><span class="line">            <span class="string">"x_runner"</span>              : <span class="string">"androidx.test:runner:${versions["</span>xrunnerVersion<span class="string">"]}"</span>,</span><br><span class="line">            <span class="string">"x_rules"</span>               : <span class="string">"androidx.test:rules:${versions["</span>xrulesVersion<span class="string">"]}"</span>,</span><br><span class="line">				...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="modlue-app-build-gradle"><a href="#modlue-app-build-gradle" class="headerlink" title="modlue-app-build.gradle"></a>modlue-app-build.gradle</h5><p>应用模块模块化，可以将统一的配置抽离整理成app.gradle</p>
<ul>
<li><h6 id="app-gradle"><a href="#app-gradle" class="headerlink" title="app.gradle"></a>app.gradle</h6></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android {</span><br><span class="line">    compileSdkVersion rootProject.ext.androids.compileSdkVersion</span><br><span class="line">    buildToolsVersion rootProject.ext.androids.buildToolsVersion</span><br><span class="line">    flavorDimensions <span class="string">"versionCode"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig {</span><br><span class="line">        minSdkVersion rootProject.ext.androids.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.ext.androids.targetSdkVersion</span><br><span class="line">        versionCode rootProject.ext.androids.versionCode</span><br><span class="line">        versionName rootProject.ext.androids.versionName</span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    signingConfigs {</span><br><span class="line">    	<span class="comment">//篇幅有限，参考as-key-store配置</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line">	<span class="comment">//篇幅有限，参考as-auto-package配置</span></span><br><span class="line">android.applicationVariants.all { variant -></span><br><span class="line">		</span><br><span class="line">    <span class="comment">//gradle4.10以后自定义版本命令规则以及生成目录</span></span><br><span class="line">    variant.outputs.each { </span><br><span class="line">   		...</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//自定义版本备份路径以及版本描述</span></span><br><span class="line">    variant.assemble.doLast {</span><br><span class="line">     ...</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line"><span class="comment">//    implementation fileTree(dir: 'libs', include: ['*.jar'])</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>然后在模块下build.gradle引用app.gradle</p>
<ul>
<li><h6 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h6></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//apply plugin: 'com.android.application'</span></span><br><span class="line">apply <span class="string">from:</span> rootProject.file(<span class="string">"config/app.gradle"</span>)</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line">    implementation fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line"></span><br><span class="line">    implementation rootProject.ext.dependencies[<span class="string">"x_appcompat"</span>]</span><br><span class="line">    implementation rootProject.ext.dependencies[<span class="string">"x_constraint_layout"</span>]</span><br><span class="line">    testImplementation rootProject.ext.dependencies[<span class="string">"junit"</span>]</span><br><span class="line">    androidTestImplementation rootProject.ext.dependencies[<span class="string">"runner"</span>]</span><br><span class="line">    androidTestImplementation rootProject.ext.dependencies[<span class="string">"espresso-core"</span>]</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="modlue-lib-build-gradle"><a href="#modlue-lib-build-gradle" class="headerlink" title="modlue-lib-build.gradle"></a>modlue-lib-build.gradle</h5><p>参考modlue-app-build.gradle配置，也可以抽离lib.gradle.</p>
<ul>
<li><h6 id="lib-gradle"><a href="#lib-gradle" class="headerlink" title="lib.gradle"></a>lib.gradle</h6></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line"></span><br><span class="line">android {</span><br><span class="line">    compileSdkVersion rootProject.ext.androids.compileSdkVersion</span><br><span class="line">    buildToolsVersion rootProject.ext.androids.buildToolsVersion</span><br><span class="line"></span><br><span class="line">    defaultConfig {</span><br><span class="line">        minSdkVersion rootProject.ext.androids.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.ext.androids.targetSdkVersion</span><br><span class="line">        versionCode rootProject.ext.androids.versionCode</span><br><span class="line">        versionName rootProject.ext.androids.versionName</span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        consumerProguardFiles <span class="string">'consumer-rules.pro'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    buildTypes {</span><br><span class="line">        release {</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">android.libraryVariants.all { variant -></span><br><span class="line">    variant.assemble.doLast {</span><br><span class="line">        variant.outputs.each { output -></span><br><span class="line">            <span class="keyword">def</span> outputFile = output.outputFile;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (outputFile != <span class="literal">null</span> && outputFile.name.endsWith(<span class="string">'.aar'</span>) && variant.buildType.name == <span class="string">'release'</span>) {</span><br><span class="line">                copyFileToApk(outputFile,variant)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> copyFileToApk(outputFile, variant) {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> newName = variant.applicationId + <span class="string">'.aar'</span>;</span><br><span class="line">    <span class="keyword">def</span> releaseDir = <span class="string">"$rootProject.projectDir/out/aar/app/$getDateYYMMDD"</span></span><br><span class="line"></span><br><span class="line">    copyFile(<span class="string">"$outputFile"</span>, releaseDir</span><br><span class="line">            , <span class="string">"$outputFile.name"</span>, <span class="string">"$newName"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newName;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line"><span class="comment">//    implementation fileTree(dir: 'libs', include: ['*.jar'])</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>然后在library模块下的build.gradle目录下进行引用</p>
<ul>
<li><h6 id="build-gradle-1"><a href="#build-gradle-1" class="headerlink" title="build.gradle"></a>build.gradle</h6></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">apply <span class="string">from:</span> rootProject.file(<span class="string">"config/lib.gradle"</span>)</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line">    implementation fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line"></span><br><span class="line">    implementation rootProject.ext.dependencies[<span class="string">"x_appcompat"</span>]</span><br><span class="line">    testImplementation rootProject.ext.dependencies[<span class="string">"junit"</span>]</span><br><span class="line">    androidTestImplementation rootProject.ext.dependencies[<span class="string">"runner"</span>]</span><br><span class="line">    androidTestImplementation rootProject.ext.dependencies[<span class="string">"espresso-core"</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="Modlue-lib-debug-build-gradle"><a href="#Modlue-lib-debug-build-gradle" class="headerlink" title="Modlue-lib(debug)-build.gradle"></a>Modlue-lib(debug)-build.gradle</h5><p>其实这个模块还是属性lib模块，只是在模块化项目下，某些情况下我们只负责某一个库模块，这个时候，如果要进行调试，相对于application可以直接在as上run,lib模块可能会有些劣势了。那有没有办法在最小的改动下我们也可以让lib也能像app一样run起来了？</p>
<p>答案是肯定的，只需一处改动就能实现。还记得config.gradle-ext里面有一个熟悉吗？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ext {</span><br><span class="line">    //true 每个业务Module可以单独开发</span><br><span class="line">    //false 每个业务Module以lib的方式运行</span><br><span class="line">    //修改之后需要Sync方可生效</span><br><span class="line">    isBuildModule = false</span><br><span class="line">    ...</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></div>

<p>对就是这个isBuildModule属性，当我们想让lib变成app时，只需将isBuildModule改为true然后同步下工程即可</p>
<p>so，怎么实现咧？</p>
<p>还是想上文lib.gradle配置一样，我们也可以重新配置一个libdebug.gradle.下文主要列出一些不同点。</p>
<ul>
<li><h6 id="libdebug-gradle"><a href="#libdebug-gradle" class="headerlink" title="libdebug.gradle"></a>libdebug.gradle</h6></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Boolean.valueOf(rootProject.ext.isBuildModule)) {</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">android {</span><br><span class="line">    ...</span><br><span class="line">    sourceSets {</span><br><span class="line">        main {</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是lib-app isBuildModule模式，走manifest目录下的AndroidManifest</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.valueOf(rootProject.ext.isBuildModule)) {</span><br><span class="line">                manifest.srcFile <span class="string">'src/main/manifest/AndroidManifest.xml'</span></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                manifest.srcFile <span class="string">'src/main/AndroidManifest.xml'</span></span><br><span class="line">                java {</span><br><span class="line">                    <span class="comment">//lib model ,exclude all file below java/debug/</span></span><br><span class="line">                    exclude <span class="string">'*modlue'</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//自定义版本命令规则，生成路径等</span></span><br><span class="line"><span class="keyword">if</span> (Boolean.valueOf(rootProject.ext.isBuildModule)) {</span><br><span class="line">    android.applicationVariants.all { variant -></span><br><span class="line">     ...</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    android.libraryVariants.all { variant -></span><br><span class="line">     ...</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>然后在待调试的lib中build.gradle配置</p>
<ul>
<li><h6 id="build-gradle-2"><a href="#build-gradle-2" class="headerlink" title="build.gradle"></a>build.gradle</h6></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apply from: rootProject.file("config/libdebug.gradle")</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line">    implementation fileTree(dir: 'libs', include: ['*.jar'])</span><br><span class="line"></span><br><span class="line">    if (Boolean.valueOf(rootProject.ext.isBuildModule)) {</span><br><span class="line">        implementation rootProject.ext.dependencies["x_constraint_layout"]</span><br><span class="line">    }</span><br><span class="line">    implementation rootProject.ext.dependencies["x_appcompat"]</span><br><span class="line">    testImplementation rootProject.ext.dependencies["junit"]</span><br><span class="line">    androidTestImplementation rootProject.ext.dependencies["runner"]</span><br><span class="line">    androidTestImplementation rootProject.ext.dependencies["espresso-core"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>这样你的library模块就可以向application一样飞一般的run了。</p>
<p>but还是有些问题，如果子模块有重写application逻辑，或者项目中用了类似ARouter的工具结构，那又改怎么配置咧？不急，一步一步来。</p>
<ul>
<li><h6 id="aRouter"><a href="#aRouter" class="headerlink" title="aRouter"></a>aRouter</h6></li>
</ul>
<p>配置aRouter引用,模块build.gradle进行配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">android {</span><br><span class="line">  </span><br><span class="line">     javaCompileOptions {</span><br><span class="line">        annotationProcessorOptions {</span><br><span class="line">            arguments = [<span class="string">AROUTER_MODULE_NAME:</span> project.getName()]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line">    implementation rootProject.ext.dependencies[<span class="string">"arouter"</span>]</span><br><span class="line">    annotationProcessor rootProject.ext.dependencies[<span class="string">"arouter-compiler"</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>MainActivity统一拦截url或intent进行分发处理</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onNewIntent(intent);</span><br><span class="line">        handleIntent(intent);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleIntent</span><span class="params">(Intent intent)</span> </span>{</span><br><span class="line">        ARouterHelper.getInstance().dispatchPage(intent);</span><br><span class="line">        finish();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>Arouter调用时我们也可以封装一个工具类进行路由分发等</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> laird</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-30 11:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouterHelper</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH_ACTIVITY_LIB_TEST = <span class="string">"/ModuleLib/LibActivity"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_ACTIVITY_LIB_TEST = <span class="string">"top.lairdli.action.LIB_TEST"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ARouterHelper <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ARouterHelper INSTANCE = <span class="keyword">new</span> ARouterHelper();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(String path)</span></span>{</span><br><span class="line">        ARouter.getInstance().build(path).navigation();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(String path, Activity activity, <span class="keyword">int</span> requestCode)</span></span>{</span><br><span class="line">        ARouter.getInstance().build(path).navigation(activity,requestCode);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(String path,String key,String value)</span></span>{</span><br><span class="line">        ARouter.getInstance().build(path).withString(key,value).navigation();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Postcard <span class="title">getPostCard</span><span class="params">(String path)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> ARouter.getInstance().build(path);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fix me</span></span><br><span class="line">    <span class="comment">// 1. intent can be replaced by schame-url</span></span><br><span class="line">    <span class="comment">// 2. withSerializable can be replaced by with object,but u should implement SerializationService First</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchPage</span><span class="params">(Intent intent)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (intent == <span class="keyword">null</span> || intent.getAction() == <span class="keyword">null</span>) {</span><br><span class="line">            dispatchPageDefault();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (intent.getAction()) {</span><br><span class="line">            <span class="keyword">case</span> ACTION_ACTIVITY_LIB_TEST:</span><br><span class="line">                build(PATH_ACTIVITY_LIB_TEST);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                dispatchPageDefault();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispatchPageDefault</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// to add u default page</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>更多使用方法可以参靠<a href="https://github.com/alibaba/ARouter/blob/master/README_CN.md" target="_blank" rel="noopener">Arouter官方说明</a></p>
<ul>
<li><h6 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h6></li>
</ul>
<p>lib向app转换时，另外一个问题就是Application逻辑的问题，当主APP包含Lib模块时，我们也希望Lib中的逻辑也能被执行，但manifest却只能配置一个application-name.配置了主App的application后，lib就不能配置了。</p>
<p>本着尽量解耦，最少改动的原则，我们还是用面向接口编程的实现，先看如下类图，看完你就明白了。</p>
<p><a href="https://s1.ax1x.com/2020/05/18/YWsWtg.md.png" data-fancybox="group" data-caption="AsMulModules" class="fancybox"><img alt="AsMulModules" title="AsMulModules" data-src="https://s1.ax1x.com/2020/05/18/YWsWtg.md.png" class="lazyload"></a></p>
<p>Main-appliaction</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">BaseApplication</span> <span class="keyword">implements</span> <span class="title">IAppApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] MODULESLIST =</span><br><span class="line">            {<span class="string">"top.lairdli.study.testlibrary.LibApplication"</span>};</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List<string> <span class="title">getModuleAppClassList</span><span class="params">()</span> </string></span>{</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(MODULESLIST);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Application instance)</span> </span>{</span><br><span class="line">        Log.d(LOG_TAG, <span class="string">"---init"</span>);</span><br><span class="line">      	<span class="comment">//to do u biz</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>Libdebug-application</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LibApplication</span> <span class="keyword">extends</span> <span class="title">BaseApplication</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Application instance)</span> </span>{</span><br><span class="line">        Log.d(LOG_TAG,<span class="string">"---init"</span>);</span><br><span class="line">        <span class="comment">//to do u biz</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>BaseApplication</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: BaseApplication</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"Registered"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">IComponentApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String LOG_TAG = <span class="string">"BaseApplication"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BaseApplication instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> BaseApplication <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List<activity> mList = <span class="keyword">new</span> LinkedList<activity>();</activity></activity></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseApplication</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        LOG_TAG = <span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>{</span><br><span class="line">        Log.v(LOG_TAG, <span class="string">"onCreate()"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">//init ARouter</span></span><br><span class="line">        <span class="keyword">if</span>(BuildConfig.DEBUG){</span><br><span class="line">            ARouter.openLog();</span><br><span class="line">            ARouter.openDebug();</span><br><span class="line">        }</span><br><span class="line">        ARouter.init(<span class="keyword">this</span>);</span><br><span class="line">        instance= <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">//asbs method ,implementation in sub class</span></span><br><span class="line">        init(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//init call modulesApplication</span></span><br><span class="line">        <span class="keyword">if</span> (IAppApplication.class.isAssignableFrom(<span class="keyword">this</span>.getClass())) {</span><br><span class="line">            IAppApplication appApplication = (IAppApplication) <span class="keyword">this</span>;</span><br><span class="line">            modulesApplicationInit(appApplication.getModuleAppClassList());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">modulesApplicationInit</span><span class="params">(List<string> modulesList)</string></span></span>{</span><br><span class="line">        <span class="keyword">for</span> (String moduleImpl : modulesList){</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Class<?> clazz = Class.forName(moduleImpl);</span><br><span class="line">                Object obj = clazz.newInstance();</span><br><span class="line">                <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> IComponentApplication){</span><br><span class="line">                    ((IComponentApplication) obj).init(BaseApplication.getInstance());</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></div>

<p>IApplication</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAppApplication</span> </span>{</span><br><span class="line">    <span class="function">List<string> <span class="title">getModuleAppClassList</span><span class="params">()</span></string></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>IComponentApplication</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IComponentApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Application instance)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>MainApplication编译时运行打印如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">2019-12-30 11:43:39.219 23539-23539/? D/MainApplication: ---init</span><br><span class="line">2019-12-30 11:43:39.219 23539-23539/? D/LibApplication: ---init</span><br></pre></td></tr></tbody></table></figure></div>

<p>Libdebug-application当模块编译时运行打印如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">2019-12-30 11:43:39.219 23539-23539/? D/LibApplication: ---init</span><br></pre></td></tr></tbody></table></figure></div>

<p>以上是我总结的一种解决模块化Application问题的方法之一，如果还有其他更好的方法也欢迎补充。</p>
<h3 id="eclipse-translate-旧工程迁移"><a href="#eclipse-translate-旧工程迁移" class="headerlink" title="eclipse-translate 旧工程迁移"></a>eclipse-translate 旧工程迁移</h3><p>对于以前eclipse旧工程，如果我们不希望破坏之前原有路径或者代码结构，但又想再忍受eclipse的IED，想再AS上进行调试，只需3个步骤三部曲就行</p>
<h4 id="1-脚本拷贝"><a href="#1-脚本拷贝" class="headerlink" title="1. 脚本拷贝"></a>1. 脚本拷贝</h4><p>新建as工程文件夹，拷贝正常as项目文件配置到步骤1所建立的文件夹</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">-rw-r--r--   1 laird  staff   713 12 29 16:05 build.gradle</span><br><span class="line">drwxr-xr-x   3 laird  staff    96 12 29 14:42 gradle/</span><br><span class="line">-rw-r--r--   1 laird  staff  1073 12 29 15:20 gradle.properties</span><br><span class="line">-rwxr--r--   1 laird  staff  5296 12 29 14:42 gradlew*</span><br><span class="line">-rw-r--r--   1 laird  staff  2260 12 29 14:42 gradlew.bat</span><br><span class="line">-rw-r--r--   1 laird  staff  2079 12 29 17:26 settings.gradle</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="2-项目配置"><a href="#2-项目配置" class="headerlink" title="2. 项目配置"></a>2. 项目配置</h4><p>配置项目setting.gradle，将需要转换的eclispe工程模块include到setting.gradle中。</p>
<p>可参考As-project-setting.gradle</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">rootProject.name = <span class="string">'ProjectEclipse2As'</span></span><br><span class="line"></span><br><span class="line">include <span class="string">'app_module'</span></span><br><span class="line">project(<span class="string">':app_module'</span>).projectDir = <span class="keyword">new</span> File(<span class="string">'../u eclispe app moudle path)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">include '</span>lib_module<span class="string">'</span></span><br><span class="line"><span class="string">project('</span>:lib_vodservice<span class="string">').projectDir = new File('</span>..<span class="regexp">/../</span>u eclispe lib moudle path<span class="string">')</span></span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="3-配置模块build-gradle"><a href="#3-配置模块build-gradle" class="headerlink" title="3. 配置模块build.gradle"></a>3. 配置模块build.gradle</h4><p>模块build.gradle包含library,application两种，掌握了application的配置，library的配置对比着配就行了</p>
<p>建议直接copy一份完整的application-build.gradle，然后我们只需要改几个关键的点就行</p>
<ul>
<li><h5 id="源码路径"><a href="#源码路径" class="headerlink" title="源码路径"></a>源码路径</h5><p>由于as默认的源码构建方式和eclipse有些区别，因为第一个重要的点就是配置源码路径</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">sourceSets {</span><br><span class="line">    main {</span><br><span class="line">        manifest.srcFile <span class="string">'manifest/AndroidManifest.xml'</span></span><br><span class="line">        java.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">        resources.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">        aidl.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">        renderscript.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">        res.srcDirs = [<span class="string">'res'</span>]</span><br><span class="line">        assets.srcDirs = [<span class="string">'assets'</span>]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>需要注意的是manifest，由于最新版本的as对manifest的一些配置有强制限制（版本号相关），因而建议copy一份AndroidManifest.xml到manifest文件夹，重新制定路径。这样不影响之前elcipse工程配置。</p>
</li>
<li><h5 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h5><p>原eclipse工程依赖配置可在project.properties文件中查看，</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">target</span>=<span class="string">android-17</span></span><br><span class="line"><span class="meta">proguard.config</span>=<span class="string">proguard.cfg</span></span><br><span class="line"><span class="meta">android.library.reference.1</span>=<span class="string">../../../library1</span></span><br><span class="line"><span class="meta">android.library.reference.2</span>=<span class="string">../../../library2</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>根据project.properties的配置在build.gradle中的depend中相应配置。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">dependencies {</span><br><span class="line">    implementation fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation project(<span class="string">':library1'</span>)</span><br><span class="line">    implementation project(<span class="string">':library2'</span>)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></div>

<p>需要注意的是除了模块间的依赖外，libs下的jar包，so依赖也许要注意。</p>
<p> jar包依赖分两种，一种编译时依赖，一种运行时依赖。</p>
<p>编译时依赖只参与编译，不打入app源码，一般是引用系统api会用到。</p>
<p>编译时依赖使用compileOnly</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">compileOnly files(<span class="string">'libs/compileOnlyxxx.jar'</span>)</span><br></pre></td></tr></tbody></table></figure></div>

<p>运行时依赖除了参与编译，会打入app源码，常见的模块键依赖就是这种。</p>
<p>运行时依赖使用implementation</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">implementation files(<span class="string">'libs/compilexx.jar</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><h5 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h5><p>eclispe编译配置可在mainifest文件中查看，然后在build.gradle相应配置就行。</p>
</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Gralde的学习应远不止与此，重在实践与理解。</p>
<p>本文涉及到的相关源码已整理开源到github</p>
<h3 id="示例-androidgradle"><a href="#示例-androidgradle" class="headerlink" title="示例-androidgradle"></a><a href="https://github.com/lairdli/AndroidGradle" target="_blank" rel="noopener">示例-androidgradle</a></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight http"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">https://github.com/lairdli/AndroidGradle</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="在线浏览-androidgradle"><a href="#在线浏览-androidgradle" class="headerlink" title="在线浏览-androidgradle"></a><a href="https://www.jianshu.com/p/5c19dd7cdea8" target="_blank" rel="noopener">在线浏览-androidgradle</a></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight http"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">https://www.jianshu.com/p/5c19dd7cdea8</span></span><br><span class="line"><span class="attribute">https://juejin.im/post/5e09feaf6fb9a016230ade1b</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.groovy-lang.org/documentation.html#gettingstarted" target="_blank" rel="noopener">Groovy-Lang-Doc</a></li>
<li><a href="https://gradle.org/guides/#getting-started" target="_blank" rel="noopener">Gradle Tutorials and Guides</a></li>
<li><a href="https://blog.csdn.net/Innost/article/details/48228651" target="_blank" rel="noopener">深入理解Android之Gradle</a></li>
<li><a href="https://www.cnblogs.com/lwbqqyumidi/p/10322034.html" target="_blank" rel="noopener">Gradle中的闭包</a></li>
<li><a href="http://liuwangshu.cn/tags/Gradle核心思想/" target="_blank" rel="noopener">Gradle核心思想</a></li>
<li><a href="http://liuwangshu.cn/tags/Android-Gradle/" target="_blank" rel="noopener">Android Gradle</a></li>
<li><a href="https://www.cnblogs.com/AsionTang/p/5974254.html" target="_blank" rel="noopener">Gradle-AAR配置</a></li>
<li><a href="https://segmentfault.com/a/1190000004229002" target="_blank" rel="noopener">Gradle for Android</a></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>部门协作-团队组建与管理</title>
    <url>/2019/11/24/Soft-Team-Manager/</url>
    <content><![CDATA[<html><head></head><body><p>本文将总结软件团队组建与管理的一些关键要素。<br>一切将从面试-文档-沟通-分享-评审-定位等以此归纳。</p>
<p><a href="https://s2.ax1x.com/2020/03/07/3jODu4.png" data-fancybox="group" data-caption="soft-team-manager" class="fancybox"><img alt="soft-team-manager" title="soft-team-manager" data-src="https://s2.ax1x.com/2020/03/07/3jODu4.png" class="lazyload"></a></p>
<a id="more"></a>

<h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>面试主要考察候选人的3个方面：</p>
<ul>
<li>技术水平，编程技术水平</li>
<li>领域知识，业务了解程度</li>
<li>软性技能，沟通能力，抗压能力，性格等</li>
</ul>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>一个团队成熟与否的表示是文档管理，文档过多过少都会影响到项目进度与团队管理。<br>下文将从入职文档，测试资源文档，项目文档三个方面依次展开。</p>
<h4 id="入职文档"><a href="#入职文档" class="headerlink" title="入职文档"></a>入职文档</h4><ul>
<li>部门组件结构，以及新员工所在团队和将要当担的角色</li>
<li>个人简介，用于群发给部门其他成员</li>
<li>要加入的公司邮件组，以及内部沟通的QQ群或微信群等</li>
<li>项目地址，svn或git 权限申请等</li>
<li>Bug管理工具及其权限申请</li>
<li>测试环境和模拟环境地址</li>
<li>产品需求地址</li>
<li>wifi设置、VPN申请、手机邮箱配置、打印机安装等待</li>
<li>常用开发软件下载</li>
<li>业务名词解释</li>
<li>自动打包或持续化集成地址</li>
<li>代码规范等</li>
</ul>
<h4 id="测试资源文档"><a href="#测试资源文档" class="headerlink" title="测试资源文档"></a>测试资源文档</h4><p>列出测试机型号，操作系统等，并列出使用人，方便测试共享</p>
<h4 id="项目文档"><a href="#项目文档" class="headerlink" title="项目文档"></a>项目文档</h4><ul>
<li>需求文档</li>
<li>需求分析/分解文档</li>
<li>工时评估文档</li>
<li>项目排期文档</li>
<li>业务模块拆分文档</li>
<li>业务逻辑（页面跳转）文档</li>
<li>前端接口文档</li>
<li>概要设计(框架设计)文档</li>
<li>第三方接口文档</li>
<li>版本管理策略文档</li>
<li>模块分工文档</li>
<li>bug记录文档</li>
<li>项目进度文档</li>
<li>自测试模块</li>
<li>发布版本流程文档</li>
</ul>
<h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>沟通，是衡量一个人软件技能的重要指标。下文将从团队内外部沟通两个方面展开。</p>
<h4 id="团队内部"><a href="#团队内部" class="headerlink" title="团队内部"></a>团队内部</h4><p> 一对一沟通<br>沟通前团队提前十分钟想下：</p>
<ul>
<li>最近一个月做了哪些事？有什么提高？</li>
<li>自身有什么提高？或什么需求？需要我做什么？<br>沟通后总结</li>
</ul>
<h4 id="团队外部"><a href="#团队外部" class="headerlink" title="团队外部"></a>团队外部</h4><ul>
<li>与其他部门沟通</li>
<li>与客户甲方沟通</li>
<li>与第三方合作对接厂家沟通</li>
</ul>
<h3 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h3><p>每周一次，可由teamleader和团队轮流，<br>分享前可搜集需求<br>分享后可整理成团队wiki文库<br>每次一小时左右,主要涉及：</p>
<ul>
<li>涉及模式</li>
<li>算法</li>
<li>框架设计</li>
<li>协议</li>
<li>业务</li>
<li>性能优化</li>
<li>原理等等</li>
</ul>
<h3 id="代码评审"><a href="#代码评审" class="headerlink" title="代码评审"></a>代码评审</h3><p> 新员工，实习生，应届生指派对应的代码评审人，或者由核心员工轮流评审。<br> 对发现的问题，进行总结，梳理，讲解。<br> 代码规范等等。</p>
<h3 id="Leader的定位"><a href="#Leader的定位" class="headerlink" title="Leader的定位"></a>Leader的定位</h3><p>主要职责：</p>
<ul>
<li>每次迭代把Task分配到具体开发人员。</li>
<li>组织线上Crash的修复。</li>
<li>处理线上突发bug。</li>
<li>解决团队中遇到的技术难点。</li>
<li>组织每周代码评审。</li>
<li>组织每周例会。</li>
<li>对接项目等。</li>
</ul>
<p>注意点：</p>
<ul>
<li>不要给自己分配具体的需求开发，管理工作会消耗大量时间。</li>
<li>努力使自己不要成为瓶颈，及时分派Task到团员。</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://book.douban.com/subject/26649050/" target="_blank" rel="noopener">APP研发录</a></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Soft</category>
      </categories>
      <tags>
        <tag>Soft</tag>
        <tag>Team</tag>
      </tags>
  </entry>
  <entry>
    <title>部门协作-软件开发项目流程</title>
    <url>/2019/09/22/Soft-Project-Manager/</url>
    <content><![CDATA[<html><head></head><body><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>对于一个完整的软件开发团队，应该包含产品经理，开发，测试这三个团队</p>
<ul>
<li>产品经理灵魂，对需求和验收负责</li>
<li>开发团队是主力，对产品研发实现负责</li>
<li>测试团队是保障，对产品质量负责。</li>
</ul>
<p>而对于一个完整的软件项目而言，除了需要产品经理，开发，测试外，还需要项目经理</p>
<ul>
<li>项目经理是领航，对整个项目负责。</li>
</ul>
<p><a href="https://s2.ax1x.com/2020/03/07/3jOYEn.png" data-fancybox="group" data-caption="pm-user" class="fancybox"><img alt="pm-user" title="pm-user" data-src="https://s2.ax1x.com/2020/03/07/3jOYEn.png" class="lazyload"></a></p>
<a id="more"></a>

<h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><p>软件项目体系中，常用到的一些角色名称与对应的中英文缩写如下，下文相关角色将以缩写代替。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>全称</th>
<th>英文缩写</th>
</tr>
</thead>
<tbody><tr>
<td>项目经理</td>
<td>Project Manager</td>
<td>PM</td>
</tr>
<tr>
<td>产品经理</td>
<td>Product Manager</td>
<td>PM</td>
</tr>
<tr>
<td>测试工程师</td>
<td>Quality Assurance Engineer</td>
<td>QA</td>
</tr>
<tr>
<td>开发工程师</td>
<td>Research and Development engineer</td>
<td>RD</td>
</tr>
</tbody></table>
<h4 id="项目经理-PM"><a href="#项目经理-PM" class="headerlink" title="项目经理-PM"></a>项目经理-PM</h4><p>对项目进度负责，协调PM,RD,QA 保障项目顺利进展</p>
<blockquote>
<ol>
<li>收集开发计划和测试计划。</li>
<li>每天组织项目例会，并整理发送项目纪要</li>
<li>积极面对分险，及时调整计划，减少分险</li>
<li>推动bug修复的情况</li>
<li>监督测试人员的测试，产品经理的验收等情况</li>
<li>掌握项目进度</li>
</ol>
</blockquote>
<h4 id="产品经理-PM"><a href="#产品经理-PM" class="headerlink" title="产品经理-PM"></a>产品经理-PM</h4><p>确定产品需求，确定什么是对的。</p>
<blockquote>
<ol>
<li>明确产品需求。协调销售，客户，UI，确定产品需求。只有自己搞明白了，才能让RD,QA也明白</li>
<li>召开需求评审会议-输出需求文档</li>
<li>参加项目例会。及时了解研发和测试在产品需求逻辑上的问题，以进行调整</li>
<li>处理QA提出的需求bug。看是调整业务逻辑还是降低优先级，本期不处理</li>
<li>验证需求。开发工作结束，测试接近尾声时，产品经理验收实际的产品是否符合需求</li>
<li>觉得是否发版本。发版本前，根据本次迭代的buglist清单，以及QA的反馈，决定是否发版本。</li>
</ol>
</blockquote>
<h4 id="测试团队-QA"><a href="#测试团队-QA" class="headerlink" title="测试团队-QA"></a>测试团队-QA</h4><p>对产品质量负责，及时反馈测试过程中发现的各种bug以及分险</p>
<blockquote>
<ol>
<li>明确产品需求，编写对应测试用例</li>
<li>召开测试用例评审会议-想党羽需求二次评审，QA,RD,PM需求达成一致-输出测试用例文档</li>
<li>参加项目例会，及时反馈沟通测试过程中发现的bug以及分险</li>
<li>功能测试</li>
<li>压力测试</li>
<li>客户投诉回访</li>
</ol>
</blockquote>
<h4 id="研发团队-RD"><a href="#研发团队-RD" class="headerlink" title="研发团队-RD"></a>研发团队-RD</h4><p>对产品进行开发，根据产品需求文档进行产品设计，开发，自测试等</p>
<blockquote>
<ol>
<li><p>概要设计 ，根据需求文档，需求分析 输出概要设计，明确产品需求，逻辑，框架等</p>
</li>
<li><p>组织开发团队内部进行概要设计评审</p>
</li>
<li><p>详细设计。根据概要设计文档输出详情设计文档 ，明确实现模块，功能等</p>
</li>
<li><p>组织开发全都内部进行详情设计评审</p>
</li>
<li><p>软件开发。根据详细设计文档，进行软件开发，</p>
</li>
<li><p>自测试。编写自测试用例。</p>
</li>
<li><p>版本送测。自测试通过后，送测版本给QA.</p>
</li>
<li><p>参加项目每日例会，及时了解产品bug以及项目进展</p>
</li>
<li><p>修正QA/PM反馈的相关bug.</p>
</li>
<li><p>做好代码版本管理控制以及发行送测版本的版本控制。</p>
</li>
</ol>
</blockquote>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>以上只是罗列整理了一个正常的，理想化的软件项目所需的角色分配以及职责划分，然而现实工作中，对RD而言肯定会遇到很多问题。比如缺少PM或者缺少QA等，或者是需求不明确，或需求变更太频繁等等，这些都需要我们不得不面对。</p>
<p>为此作为一名优秀的开发者，还需要从以下几方面提升</p>
<blockquote>
<ul>
<li>沟通能力。善于倾听，平和处事，没有解不开的结，没有理不清的事。</li>
<li>知识储备。善于学习，与时俱进，不断扩张自己的技术储备。</li>
<li>分享总结。善于分享，总结补短。永远不要小看团队的力量，分享总结，步步高。</li>
</ul>
</blockquote>
<p>如此，保持平和的心态，以不变应万变，学无止境。</p>
</body></html>]]></content>
      <categories>
        <category>Soft</category>
      </categories>
      <tags>
        <tag>Soft</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-常用Linux命令行工具梳理</title>
    <url>/2019/08/13/Android-Command/</url>
    <content><![CDATA[<html><head></head><body><p>众所周知 Android系统是基于linux内核的，因而linux上的一些命令行基本上Android上也能适用，有时候有些有些阉割的命令也可以通过busybox这个命令工具做补充。本文总结Android开发常用的一些的命令行操作，带你走进不一样的空间体验。命令太多，建议收藏，有需要时搜索就行。</p>
<a id="more"></a>

<h1 id="Adb常用命令"><a href="#Adb常用命令" class="headerlink" title="Adb常用命令"></a>Adb常用命令</h1><h3 id="adb-connect-ip-port"><a href="#adb-connect-ip-port" class="headerlink" title="adb connect ip:port"></a>adb connect ip:port</h3><p>  连接指定设备<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb connect 192.168.3.43:5555</span><br><span class="line">already connected to 192.168.3.43:5555</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-disconnect"><a href="#adb-disconnect" class="headerlink" title="adb disconnect"></a>adb disconnect</h3><p>  断开指定设备<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb disconnect</span><br><span class="line">disconnected everything</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-devices"><a href="#adb-devices" class="headerlink" title="adb devices"></a>adb devices</h3><p>  列出已连接设备<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">192.168.3.43:5555	device</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-kill-server"><a href="#adb-kill-server" class="headerlink" title="adb kill-server"></a>adb kill-server</h3><p>  adb 关闭服务<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb kill-server</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-start-server"><a href="#adb-start-server" class="headerlink" title="adb start-server"></a>adb start-server</h3><p>  adb 启动服务<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb start-server</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-install"><a href="#adb-install" class="headerlink" title="adb install"></a>adb install</h3><p>  安装应用 adb install -r -t apk路径</p>
<blockquote>
<p>-r,-t,-d 选填<br>-r表示替换掉原来的apk；如果没有-r，否则会提示apk已经存在<br>-t表示可安装测试debug版本的apk,否则会提示TEST_ONLY<br>-d表示可以降级安装，否则会提示apk版本太低</p>
</blockquote>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb install -r -t -d /Users/laird/git/AndroidTVappTutorial/app/build/outputs/apk/debug/app-debug.apk</span><br><span class="line">Performing Push Install</span><br><span class="line">/Users/laird/Work/05workspace/git/AndroidTV... pushed. 1.3 MB/s (2777025 bytes in 1.994s)</span><br><span class="line">    pkg: /data/local/tmp/app-debug.apk</span><br><span class="line">Success</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="adb-uninstall"><a href="#adb-uninstall" class="headerlink" title="adb uninstall"></a>adb uninstall</h3><p>  卸载应用，后面指定应用包名<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb uninstall com.example.android.tvleanback</span><br><span class="line">Success</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-logcat"><a href="#adb-logcat" class="headerlink" title="adb logcat"></a>adb logcat</h3><p>  抓取系统日志，建议带上时间戳，并写入文件<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb logcat -vtime > android.log</span><br></pre></td></tr></tbody></table></figure></div><br>  如需结束，按下^C<br>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb logcat -vtime > android.log</span><br><span class="line">^C</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-root"><a href="#adb-root" class="headerlink" title="adb root"></a>adb root</h3><p>  获取root权限<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb root</span><br><span class="line">restarting adbd as root</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-remount"><a href="#adb-remount" class="headerlink" title="adb remount"></a>adb remount</h3><p>  挂载系统<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb remount</span><br><span class="line">remount succeeded</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-reboot"><a href="#adb-reboot" class="headerlink" title="adb reboot"></a>adb reboot</h3><p>  重启系统<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb reboot </span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-shell"><a href="#adb-shell" class="headerlink" title="adb shell"></a>adb shell</h3><p>  进入命令行模式<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb shell</span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="adb-s-…"><a href="#adb-s-…" class="headerlink" title="adb -s …"></a>adb -s …</h3><p>  如果有adb连接有多台设备，可用-s指定设备识别号后，再后面再加命令<br>  识别号可通过adb devices查看<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">192.168.3.183:5555	device</span><br><span class="line">192.168.3.18:5555	offline</span><br><span class="line">192.168.3.43:5555	device</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">操作指定的设备</span><br><span class="line">```shell</span><br><span class="line">  Laird-MacBook-Pro:~ laird$ adb -s 192.168.3.183:5555 root</span><br><span class="line">  adbd is already running as root</span><br><span class="line">  Laird-MacBook-Pro:~ laird$</span><br><span class="line">  Laird-MacBook-Pro:~ laird$ adb -s 192.168.3.43:5555 shell</span><br><span class="line">  shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div>

<h1 id="Android-Linux-常用命令"><a href="#Android-Linux-常用命令" class="headerlink" title="Android-Linux 常用命令"></a>Android-Linux 常用命令</h1><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><h3 id="busybox-uname-m"><a href="#busybox-uname-m" class="headerlink" title="busybox uname -m"></a>busybox uname -m</h3><p>  显示机器的处理器架构(2)<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ $ busybox uname -m</span><br><span class="line">armv7l</span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-uname-r"><a href="#busybox-uname-r" class="headerlink" title="busybox uname -r"></a>busybox uname -r</h3><p>  显示正在使用的内核版本<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ $ busybox uname -r</span><br><span class="line">3.10.40</span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="cat-proc-cpuinfo"><a href="#cat-proc-cpuinfo" class="headerlink" title="cat /proc/cpuinfo"></a>cat /proc/cpuinfo</h3><p>  显示CPU info的信息<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ $  cat /proc/cpuinfo</span><br><span class="line">processor	: 0</span><br><span class="line">model name	: ARMv7 Processor rev 4 (v7l)</span><br><span class="line">BogoMIPS	: 1377.06</span><br><span class="line">......</span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="cat-proc-meminfo"><a href="#cat-proc-meminfo" class="headerlink" title="cat /proc/meminfo"></a>cat /proc/meminfo</h3><p>  查看内存使用 </p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">  shell@pineapple:/ $ cat /proc/meminfo</span><br><span class="line">  MemTotal:         921624 kB</span><br><span class="line">  MemFree:           58280 kB</span><br><span class="line">  Buffers:           13696 kB</span><br><span class="line">  Cached:           295604 kB</span><br><span class="line">  SwapCached:          116 kB</span><br><span class="line">  Active:           334472 kB</span><br><span class="line">  Inactive:         310756 kB</span><br><span class="line">  Active(anon):     172492 kB</span><br><span class="line">  Inactive(anon):   172312 kB</span><br><span class="line">  Active(file):     161980 kB</span><br><span class="line">......</span><br><span class="line">  shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="cat-proc-version"><a href="#cat-proc-version" class="headerlink" title="cat /proc/version"></a>cat /proc/version</h3><p>  显示内核的版本<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ $ cat /proc/version</span><br><span class="line">Linux version 3.10.40 (root@ubuntukaifa) (gcc version 4.7.2 (Sourcery CodeBench Lite 2012.09-64) ) #148 SMP PREEMPT Wed Jul 10 17:36:30 CST 2019</span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="cat-proc-net-dev"><a href="#cat-proc-net-dev" class="headerlink" title="cat /proc/net/dev"></a>cat /proc/net/dev</h3><p>  显示网络适配器及统计<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Inter-|   Receive                                                |  Transmit</span><br><span class="line">face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed</span><br><span class="line">   sit0:       0       0    0    0    0     0          0         0        0       0    0    0    0     0       0          0</span><br><span class="line">     lo:   33251      32    0    0    0     0          0         0    33251      32    0    0    0     0       0          0</span><br><span class="line">  eth0: 23879158  130231    0   10    0     0          0     92837 11739459   41693    0    0    0     0       0          0</span><br><span class="line">ip6tnl0:       0       0    0    0    0     0          0         0        0       0    0    0    0     0       0          0</span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="cat-proc-mounts"><a href="#cat-proc-mounts" class="headerlink" title="cat /proc/mounts"></a>cat /proc/mounts</h3><p>   显示已加载的文件系统<br>   </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ $ cat /proc/mounts</span><br><span class="line"> rootfs / rootfs ro,relatime 0 0</span><br><span class="line"> tmpfs /dev tmpfs rw,nosuid,relatime,mode=755 0 0</span><br><span class="line"> devpts /dev/pts devpts rw,relatime,mode=600 0 0</span><br><span class="line"> ......</span><br><span class="line"> /dev/block/platform/mstar_mci.0/by-name/system /system ext4 ro,relatime,data=ordered 0 0</span><br><span class="line"> /dev/block/platform/mstar_mci.0/by-name/cache /cache ext4 rw,nosuid,nodev,noatime,data=ordered 0 0</span><br><span class="line"> /dev/block/platform/mstar_mci.0/by-name/userdata /data ext4 rw,nosuid,......</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-cal-2019"><a href="#busybox-cal-2019" class="headerlink" title="busybox cal 2019"></a>busybox cal 2019</h3><p>  显示2019年的日历表<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ $ busybox cal 2019</span><br><span class="line">                            2019</span><br><span class="line"></span><br><span class="line">    January               February               March</span><br><span class="line">Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa</span><br><span class="line">    1  2  3  4  5                  1  2                  1  2</span><br><span class="line">6  7  8  9 10 11 12   3  4  5  6  7  8  9   3  4  5  6  7  8  9</span><br><span class="line">13 14 15 16 17 18 19  10 11 12 13 14 15 16  10 11 12 13 14 15 16</span><br><span class="line">20 21 22 23 24 25 26  17 18 19 20 21 22 23  17 18 19 20 21 22 23</span><br><span class="line">27 28 29 30 31        24 25 26 27 28        24 25 26 27 28 29 30</span><br><span class="line">                                            31</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>  显示系统日期<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">127|shell@pineapple:/ $ date</span><br><span class="line">Mon Aug 12 16:50:24 CST 2019</span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="date-s-“yyyymmdd-hhmmss”"><a href="#date-s-“yyyymmdd-hhmmss”" class="headerlink" title="date -s “yyyymmdd.hhmmss”"></a>date -s “yyyymmdd.hhmmss”</h3><p>  设置日期和时间<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # date -s "20190823.172522"</span><br><span class="line">Fri Aug 23 17:25:22 CST 2019</span><br><span class="line">shell@pineapple:/ # date</span><br><span class="line">Fri Aug 23 17:25:24 CST 2019</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="getprop"><a href="#getprop" class="headerlink" title="getprop"></a>getprop</h3><p>  查看系统属性<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # getprop</span><br><span class="line">[bluetooth.sco_over_btmic]: [1]</span><br><span class="line">[chrome.tv.hole_threshold]: [0]</span><br><span class="line">[config.disable_bluetooth]: [0]</span><br><span class="line">[dalvik.vm.dex2oat-Xms]: [64m]</span><br><span class="line">[dalvik.vm.dex2oat-Xmx]: [512m]</span><br><span class="line">[dalvik.vm.dexopt-flags]: [m=y]</span><br><span class="line">[dalvik.vm.heapgrowthlimit]: [128m]</span><br><span class="line">[dalvik.vm.heapmaxfree]: [8m]</span><br><span class="line">[dalvik.vm.heapminfree]: [512k]</span><br><span class="line">[dalvik.vm.heapsize]: [256m]</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure></div><br>  也可以过滤字段 getprop | grep 过滤字符<br>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # getprop | grep "version"</span><br><span class="line">[mstar.primary.audioHAL.version]: [Primary audioHAL version 3.0.04]</span><br><span class="line">[ro.build.version.all_codenames]: [REL]</span><br><span class="line">[ro.build.version.base_os]: []</span><br><span class="line">[ro.build.version.codename]: [REL]</span><br><span class="line">[ro.build.version.incremental]: [GD__-18.03.100.20.11.C2P]</span><br><span class="line">[ro.build.version.release]: [5.1.1]</span><br><span class="line">[ro.build.version.sdk]: [22]</span><br><span class="line">[ro.build.version.security_patch]: [2016-03-01]</span><br><span class="line">[ro.opengles.version]: [131072]</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div><br>  也也可指定属性 getprop 属性名<br>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # getprop persist.sys.timezone</span><br><span class="line">Asia/Shanghai</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="setprop"><a href="#setprop" class="headerlink" title="setprop"></a>setprop</h3><p>  设置系统属性,注意有些系统属性设置后重启可能会失效<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # setprop persist.sys.test testvalue</span><br><span class="line">shell@pineapple:/ # getprop persist.sys.test</span><br><span class="line">testvalue</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="dumpsys"><a href="#dumpsys" class="headerlink" title="dumpsys"></a>dumpsys</h3><p>  dump系统所有的信息，由于信息量太大，建议会写入文件<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ #   dumpsys > dumpsys.log</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="dumpsys-package"><a href="#dumpsys-package" class="headerlink" title="dumpsys package"></a>dumpsys package</h3><p>  dump应用信息，一般可以指定包名，查看应用信息<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # dumpsys package tv.lairdli.top</span><br><span class="line">Activity Resolver Table:</span><br><span class="line">Non-Data Actions:</span><br><span class="line">    android.intent.action.MAIN:</span><br><span class="line">        c015d7f tv.lairdli.top/.androidtvapptutorial.MainTvActivity</span><br><span class="line"></span><br><span class="line">Key Set Manager:</span><br><span class="line">[tv.lairdli.top]</span><br><span class="line">    Signing KeySets: 139</span><br><span class="line"></span><br><span class="line">Packages:</span><br><span class="line">Package [tv.lairdli.top] (164bb14c):</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="dumpsys-meminfo"><a href="#dumpsys-meminfo" class="headerlink" title="dumpsys meminfo"></a>dumpsys meminfo</h3><p>  查看内存信息，可指定应用包名或者进程pid<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">127|shell@pineapple:/ $ dumpsys meminfo com.example.android.persistence</span><br><span class="line">  Applications Memory Usage (kB):</span><br><span class="line">  Uptime: 8640528 Realtime: 8640528</span><br><span class="line"></span><br><span class="line">  ** MEMINFO in pid 5534 [com.example.android.persistence] **</span><br><span class="line">                  Pss  Private  Private  Swapped     Heap     Heap     Heap</span><br><span class="line">                  Total    Dirty    Clean    Dirty     Size    Alloc     Free</span><br><span class="line">                  ------   ------   ------   ------   ------   ------   ------</span><br><span class="line">  Native Heap     3882     3852        0      284    12288     5183     7104</span><br><span class="line">  Dalvik Heap     7002     6952        0        0    11564     7325     4239</span><br><span class="line">  Dalvik Other     8618     8604        0        0</span><br><span class="line">          Stack      312      312        0        0</span><br><span class="line">      Other dev       20        0       20        0</span><br><span class="line">      .so mmap      924      100      196      188</span><br><span class="line">      .apk mmap      396        0       92        0</span><br><span class="line">      .ttf mmap       59        0       48        0</span><br><span class="line">      .dex mmap       96        0       92        0</span><br><span class="line">      .oat mmap     1462        0      516        0</span><br><span class="line">      .art mmap      862      636        0        8</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>  查看当前系统运行应用进程，可配合grep使用<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ $ ps | grep example</span><br><span class="line">u0_a95    5534  1189  1034160 52728 ffffffff 00000000 S com.example.android.persistence</span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"> </span><br><span class="line">### top</span><br><span class="line"> 查看当前活跃的进程可加参数-m 显示个数</span><br><span class="line"> ```shell</span><br><span class="line">   shell@pineapple:/ $ top -m 3</span><br><span class="line"></span><br><span class="line">   User 20%, System 9%, IOW 0%, IRQ 0%</span><br><span class="line">   User 116 + Nice 1 + Sys 52 + Idle 401 + IOW 0 + IRQ 0 + SIRQ 1 = 571</span><br><span class="line"></span><br><span class="line">   PID PR CPU% S  #THR     VSS     RSS PCY UID      Name</span><br><span class="line">   6160  3  15% S    31 1024760K  38488K  bg u0_a57   com.dangbeimarket:bdservice_v1</span><br><span class="line">   2231  2   4% S    68 1071148K  56480K  bg u0_a60   com.douyu.xl.douyutv</span><br><span class="line">   1183  0   2% S    73 386908K   7020K  fg root     /applications/bin/MiSysSrv</span><br><span class="line">   ^C</span><br><span class="line">   130|shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="logcat"><a href="#logcat" class="headerlink" title="logcat"></a>logcat</h3><p>  查看日志，建议加上时间戳 ，TAG等<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">130|shell@pineapple:/ $ logcat -vtime -s TAG AndroidRuntime DEBUG</span><br><span class="line">--------- beginning of main</span><br><span class="line">--------- beginning of system</span><br><span class="line">08-23 18:30:53.294 I/TAG     ( 5940): registerNewOutGoingCallReceiver mIsNewOutGoingCallRegistered false</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="amp"><a href="#amp" class="headerlink" title="&"></a>&</h3><p>  一个神奇的指令，命令行+& ，能将命令置于后台，不影响前台输出</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ $ top -m 2 &</span><br><span class="line">[2] 6583</span><br><span class="line">shell@pineapple:/ $</span><br><span class="line"></span><br><span class="line">User 18%, System 7%, IOW 0%, IRQ 0%</span><br><span class="line">User 55 + Nice 1 + Sys 24 + Idle 228 + IOW 0 + IRQ 0 + SIRQ 1 = 309</span><br><span class="line"></span><br><span class="line">PID PR CPU% S  #THR     VSS     RSS PCY UID      Name</span><br><span class="line">1164  1   7% S     7  28496K  10012K  bg logd     /system/bin/logd</span><br><span class="line">5940  0   6% S    76 1089524K  69544K  bg u0_a61   com.duowan.kiwitv</span><br><span class="line"></span><br><span class="line">shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="busybox-killall-system-server"><a href="#busybox-killall-system-server" class="headerlink" title="busybox killall system-server"></a>busybox killall system-server</h3><p>重启服务，可模拟快速重启，硬件不重启</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">shell</span><br><span class="line">shell@pineapple: $ su</span><br><span class="line">shell@pineapple: $  busybox killall system_server</span><br><span class="line">shell@pineapple: $ </span><br><span class="line">Laird-MacBook-Pro:Documents laird$</span><br></pre></td></tr></tbody></table></figure></div>


<h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><h3 id="cd"><a href="#cd" class="headerlink" title="cd -"></a>cd -</h3><p>  切换到上一次路径<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@Hi3751V551:/ $ cd /data</span><br><span class="line">shell@Hi3751V551:/data $ cd /system</span><br><span class="line">shell@Hi3751V551:/system $ cd -</span><br><span class="line">/data</span><br><span class="line">shell@Hi3751V551:/data $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="ll-a"><a href="#ll-a" class="headerlink" title="ll -a"></a>ll -a</h3><p>  列出目录文件，含权限信息,-a 包含隐藏文件<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@Hi3751V551:/ $ ll</span><br><span class="line">lrwxrwxrwx root     root              1970-01-01 08:00 Customer -> /tvcustomer/Customer</span><br><span class="line">lrwxrwxrwx root     root              1970-01-01 08:00 Database -> /tvdatabase/Database</span><br><span class="line">lrwxrwxrwx root     root              1970-01-01 08:00 DatabaseBackup -> /tvdatabase/DatabaseBackup</span><br><span class="line">dr-xr-xr-x root     root              1970-01-01 08:00 acct</span><br><span class="line">lrwxrwxrwx root     root              1970-01-01 08:00 applications -> /tvservice/applications</span><br><span class="line">drwxr-xr-x root     root              2017-01-01 08:01 atv</span><br><span class="line">drwxrwx--- system   cache             2018-11-03 20:10 cache</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="mkdir-dir"><a href="#mkdir-dir" class="headerlink" title="mkdir dir"></a>mkdir dir</h3><p>  创建文件夹<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@generic_x86:/sdcard # mkdir testDir</span><br><span class="line">root@generic_x86:/sdcard # ll</span><br><span class="line">...</span><br><span class="line">drwxrwx--- root     sdcard_r          2019-03-23 06:00 Ringtones</span><br><span class="line">drwxrwx--- root     sdcard_r          2019-08-12 22:54 testDir</span><br><span class="line">root@generic_x86:/sdcard #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="rm-rf-dir"><a href="#rm-rf-dir" class="headerlink" title="rm -rf dir"></a>rm -rf dir</h3><p>  删除文件夹<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@generic_x86:/sdcard # rm -rf testDir/</span><br><span class="line">root@generic_x86:/sdcard # ll test*</span><br><span class="line">test*: No such file or directory</span><br><span class="line">1|root@generic_x86:/sdcard #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="ln-file-link"><a href="#ln-file-link" class="headerlink" title="ln file link"></a>ln file link</h3><p>  创建硬链接，拷贝+同步<br>  硬链接不能指向自身文件系统外的文件，即不能跨硬盘分区(软链接可以)。<br>  硬链接不能指向目录。</p>
<h3 id="ln-s-file-link"><a href="#ln-s-file-link" class="headerlink" title="ln -s file link"></a>ln -s file link</h3><p>  创建软链接，软链接可以类比Windows上的快捷方式</p>
<h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>  显示系统挂载盘<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@generic_x86:/ # df</span><br><span class="line">Filesystem               Size     Used     Free   Blksize</span><br><span class="line">/dev                   757.7M    52.0K   757.6M   4096</span><br><span class="line">/mnt/asec              757.7M     0.0K   757.7M   4096</span><br><span class="line">/mnt/obb               757.7M     0.0K   757.7M   4096</span><br><span class="line">/system                823.3M   594.9M   228.4M   4096</span><br><span class="line">/cache                  61.0M    60.0K    60.9M   4096</span><br><span class="line">/data                  779.3M   299.2M   480.1M   4096</span><br><span class="line">/mnt/media_rw/sdcard   510.0M    54.0K   509.9M   2048</span><br><span class="line">/mnt/secure/asec       510.0M    54.0K   509.9M   2048</span><br><span class="line">/storage/sdcard        510.0M    54.0K   509.9M   2048</span><br><span class="line">root@generic_x86:/ #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="du-sh"><a href="#du-sh" class="headerlink" title="du -sh *"></a>du -sh *</h3><p>  显示当前文件夹下子项大小<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@generic_x86:/sdcard # du -sh *</span><br><span class="line">2.0K	Alarms</span><br><span class="line">22K	Android</span><br><span class="line">2.0K	DCIM</span><br><span class="line">2.0K	Download</span><br><span class="line">2.0K	LOST.DIR</span><br><span class="line">2.0K	Movies</span><br><span class="line">2.0K	Music</span><br><span class="line">2.0K	Notifications</span><br><span class="line">2.0K	Pictures</span><br><span class="line">2.0K	Podcasts</span><br><span class="line">2.0K	Ringtones</span><br><span class="line">2.0K	test</span><br><span class="line">6.0K	testDir</span><br><span class="line">root@generic_x86:/sdcard #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="du-sh-1"><a href="#du-sh-1" class="headerlink" title="du -sh ./"></a>du -sh ./</h3><p>  显示当前文件夹总大小<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@generic_x86:/sdcard # du -sh ./</span><br><span class="line">52K	./</span><br><span class="line">1|root@generic_x86:/sdcard #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>  touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。<br>  若文件不存在，系统会建立一个新的文件。<br>  ls -l 可以显示档案的时间记录。<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@generic_x86:/sdcard/testDir # ll -l</span><br><span class="line">root@generic_x86:/sdcard/testDir # touch testfile</span><br><span class="line">root@generic_x86:/sdcard/testDir # ll -l</span><br><span class="line">-rwxrwx--- root     sdcard_r        0 2019-08-12 23:11 testfile</span><br><span class="line">root@generic_x86:/sdcard/testDir # touch testfile</span><br><span class="line">root@generic_x86:/sdcard/testDir # ll -l</span><br><span class="line">-rwxrwx--- root     sdcard_r        0 2019-08-12 23:12 testfile</span><br><span class="line">root@generic_x86:/sdcard/testDir #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="chmod-777-file-dir"><a href="#chmod-777-file-dir" class="headerlink" title="chmod 777 file/dir"></a>chmod 777 file/dir</h3><p>  修改文件/文件夹读写权限<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@generic_x86:/data # touch testFile</span><br><span class="line">root@generic_x86:/data # ll testFile</span><br><span class="line">-rw-rw-rw- root     root            0 2019-08-12 23:14 testFile</span><br><span class="line">root@generic_x86:/data # chmod 777 testFile</span><br><span class="line">root@generic_x86:/data # ll testFile</span><br><span class="line">-rwxrwxrwx root     root            0 2019-08-12 23:14 testFile</span><br><span class="line">root@generic_x86:/data #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><ul>
<li><p>tar -cvf archive.tar file1<br>压缩</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard # ll test/</span><br><span class="line">-rw-rw---- root     sdcard_r       15 2019-08-13 09:35 testfile</span><br><span class="line">-rw-rw---- root     sdcard_r       15 2019-08-13 11:52 testfileRemote</span><br><span class="line">shell@pineapple:/sdcard # busybox tar -cvf test.tar test</span><br><span class="line">test/</span><br><span class="line">test/testfile</span><br><span class="line">test/testfileRemote</span><br><span class="line">shell@pineapple:/sdcard # ll test.tar</span><br><span class="line">-rw-rw---- root     sdcard_r     3584 2019-08-13 16:07 test.tar</span><br><span class="line">shell@pineapple:/sdcard #</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>tar -xvf archive.tar<br>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard # rm -rf test/</span><br><span class="line">shell@pineapple:/sdcard # ll test*</span><br><span class="line">-rw-rw---- root     sdcard_r     3584 2019-08-13 16:07 test.tar</span><br><span class="line">shell@pineapple:/sdcard # busybox tar -xvf test.tar</span><br><span class="line">test/</span><br><span class="line">test/testfile</span><br><span class="line">test/testfileRemote</span><br><span class="line">shell@pineapple:/sdcard # ll test/</span><br><span class="line">-rw-rw---- root     sdcard_r       15 2019-08-13 09:35 testfile</span><br><span class="line">-rw-rw---- root     sdcard_r       15 2019-08-13 11:52 testfileRemote</span><br><span class="line">shell@pineapple:/sdcard #</span><br></pre></td></tr></tbody></table></figure></div>


</li>
</ul>
<h3 id="busybox-find"><a href="#busybox-find" class="headerlink" title="busybox find"></a>busybox find</h3><ul>
<li><p>busybox find -name tmp<br>  从当前目录搜索文件和目录,指定名称</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # busybox find . -name default</span><br><span class="line">./sys/devices/virtual/bdi/default</span><br><span class="line">./sys/class/bdi/default</span><br><span class="line">./sys/kernel/debug/bdi/default</span><br><span class="line">./proc/sys/net/ipv4/conf/default</span><br><span class="line">./proc/sys/net/ipv4/neigh/default</span><br><span class="line">./proc/sys/net/ipv6/conf/default</span><br><span class="line">./proc/sys/net/ipv6/neigh/default</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>busybox find -name *prop<br>  从当前目录搜索后缀为.prop的文件</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # busybox find -name "*.prop"</span><br><span class="line">./system/build.prop</span><br><span class="line">find: ./proc/1167/task/1378/fd/67: No such file or directory</span><br><span class="line">find: ./proc/1167/task/1399/fd/48: No such file or directory</span><br><span class="line">find: ./proc/5691/fdinfo/34: No such file or directory</span><br><span class="line">./default.prop</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div></li>
<li><p>busybox find -name ‘*.prop’ |  grep ‘build’<br>从当前搜索文件名含字符build</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # busybox find -name "*.prop" | grep "build"</span><br><span class="line">./system/build.prop</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div></li>
<li><p>busybox find -name ‘*.prop’ | busybox xargs grep ‘version’<br>从当前搜索文件名为.prop后缀，且文件内容包含version的文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ #busybox find -name '*.prop' | busybox xargs grep 'version'                         </span><br><span class="line">find: ./proc/1167/task/1368/fd/59: No such file or directory</span><br><span class="line">find: ./proc/1167/task/1375/fd/22: No such file or directory</span><br><span class="line">...</span><br><span class="line">./system/build.prop:ro.build.version.incremental=GD__-18.03.100.20.11.C2P</span><br><span class="line">./system/build.prop:ro.build.version.sdk=22</span><br><span class="line">./system/build.prop:ro.build.version.codename=REL</span><br><span class="line">./system/build.prop:ro.build.version.all_codenames=REL</span><br><span class="line">./system/build.prop:ro.build.version.release=5.1.1</span><br><span class="line">./system/build.prop:ro.build.version.security_patch=2016-03-01</span><br><span class="line">./system/build.prop:ro.build.version.base_os=</span><br><span class="line">./system/build.prop:ro.opengles.version=131072</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="busybox-which-su"><a href="#busybox-which-su" class="headerlink" title="busybox which su"></a>busybox which su</h3><p>显示一个二进制文件或可执行文件的完整路径 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">shell@pineapple:/ $   busybox which su</span><br><span class="line">  /system/xbin/su</span><br><span class="line">  shell@pineapple:/ $</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="pwd-显示当前文件夹路径全路"><a href="#pwd-显示当前文件夹路径全路" class="headerlink" title="pwd 显示当前文件夹路径全路"></a>pwd 显示当前文件夹路径全路</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@generic_x86:/sdcard/testDir # pwd</span><br><span class="line">/sdcard/testDir</span><br><span class="line">root@generic_x86:/sdcard/testDir #</span><br></pre></td></tr></tbody></table></figure></div>


</li>
</ul>
<h3 id="cat-file1"><a href="#cat-file1" class="headerlink" title="cat file1"></a>cat file1</h3><p>  从第一个字节开始正向查看文件的内容<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/system # ll build.prop</span><br><span class="line">-rw-r--r-- root     root         3489 2019-07-10 17:23 build.prop</span><br><span class="line">shell@pineapple:/system # cat build.prop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> begin build properties</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> autogenerated by buildinfo.sh</span></span><br><span class="line">ro.build.id=LMY47V</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-tac-file1"><a href="#busybox-tac-file1" class="headerlink" title="busybox tac file1"></a>busybox tac file1</h3><p>  从最后一行开始反向查看一个文件的内容<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/system # ll build.prop</span><br><span class="line">-rw-r--r-- root     root         3489 2019-07-10 17:23 build.prop</span><br><span class="line">shell@pineapple:/system # busybox tac build.prop</span><br><span class="line">dalvik.vm.stack-trace-file=/data/anr/traces.txt</span><br><span class="line">net.bt.name=Android</span><br><span class="line">......</span><br><span class="line">ro.build.version.incremental=GD__-18.03.100.20.11.C2P</span><br><span class="line">ro.build.display.id=aosp_pineapple-userdebug 5.1.1 LMY47V GD__-18.03.100.20.11.C2P test-keys</span><br><span class="line">ro.build.id=LMY47V</span><br><span class="line"><span class="meta">#</span><span class="bash"> autogenerated by buildinfo.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> begin build properties</span></span><br><span class="line"></span><br><span class="line">shell@pineapple:/system #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-more-file1"><a href="#busybox-more-file1" class="headerlink" title="busybox more file1"></a>busybox more file1</h3><p>   查看一个长文件的内容<br>   </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/system # busybox more build.prop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> begin build properties</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> autogenerated by buildinfo.sh</span></span><br><span class="line">ro.build.id=LMY47V</span><br><span class="line">ro.build.version.incremental=GD__-18.03.100.20.11.C2P</span><br><span class="line">ro.build.version.sdk=22</span><br><span class="line">ro.build.version.codename=REL</span><br><span class="line">ro.build.version.all_codenames=REL</span><br><span class="line">......</span><br><span class="line">ro.build.flavor=aosp_pineapple-userdebug</span><br><span class="line">ro.product.model=MStar Android TV</span><br><span class="line">ro.product.brand=MStar</span><br><span class="line">ro.product.name=aosp_pineapple</span><br><span class="line">--More-- (21% of 3489 bytes)</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-head-2-file1"><a href="#busybox-head-2-file1" class="headerlink" title="busybox head -2 file1"></a>busybox head -2 file1</h3><p>  查看一个文件的前两行<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/system # busybox head -2 build.prop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> begin build properties</span></span><br><span class="line">shell@pineapple:/system #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-tail-2-file1"><a href="#busybox-tail-2-file1" class="headerlink" title="busybox tail -2 file1"></a>busybox tail -2 file1</h3><p>  查看一个文件的最后两行<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/system # busybox tail -2 build.prop</span><br><span class="line">net.bt.name=Android</span><br><span class="line">dalvik.vm.stack-trace-file=/data/anr/traces.txt</span><br><span class="line">shell@pineapple:/system #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-tail-f-data-anr-traces-txt"><a href="#busybox-tail-f-data-anr-traces-txt" class="headerlink" title="busybox tail -f /data/anr/traces.txt"></a>busybox tail -f /data/anr/traces.txt</h3><p>  实时查看被添加到一个文件中的内容<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ $ busybox tail -f /data/anr/traces.txt</span><br><span class="line">  | sysTid=4182 nice=0 cgrp=default</span><br><span class="line">  | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=0 HZ=100</span><br><span class="line">  kernel: (couldn't read /proc/self/task/4182/stack)</span><br><span class="line"></span><br><span class="line">"[HY]YCMedia" prio=5 (not attached)</span><br><span class="line">  | sysTid=4183 nice=0 cgrp=default</span><br><span class="line">  | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=0 HZ=100</span><br><span class="line">  kernel: (couldn't read /proc/self/task/4183/stack)</span><br><span class="line"></span><br><span class="line">----- end 3932 -----</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="echo-aaaaa-gt-file"><a href="#echo-aaaaa-gt-file" class="headerlink" title="echo aaaaa > file"></a>echo aaaaa > file</h3><p>   写入文件内容，覆盖<br>   </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard/test $ echo aaaa > testfile</span><br><span class="line">shell@pineapple:/sdcard/test $ cat testfile</span><br><span class="line">aaaa</span><br><span class="line">shell@pineapple:/sdcard/test $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="echo-bbbb-gt-file"><a href="#echo-bbbb-gt-file" class="headerlink" title="echo bbbb > file"></a>echo bbbb > file</h3><p>  写入文件内容，追加<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard/test $ echo aaaa > testfile</span><br><span class="line">shell@pineapple:/sdcard/test $ cat testfile</span><br><span class="line">aaaa</span><br><span class="line">shell@pineapple:/sdcard/test $ echo bbbb >> testfile</span><br><span class="line">shell@pineapple:/sdcard/test $ cat testfile</span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line">shell@pineapple:/sdcard/test $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-vi-files"><a href="#busybox-vi-files" class="headerlink" title="busybox vi files"></a>busybox vi files</h3><p>  修改文件内容<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard/test $ busybox vi testfile</span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line">cccc</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">shell@pineapple:/sdcard/test $ cat testfile</span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line">cccc</span><br><span class="line">shell@pineapple:/sdcard/test $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h2 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h2><h3 id="busybox-ifconfig"><a href="#busybox-ifconfig" class="headerlink" title="busybox ifconfig"></a>busybox ifconfig</h3>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # busybox ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:30:1B:BA:02:DB</span><br><span class="line">          inet addr:192.168.3.43  Bcast:192.168.3.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::230:1bff:feba:2db/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING ALLMULTI MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:65386 errors:0 dropped:7 overruns:0 frame:0</span><br><span class="line">          TX packets:30638 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:12742381 (12.1 MiB)  TX bytes:7053946 (6.7 MiB)</span><br><span class="line">          Interrupt:209 Base address:0x4000</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:33 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:33 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:33303 (32.5 KiB)  TX bytes:33303 (32.5 KiB)</span><br><span class="line"></span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # ping -c 5 8.8.8.8</span><br><span class="line">PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=2 ttl=51 time=27.8 ms</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=3 ttl=51 time=28.3 ms</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=4 ttl=51 time=27.9 ms</span><br><span class="line">64 bytes from 8.8.8.8: icmp_seq=5 ttl=51 time=26.8 ms</span><br><span class="line"></span><br><span class="line">--- 8.8.8.8 ping statistics ---</span><br><span class="line">5 packets transmitted, 4 received, 20% packet loss, time 4004ms</span><br><span class="line">rtt min/avg/max/mdev = 26.832/27.766/28.399/0.574 ms</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="busybox-traceroute-ip"><a href="#busybox-traceroute-ip" class="headerlink" title="busybox traceroute ip"></a>busybox traceroute ip</h3>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/ # busybox traceroute 8.8.8.8</span><br><span class="line">traceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 38 byte packets</span><br><span class="line">1  192.168.3.1 (192.168.3.1)  2.652 ms  2.069 ms  2.478 ms</span><br><span class="line">2  192.168.1.1 (192.168.1.1)  2.649 ms  2.428 ms  2.709 ms</span><br><span class="line">3  219.140.116.1 (219.140.116.1)  4.015 ms  3.311 ms  8.269 ms</span><br><span class="line">4  111.175.212.21 (111.175.212.21)  7.947 ms  111.175.212.61 (111.175.212.61)  12.815 ms  111.175.209.205 (111.175.209.205)  8.140 ms</span><br><span class="line">5  111.175.209.49 (111.175.209.49)  7.436 ms  7.424 ms  111.175.210.225 (111.175.210.225)  8.159 ms</span><br><span class="line">6  202.97.67.53 (202.97.67.53)  22.661 ms  23.562 ms  25.208 ms</span><br><span class="line">7  202.97.94.138 (202.97.94.138)  19.972 ms  28.593 ms  202.97.94.134 (202.97.94.134)  23.313 ms</span><br><span class="line">8  202.97.94.94 (202.97.94.94)  37.283 ms  202.97.94.90 (202.97.94.90)  43.247 ms  38.987 ms</span><br><span class="line">9  202.97.89.54 (202.97.89.54)  31.696 ms  32.007 ms  31.233 ms</span><br><span class="line">10  202.97.62.214 (202.97.62.214)  30.404 ms  28.171 ms  27.565 ms</span><br><span class="line">11  108.170.241.33 (108.170.241.33)  28.638 ms  108.170.241.1 (108.170.241.1)  28.890 ms  108.170.241.97 (108.170.241.97)  29.114 ms</span><br><span class="line">12  209.85.243.249 (209.85.243.249)  26.962 ms  72.14.239.95 (72.14.239.95)  27.257 ms  72.14.233.169 (72.14.233.169)  24.176 ms</span><br><span class="line">13  8.8.8.8 (8.8.8.8)  27.501 ms  29.182 ms  26.884 ms</span><br><span class="line">shell@pineapple:/ #</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="tcpdump-i-eht0-w-file-cap"><a href="#tcpdump-i-eht0-w-file-cap" class="headerlink" title="tcpdump -i eht0  -w file.cap"></a>tcpdump -i eht0  -w file.cap</h3><p>   监听网卡的网络包，并保存到文件，之后可以用wireshark等软件分析<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard # tcpdum -i eth0 -w eth0.cap</span><br><span class="line">sh: tcpdum: not found</span><br><span class="line">127|shell@pineapple:/sdcard # tcpdump -i eth0 -w eth0.cap</span><br><span class="line">tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">^C375 packets captured</span><br><span class="line">399 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br><span class="line">shell@pineapple:/sdcard # ll eth0.cap</span><br><span class="line">-rw-rw---- root     sdcard_r    54574 2019-08-13 09:40 eth0.cap</span><br><span class="line">shell@pineapple:/sdcard #</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-tftp"><a href="#busybox-tftp" class="headerlink" title="busybox tftp"></a>busybox tftp</h3><p>  文件传输<br>  mac建议安装<a href="http://ww2.unime.it/flr/tftpserver/" target="_blank" rel="noopener">TFTP Server</a><br>  windows建议安装 <a href="http://tftpd32.jounin.net/tftpd32_download.html" target="_blank" rel="noopener">Tftp32</a><br>  上传文件 busybox tftp -pl remoteip<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard/test $ busybox tftp -pl testfile 192.168.3.41</span><br><span class="line">testfile             100% |*******************************|    15   0:00:00 ETA</span><br><span class="line">shell@pineapple:/sdcard/test $</span><br></pre></td></tr></tbody></table></figure></div><br>  下载文件<br>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard/test $ busybox tftp -gr testfileRemote 192.168.3.41</span><br><span class="line">testfileRemote       100% |*******************************|    15   0:00:00 ETA</span><br><span class="line">shell@pineapple:/sdcard/test $ ll</span><br><span class="line">-rw-rw---- root     sdcard_r       15 2019-08-13 09:35 testfile</span><br><span class="line">-rw-rw---- root     sdcard_r       15 2019-08-13 11:52 testfileRemote</span><br><span class="line">shell@pineapple:/sdcard/test $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-wget"><a href="#busybox-wget" class="headerlink" title="busybox wget"></a>busybox wget</h3><p>  下载网络文件<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard $ busybox wget http://192.168.3.5/index.html.en</span><br><span class="line">Connecting to 192.168.3.5 (192.168.3.5:80)</span><br><span class="line">index.html.en        100% |*******************************|    45   0:00:00 ETA</span><br><span class="line">shell@pineapple:/sdcard $ ll index.html.en</span><br><span class="line">-rw-rw---- root     sdcard_r       45 2019-08-13 10:40 index.html.en</span><br><span class="line">shell@pineapple:/sdcard $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h3 id="busybox-md5sum"><a href="#busybox-md5sum" class="headerlink" title="busybox md5sum"></a>busybox md5sum</h3><p>  查看文件md5值<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">shell@pineapple:/sdcard $ busybox md5sum index.html.en</span><br><span class="line">5388f60d7695cb57b87c799ee62d20b2  index.html.en</span><br><span class="line">shell@pineapple:/sdcard $</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><h3 id="生成普通签名文件"><a href="#生成普通签名文件" class="headerlink" title="生成普通签名文件"></a>生成普通签名文件</h3>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:Work laird$ keytool -genkey -alias test -keypass 123456 -keyalg RSA -keysize 2048 -validity 36500 -keystore test.keystore -storepass 123456</span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  laird.li</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  laird.li</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  lairdli.top</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  wh</span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  hb</span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  ch</span><br><span class="line">CN=laird.li, OU=laird.li, O=lairdli.top, L=wh, ST=hb, C=ch是否正确?</span><br><span class="line">  [否]:  y</span><br><span class="line"></span><br><span class="line">Warning:</span><br><span class="line">JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore test.keystore -destkeystore test.keystore -deststoretype pkcs12" 迁移到行业标准格式 PKCS12。</span><br><span class="line">Laird-MacBook-Pro:Work laird$ ll tes*</span><br><span class="line">-rw-r--r--  1 laird  staff  2226  8 12 23:51 test.keystore</span><br><span class="line">Laird-MacBook-Pro:Work laird$</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="查看签名文件信息"><a href="#查看签名文件信息" class="headerlink" title="查看签名文件信息"></a>查看签名文件信息</h3>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:Work laird$ keytool -list -v -keystore test.keystore -storepass 123456</span><br><span class="line">密钥库类型: jks</span><br><span class="line">密钥库提供方: SUN</span><br><span class="line"></span><br><span class="line">您的密钥库包含 1 个条目</span><br><span class="line"></span><br><span class="line">别名: test</span><br><span class="line">创建日期: 2019-8-12</span><br><span class="line">条目类型: PrivateKeyEntry</span><br><span class="line">证书链长度: 1</span><br><span class="line">证书[1]:</span><br><span class="line">所有者: CN=laird.li, OU=laird.li, O=lairdli.top, L=wh, ST=hb, C=ch</span><br><span class="line">发布者: CN=laird.li, OU=laird.li, O=lairdli.top, L=wh, ST=hb, C=ch</span><br><span class="line">序列号: 457b2631</span><br><span class="line">有效期为 Mon Aug 12 23:51:21 CST 2019 至 Wed Jul 19 23:51:21 CST 2119</span><br><span class="line">证书指纹:</span><br><span class="line">  MD5:  DD:9B:06:2B:EE:25:44:22:97:75:99:C0:DC:A6:24:67</span><br><span class="line">  SHA1: 93:C5:28:01:EA:43:2C:5E:21:5B:4B:E6:A8:31:C9:5B:03:CC:20:82</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Warning:</span><br><span class="line">JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore test.keystore -destkeystore test.keystore -deststoretype pkcs12" 迁移到行业标准格式 PKCS12。</span><br><span class="line">Laird-MacBook-Pro:Work laird$</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="查看apk签名信息"><a href="#查看apk签名信息" class="headerlink" title="查看apk签名信息"></a>查看apk签名信息</h3>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:debug laird$ keytool -list -printcert -jarfile app-debug.apk</span><br><span class="line">签名者 #1:</span><br><span class="line"></span><br><span class="line">签名:</span><br><span class="line"></span><br><span class="line">所有者: C=US, O=Android, CN=Android Debug</span><br><span class="line">发布者: C=US, O=Android, CN=Android Debug</span><br><span class="line">序列号: 1</span><br><span class="line">有效期为 Mon Mar 18 22:00:17 CST 2019 至 Wed Mar 10 22:00:17 CST 2049</span><br><span class="line">证书指纹:</span><br><span class="line">  MD5:  91:AB:FF:E4:5B:C4:7B:D1:4F:CC:B9:5D:44:A6:73:DD</span><br><span class="line">  SHA1: CD:30:F3:C9:07:CE:AE:77:71:52:24:3F:65:20:FA:51:7D:85:2E:75</span><br><span class="line">  SHA256: F9:D2:32:1C:00:0C:59:F4:43:20:27:1F:F7:C2:9A:12:F6:0C:C5:02:C4:B6:49:B6:0D:42:85:7B:80:A4:19:4B</span><br><span class="line">签名算法名称: SHA1withRSA</span><br><span class="line">主体公共密钥算法: 1024 位 RSA 密钥</span><br><span class="line">版本: 1</span><br><span class="line"></span><br><span class="line">Laird-MacBook-Pro:debug laird$</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="生成系统签名文件"><a href="#生成系统签名文件" class="headerlink" title="生成系统签名文件"></a>生成系统签名文件</h3><p>  Android系统签名证书的目录是“build/target/product/security”<br>  找到系统的 platform.pk8 和 platform.x509.pem 放在 keytool-importkeypair目录下执行</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ keytool-importkeypair -k platform.keystore -p android -pk8 platform.pk8 -cert platform.x509.pem -alias platform</span><br></pre></td></tr></tbody></table></figure></div>
<p>  然后在androidstudio 编译脚本引用<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">signingConfigs {</span><br><span class="line">      releaseConfig {</span><br><span class="line">          keyAlias 'platform'</span><br><span class="line">          keyPassword 'android'</span><br><span class="line">          storeFile file("${rootDir}"+'/platform.keystore')</span><br><span class="line">          storePassword 'android'</span><br><span class="line">        }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h1 id="web调试"><a href="#web调试" class="headerlink" title="web调试"></a>web调试</h1><h3 id="mac下apache服务"><a href="#mac下apache服务" class="headerlink" title="mac下apache服务"></a>mac下apache服务</h3><ol>
<li><p>启动或者关闭服务</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ sudo apachectl start</span><br><span class="line">Password:</span><br><span class="line">/System/Library/LaunchDaemons/org.apache.httpd.plist: service already loaded</span><br><span class="line">Laird-MacBook-Pro:~ laird$ sudo apachectl stop</span><br><span class="line">Laird-MacBook-Pro:~ laird$</span><br></pre></td></tr></tbody></table></figure></div></li>
<li><p>默认网站目录<br> Mac下apache默认的网站路径是/Library/WebServer/Documents</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Laird-MacBook-Pro:~ laird$ cd /Library/WebServer/Documents</span><br><span class="line">Laird-MacBook-Pro:Documents laird$ pwd</span><br><span class="line">/Library/WebServer/Documents</span><br><span class="line">Laird-MacBook-Pro:Documents laird$</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="windows下web服务"><a href="#windows下web服务" class="headerlink" title="windows下web服务"></a>windows下web服务</h3><p>建议下载轻量级web服务<a href="https://aprelium.com/" target="_blank" rel="noopener">Abyss Web Serve</a>或者<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat</a></p>
<h1 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h1><p>本文涉及到的工具软件整理如下：</p>
<ul>
<li>mac推荐命令行终端-<a href="https://www.iterm2.com/" target="_blank" rel="noopener">iterm</a> </li>
<li>windows推荐命令行终端-<a href="https://cmder.net/" target="_blank" rel="noopener">cmder</a></li>
<li>adb工具 sdk目录下sdk/platform-tools/adb 或者单独下载-<a href="http://adbshell.com/downloads/" target="_blank" rel="noopener">adbshell</a></li>
<li>平台签名转换工具-<a href="https://github.com/lairdli/keytool-importkeypair" target="_blank" rel="noopener">keytool-importkeypair</a> </li>
<li>网络包分析-<a href="https://www.wireshark.org/" target="_blank" rel="noopener">WireShark</a></li>
</ul>
</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Command</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记-人性的弱点,如何交盆友</title>
    <url>/2019/08/11/Win-Friends/</url>
    <content><![CDATA[<html><head></head><body><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p> 最近看完了卡纳基的<strong><em>《人性的弱点》</em></strong>，读之前以为是写人性的弱点，其实完全两码事，其实英文题目最合适内容—<strong><em>《How to win friends and influence people》</em></strong>（如何赢得朋友，影响人们） ,不知为何如此翻译？可能博人眼球，亦或酒香也怕巷子深！</p>
<p>读完本书最大的感受，其实就是以他人为中心，换位思考，当然这在大部分社交中是适合的，但是在实际应用中，特别是工作中，可能就不是那么回事，你越妥协，别人反而可能越觉得你是软柿子，谁见了都想捏！</p>
<p>但总体来说，该书总结的与人很相处的很多行为准则，还是非常值得点赞的。</p>
<a id="more"></a>

<h4 id="与人相处的基本技巧"><a href="#与人相处的基本技巧" class="headerlink" title="与人相处的基本技巧"></a>与人相处的基本技巧</h4><ul>
<li>如要采蜜，勿踢蜂房<blockquote>
<ol>
<li>批评和责备他人是没有意义的，因为那只会让人在心理上增加一层防护，并且被批评的人也会因为受到批评而竭力的为自己的错误辩护。</li>
<li>批评与责备他人也是危险的。因为它会伤害到一个人的自尊，并因此激发他对你的反抗。</li>
<li>我们要学会与他人相处时，不要抱怨，责怪他人，更不能轻易地批评与斥责他人</li>
</ol>
</blockquote>
</li>
<li>与人相处的大秘诀<blockquote>
<ol>
<li>成为重要人物的欲望是人类天性中最深切的冲动</li>
<li>不要奉承或者接受低贱的赞美</li>
<li>少考虑自己需要的东西和取得的成绩，多想想别人身上的优点，停止阿谀奉承，发自内心的去赞美别人。你对别人的赞美，他们会牢记在心，终生难忘，就算你把这样的话抛在脑后，他们还会念念不忘。</li>
</ol>
</blockquote>
</li>
<li>怎样左右逢源<blockquote>
<ol>
<li>永远把自己放在别人的位置上思考事情，知道别人的意愿和目标，以此做出决定。</li>
<li>人性中最大的渴望就是展示自己。</li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="使人喜欢你的六种方法"><a href="#使人喜欢你的六种方法" class="headerlink" title="使人喜欢你的六种方法"></a>使人喜欢你的六种方法</h4><blockquote>
<ol>
<li>发自内心地对他人以及他所从事的事感兴趣。</li>
<li>微笑</li>
<li>尽可能记住生活中你接触到的每一个人的名字</li>
<li>要善于安静的倾听，鼓励别人多多谈论他们自己</li>
<li>在与他人交谈时，多和他谈论他感兴趣的事</li>
<li>让他人感觉到自己的重要性，并且你还要做的很真诚</li>
</ol>
</blockquote>
<h4 id="在生活中赢得他人同意的十二项规则"><a href="#在生活中赢得他人同意的十二项规则" class="headerlink" title="在生活中赢得他人同意的十二项规则"></a>在生活中赢得他人同意的十二项规则</h4><blockquote>
<ol>
<li>在发生争执的时候，唯一能够让你获得最大利益的方式是避免与他人争执。</li>
<li>尊重他人的意见，永远不要指责对方”你错了“</li>
<li>如果你放了错误，就要迅速而又认真地承认自己错误了</li>
<li>以友好善良的方式与人交往</li>
<li>想方设法让对方马上说”是，是“</li>
<li>尽量多的给对方说话的机会</li>
<li>心态自然地让对方以为你的建议是他的意愿</li>
<li>在处理任何一件事情时，要真诚地以他人的立场看问题</li>
<li>同情对方的意念和欲望</li>
<li>激起对方高尚的动机</li>
<li>让你的想法戏剧化</li>
<li>提出一项挑战</li>
</ol>
</blockquote>
<h4 id="让人同意你的九种方法"><a href="#让人同意你的九种方法" class="headerlink" title="让人同意你的九种方法"></a>让人同意你的九种方法</h4><blockquote>
<ol>
<li>用发自内心的真诚来赞赏他人的成就作为开始</li>
<li>必须避免正面批评</li>
<li>先谈论自己的错误，再谈论别人的错误</li>
<li>别用命令的口吻指示别人</li>
<li>要照顾到别人的面子</li>
<li>赞美别人的每一次进步，哪怕是最微小的进步</li>
<li>赋予别人一个美好的名誉</li>
<li>鼓励可以让你更容易改正错误，也让别人更容易达到你的期望</li>
<li>永远让别人乐意按照你富有建议性的话去做640be813)</li>
</ol>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
        <tag>Friends</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记-时间管理大师</title>
    <url>/2019/08/05/Time-Manager/</url>
    <content><![CDATA[<html><head></head><body><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>曾经有人这样描述过时间：</p>
<blockquote>
<p>最长的莫过于时间，因为它永无穷尽；<br>最短的也莫过于时间，因为人们所有的计划都来不及完成；<br>在等待的人，时间是最慢的；<br>在作乐的人，时间是最快的；<br>它可以扩展到无穷大，也可以分割到无穷小。<br>当时谁都不加重视，过后谁都表示惋惜；<br>没有时间，什么事都做不成；<br>不值得后世纪念的，它都令人忘怀；<br>伟大的，它都使它们永生不朽。</p>
</blockquote>
<p>时间是如此重要，我们就应该严格地遵守时间。严守时间是做人的美德，也是成功的保证。<br>本文收集整理了一些关于时间管理的方法和工具。<br><strong><em>珍惜好时光，勿把光阴度。</em></strong><br>以此共勉。</p>
<a id="more"></a>

<h4 id="划分任务的优先级，不要把’急切’当作’重要’。四象限法则。"><a href="#划分任务的优先级，不要把’急切’当作’重要’。四象限法则。" class="headerlink" title="划分任务的优先级，不要把’急切’当作’重要’。四象限法则。"></a>划分任务的优先级，不要把’急切’当作’重要’。四象限法则。</h4><blockquote>
<p>你的时间有限，不可能做所有事。最重要的事，应该首先做。<br>一个有用的技巧是，将所有任务按照”重要性”和”紧急性”两个维度，分成四个象限。<br>既紧急又重要、重要但不紧急、紧急但不重要、既不紧急也不重要.<br>第一象限优先级最高，第四象限优先级最低</p>
</blockquote>
<h4 id="经常做回顾或PDCA循环"><a href="#经常做回顾或PDCA循环" class="headerlink" title="经常做回顾或PDCA循环"></a>经常做回顾或PDCA循环</h4><blockquote>
<p>P（Plan）确定方针、目标和活动计划。<br>D（Do）  实现计划中的内容。<br>C（Check）总结执行计划的结果，找出问题。<br>A（Action）对总结检查的结果进行处理。</p>
</blockquote>
<h4 id="目标的SMART原则"><a href="#目标的SMART原则" class="headerlink" title="目标的SMART原则"></a>目标的SMART原则</h4><blockquote>
<p>具体的(specific),<br>可衡量的(measurable),<br>可达到的(attainable),<br>相关的(relevant),<br>和基于时间的(time-based)</p>
</blockquote>
<h4 id="番茄工作法"><a href="#番茄工作法" class="headerlink" title="番茄工作法"></a>番茄工作法</h4><blockquote>
<p>25分钟工作+5分钟休息</p>
</blockquote>
<h4 id="Write原则。好记性不如烂笔头"><a href="#Write原则。好记性不如烂笔头" class="headerlink" title="Write原则。好记性不如烂笔头"></a>Write原则。好记性不如烂笔头</h4><blockquote>
<p>不要轻信自己可以用脑子把每件事情都记住，而且事件清单也会给你紧迫感和成就感。</p>
</blockquote>
<h4 id="进程切换非常昂贵，避免多任务，保持单进程"><a href="#进程切换非常昂贵，避免多任务，保持单进程" class="headerlink" title="进程切换非常昂贵，避免多任务，保持单进程"></a>进程切换非常昂贵，避免多任务，保持单进程</h4><blockquote>
<p>不要同时做多件事，结果可能都没做好，还拖长了工作时间。</p>
</blockquote>
<h4 id="不要同时做多件事，结果可能都没做好，还拖长了工作时间"><a href="#不要同时做多件事，结果可能都没做好，还拖长了工作时间" class="headerlink" title="不要同时做多件事，结果可能都没做好，还拖长了工作时间"></a>不要同时做多件事，结果可能都没做好，还拖长了工作时间</h4><blockquote>
<p>一个人能够集中注意力的时间，是有限的。<br>一般来说，高效工作只能持续四个小时，其余时间就都是低效工作了。</p>
</blockquote>
<h4 id="起床后，不要查看邮件和微信"><a href="#起床后，不要查看邮件和微信" class="headerlink" title="起床后，不要查看邮件和微信"></a>起床后，不要查看邮件和微信</h4><blockquote>
<p>早晨精力最充沛，消耗在邮件和微信就太可惜了，应该用来做更重要的事。<br>而且，邮件代表对别人优先级高，不等于对你优先级高。<br>你的时间到底属于谁？你自己，还是某个给你写信的人？</p>
</blockquote>
<h4 id="避免开会，因为人类已知的最浪费时间的事情，就是开会"><a href="#避免开会，因为人类已知的最浪费时间的事情，就是开会" class="headerlink" title="避免开会，因为人类已知的最浪费时间的事情，就是开会"></a>避免开会，因为人类已知的最浪费时间的事情，就是开会</h4><blockquote>
<p>越大的公司，越无法避免开会。但至少不要参加与你无关的会。<br>站着开会，也许是一个缩短会议时间的好办法。</p>
</blockquote>
<h4 id="早晨4点起床，到了中午，你就完成了一天的任务"><a href="#早晨4点起床，到了中午，你就完成了一天的任务" class="headerlink" title="早晨4点起床，到了中午，你就完成了一天的任务"></a>早晨4点起床，到了中午，你就完成了一天的任务</h4><blockquote>
<p>早晨4点起床开始工作，你会发现每天的时间多出了好多。<br>有个日本人写了一本书《四点起床》，就是讲这个观点。</p>
</blockquote>
<h4 id="你没空时不会做的事情，有空了也不会做"><a href="#你没空时不会做的事情，有空了也不会做" class="headerlink" title="你没空时不会做的事情，有空了也不会做"></a>你没空时不会做的事情，有空了也不会做</h4><blockquote>
<p>世上并没有拖延症，只是不想做而已。<br>如果可能，应该尽早放弃你没有意愿去做的那些事。<br>而那些没有时间也会去做的事，才是你应该全力以赴的人生方向。</p>
</blockquote>
<h4 id="决定不做什么和决定做什么，同样重要"><a href="#决定不做什么和决定做什么，同样重要" class="headerlink" title="决定不做什么和决定做什么，同样重要"></a>决定不做什么和决定做什么，同样重要</h4><blockquote>
<p>人的时间、精力、注意力都是具有排他性的珍贵资源。<br>每往生活里多安排一件事，我们都需要付出机会成本。<br>决定不做什么和决定做什么，同样重要</p>
</blockquote>
<h4 id="时间管理工具（软件、APP）"><a href="#时间管理工具（软件、APP）" class="headerlink" title="时间管理工具（软件、APP）"></a>时间管理工具（软件、APP）</h4><blockquote>
<ul>
<li>电脑软件：OmniFocus、桌面便签、印象笔记、<br>OneNote、OutLook、MindManager、google calendar、Trello……</li>
<li>手机APP：疯狂番茄、aTimeLogger2、Doit.im、TickTick、系统便签、<br>Pomotodo、滴答清单、奇妙清单、爱今天、24Pi、开机时光、Forest、Any.do……</li>
<li>其他：纸、笔、纸质笔记本……</li>
</ul>
</blockquote>
<h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><blockquote>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/05/time-management.html" target="_blank" rel="noopener">时间管理的七句话</a></li>
<li><a href="https://www.jianshu.com/p/def3640be813" target="_blank" rel="noopener">主题阅读——时间管理的50大原则</a></li>
</ul>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
        <tag>Time</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-TV电视/机顶盒相关技术点梳理</title>
    <url>/2019/07/09/Android-Tv/</url>
    <content><![CDATA[<html><head></head><body><p>本文总结Android-TV开发过程中，常见的基础知识点，主要分为TV-UI,IPTV,OTT,DVB,TVOS,DEBUG等几大模块展开。适用于常见盒子，电视，投影仪等TV开发。</p>
<h3 id="MindMap"><a href="#MindMap" class="headerlink" title="MindMap"></a>MindMap</h3><p>开局一张图，直接上脑图</p>
<p><a href="https://s2.ax1x.com/2020/03/07/3jOC9K.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://s2.ax1x.com/2020/03/07/3jOC9K.png" class="lazyload"></a></p>
<a id="more"></a>

<h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p>Android TV 界面开发有别与传统的移动手机端开发，TV端的交互主要是有用户遥控器操作完成，因而在TV上按键和焦点的处理显得尤为重要，其次TV端的输出显示媒介主要是电视显示屏，不同的电视所能支持的输入显示分辨率也不一样，因而分辨率的适配也是TV界面开发需要考虑的一点，除此之外TV界面的设计也与手机上的小屏显示不一样，由于是大屏显示，对UI的设计需更加偏平话，便捷化。</p>
<blockquote>
<ul>
<li>焦点  TV上焦点处理</li>
<li>按键  可以了解下Android View事件分发流程，针对具体的业务进行事件分发，拦截处理</li>
<li>屏幕适配  TV上屏幕适配只需适配常见的720p 1080p 常见的几种分辨率即可。</li>
<li>播放器 TV上播放器一般分为硬件软件，如果定制开发，建议硬解，其他情况可以考虑ijkplayer等</li>
<li>UI组件 TV上常见的的控件ListView GridView RecycleView TabLayout ViewPager ScorllView等</li>
</ul>
</blockquote>
<h3 id="IPTV"><a href="#IPTV" class="headerlink" title="IPTV"></a>IPTV</h3><p>IPTV概念的普及，国内主要靠电信，联通，移动，广电四大宽带运营商。IPTV主要特点如下：</p>
<blockquote>
<ul>
<li>基于城域网传输</li>
<li>主要面向电视等大屏终端输出</li>
<li>内容来源主要为牌照商</li>
</ul>
</blockquote>
<h3 id="OTT"><a href="#OTT" class="headerlink" title="OTT"></a>OTT</h3><p>OTT的概率，国内主要靠互联网行业推动，类似小米/乐视电视，盒子，创维，康佳，海信等智能电视。OTT主要特点如下：</p>
<blockquote>
<ul>
<li>基于互联网传送</li>
<li>除了面向电视等终端输出外，还有手机，pad等，即所谓的“多屏互动”。</li>
<li>内容主要来源于牌照商，视频网内容（有版权）+其他</li>
</ul>
</blockquote>
<h3 id="DVB"><a href="#DVB" class="headerlink" title="DVB"></a>DVB</h3><p>DVB的概念，存在时间最早，即传统的广电业务。DVB系统按照信号传播的顺序可以分成前端系统，传输系统和终端系统。其中前端系统一般位于节目生产部门（例如电视台等部门），而终端系统一般用户设备中（例如机顶盒）</p>
<h4 id="传输标准"><a href="#传输标准" class="headerlink" title="传输标准"></a>传输标准</h4><p>区别于传送方式的不同，DVB的通用国际标准又可以分为以下：</p>
<blockquote>
<p>DVB-S,数字卫星电视系统，即通常山区里面的“户户通”小锅。</p>
<p>DVB-T,数字地面电视广播系统,即通常区域电视塔发射出来的信号，国内标准对应为DTMB</p>
<p>DVB-C,数字有线电视系统，即通常通过Cable线传输信号</p>
</blockquote>
<h4 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h4><p>DVB标准中描述的系统根据所属的层次不同从上层到底层可以分为：音视频编码层，服务信息层，基带传输层，信道编码层，射频层。对于Android开发而言，主要涉及的为服务信息层。服务信息层主要分为：</p>
<blockquote>
<ul>
<li>PSI 节目引导信息</li>
<li>SI 业务信息</li>
</ul>
</blockquote>
<h4 id="PSI"><a href="#PSI" class="headerlink" title="PSI"></a>PSI</h4><p>PSI信息由节目关联表PAT、条件接收表CAT、节目映射表PMT和网络信息表NIT组成，这些表会被插入到TS流中。 PSI信息是对单一TS流的描述，它是TS流的引导信息；PSI信息指定了如何从一个携带多个节目的传输流中找到指定的节目。 下面给出的是节目引导信息（或称节目特定信息，PSI）的四个表结构</p>
<blockquote>
<ul>
<li>PAT节目关联表   将节目号码和节目映射表PID相关联，是获取数据的开始</li>
<li>PMT节目映射表  指定一个或多个节目的PID</li>
<li>CAT条件接收表 将一个或多个专用EMM流分别与唯一的PID相关联</li>
<li>NIT网络信息表  描述整个网络，如多少个TS流、频点和调制方式等信息</li>
</ul>
</blockquote>
<h4 id="SI"><a href="#SI" class="headerlink" title="SI"></a>SI</h4><p>PSI只提供了单个TS流的信息，使接收机能够对单个TS流中的不同节目进行解码； 但是，它不能提供多个TS流的相关业务，也不能提供节目的类型、节目名称、开始时间、节目简介等信息。 因此，DVB对PSI进行了扩展，提供了其他不同类型的表，形成了SI。</p>
<p>SI定义的表，并不需要全部传输， 其中，SDT、EIT和TDT是必须传输的； 而又以SDT和EIT最为重要，利用这2个表可以构成功能不同的EPG， 如提供节目附加信息、节目分类、节目预定和家长分级控制等。</p>
<p>S 业务I信息表分为以下几类：</p>
<blockquote>
<ul>
<li>SDT业务描述表   SDT描述了业务内容及信息，连接了NIT、EIT和PMT（PSI）</li>
<li>BAT业务群关联表  BAT将网络中所有的业务分成了多个业务群，以此界定用户。</li>
<li>EIT事件信息表  EIT按时间顺序提供每一个业务所包含的事件信息</li>
<li>RST运行状态表</li>
<li>TDT事件信息表 TDT为时间和日期表（Time&Date Table），它仅传送UTC时间和日期信息。</li>
<li>TOT事件偏移表  TOT表提供了UTC时间和日期信息，以及和本地时间的时差</li>
<li>ST填充表</li>
<li>SIT选择信息表</li>
<li>DIT间断信息表</li>
</ul>
</blockquote>
<h4 id="SEARCH"><a href="#SEARCH" class="headerlink" title="SEARCH"></a>SEARCH</h4><p>DVB的搜台从用户角度来说，一般可以分为自动搜台，全频点搜台，手动搜台。其中手动搜台实质是单频点搜台，自动搜台是检索到ts流里面的频点信息后，还是回到单频点搜台，全频点搜台一般是固定了频率的数组，依次扫描单频点。</p>
<p>机顶盒搜台的实质是从TS流中获取并存储每套节目的音视频PID值和构建出电子节目节目指南。</p>
<p>以下总结三种搜台实现流程：</p>
<blockquote>
<p>①：主频点锁频->NIT获取ServiceList ->获取SDT </p>
<p>机顶盒软件开发厂商会在机顶盒内设定一个初始频点（MainFrenquency）.或称主频点,机顶盒可以根据这个主频点的物理参数,如频点.符号率,和调制方式,去锁定此频点.如某机顶盒设置506MHZ作为数字节目的承载主频点，获取NIT（Network Information Table），NIT表由以下两个描述：1.Cable Delivery System Descriptor，这个描述主要包含了频点，符号率，调制参数等信息；2.ServiceList Descriptor，这个描述主要包含当前节目信息的描述，通过NIT表获取ServiceList，进而获得SDT（Service Descriptor Table）表，获取SDT.依靠SDT.机顶盒可以知道频道名,频道类型节目开始时间,节目名称,节目长度,节目分类等信息,通过系统的BAT（业务群关联表）过滤节目信息，可以构建出EPG应用的频道列表.将播放节目和业务名称关联起来显示于节目列表中，最后将新的节目信息写入E2PROM之类的非易失存储介质中，开机自动读取这个存储器中的数据。E2PROM之类的非易失存储介质中，开机自动读取这个存储器中的数据。至此机顶盒的节目搜索工作算是完成。</p>
<p>②：主频点锁频->PAT获取->PMT获取</p>
<p>机顶盒找到主频点获取PAT表。PAT(Program Association Table)表是不加密的。PAT是一个传输流所有节目的总入口点.每路TS流都有一个PAT和一个PMT,但是最后合成的TS流中只有一个PAT和与相对应的总的多个PMT(Program Map Table),通过这两个表的信息进而获取搜取的节目信息，并将节目信息写入写入E2PROM之类的非易失存储介质中，开机自动读取这个存储器中的数据。</p>
<p>③：间隔跨频点锁频->获取频点的节目信息。</p>
<p>全频点搜台方式：通过设置的最低频点和最高频点，机顶盒从最低频点，一般系统最低频点为几十MHz，然后每增长8M，依次搜台到最高频点，搜所到这一频点的节目信息，便写入某一特定的存储空间，最后写入E2PROM之类的非易失存储介质中，</p>
</blockquote>
<h4 id="PLAY"><a href="#PLAY" class="headerlink" title="PLAY"></a>PLAY</h4><p>播放主要分为大屏播放以及画中画播放，一直搞不懂为啥还要有画中画这种业务场景的需求。画中画一般需要双demux支持。</p>
<p>dvb的播放流程与传统的播放器调用有所差别，一般需要底层，jni层封装单独的播放器接口调用。</p>
<p>dvb播放需传入频点信息，音视频pid,以及音视频类型等。</p>
<h3 id="TVOS"><a href="#TVOS" class="headerlink" title="TVOS"></a>TVOS</h3><p>先看下官方简介-NGB TVOS，全称Next Generation Broadcasting Network TVOS，是中华人民共和国国家新闻出版广电总局科技司带头研发的基于Linux和安卓系统的一套应用于网络电视的操作系统。其开发者自称“兼顾现有操作系统的技术，比如Linux、安卓”，并增加信息安全模块，加强用户的信息安全保障，是专门针对电视终端的操作系统。</p>
<p>根据以上描述，结合NGB相关规范，不难看出，TVOS其实还是基于Android系统开发改造，主要是通用规范了中间层接口规范，为硬件软件厂家集成通用接口。</p>
<p>一套完整的TVOS系统，基本集合了DVB+IPTV的业务功能。TVOS应用层面基本覆盖如下几个方面</p>
<blockquote>
<ul>
<li>桌面   一般支持动态配置更新</li>
<li>直播  分为DVB直播（需传统广电Cable线支持），IPTV直播（http或者udp）</li>
<li>回看 目前主要是IPTV回看，走http</li>
<li>时移 目前主要是IPTV时移，走http，也有部分rtsp</li>
<li>点播 目前主要是IPTV回看，走http，也有部分rtsp</li>
<li>多屏互动 主要通过DLNA,AIRLPAY等集成，也有部分通过局域网socket实现或者组播实现</li>
<li>设置  定制化设置，主要包含网络设置，图像设置，系统设置，其他设置等</li>
<li>本地媒体 主要提供外置usb或者sdcard多媒体文件浏览播放，或者apk安装等</li>
<li>应用管理 主要提供本地应用管理以及远程应用推荐，升级等</li>
<li>系统升级 主要提供系统ROM升级，分IP形式升级以及Cable形式升级</li>
<li>消息管理 主要提供前端消息下发，终端消息分发，上报等</li>
<li>广告管理 主要提供前端广告下发，终端广告分发等，包含IP双向广告，以及Cable单向广告</li>
<li>终端管理 主要提供远程运维，远程升级等，一般采用tr069,mqtt,xmpp等协议</li>
<li>数据采集 主要进行用户行为分析，需终端应用埋点集成上报数据，前端进行大数据分析，一般采用mqtt,xmpp等</li>
</ul>
</blockquote>
<h3 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h3><p>TV端的开发调试工作，与手机端也有些差异，TV端调试方式大致如下：</p>
<blockquote>
<ul>
<li><p>AndoroidStudio 调试 ，可以直接debug</p>
</li>
<li><p>adb命令行，Linux常用命令</p>
</li>
<li><p>串口工具，需拆盒子</p>
</li>
<li><p>Tftp  文件传输</p>
</li>
<li><p>系统签名 ，root ,remout等</p>
</li>
<li><p>stetho ,可在谷歌浏览器远程查看数据库，sp，文件等信息。</p>
</li>
<li><p>Android-Debug-Database ，浏览器在线插件数据库</p>
</li>
</ul>
</blockquote>
<h3 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h3><blockquote>
<ul>
<li><a href="https://developer.android.google.cn/tv/" target="_blank" rel="noopener">Android Developer TV</a></li>
<li><a href="https://gitee.com/kumei" target="_blank" rel="noopener">Android TV开源社区</a></li>
<li><a href="https://zhuanlan.zhihu.com/fuqiang" target="_blank" rel="noopener">Android TV开发探索-知乎专栏</a></li>
<li><a href="https://blog.csdn.net/leixiaohua1020/article/details/43882921" target="_blank" rel="noopener">DVB数字电视系统简介</a></li>
<li><a href="https://www.dvb.org/standards" target="_blank" rel="noopener">DVB标准</a></li>
<li><a href="https://www.onelib.biz/blog/stb" target="_blank" rel="noopener">PSI/SI智库</a></li>
</ul>
</blockquote>
<h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><blockquote>
<ul>
<li><a href="https://lairdli.top/2018/05/25/Android-Book-Recomendations/">Android 学习书籍推荐</a></li>
<li><a href="https://lairdli.top/2019/02/25/Android-3rd-Libs/">Android 常用第三方库整理</a></li>
<li><a href="https://lairdli.top/2019/01/30/Android-Journey/">Android 知识点脑图整理</a></li>
<li><a href="https://lairdli.top/2019/05/19/Android-RoadMap/">Android 路线图</a></li>
<li><a href="https://lairdli.top/2019/06/01/Android-NDK-RoadMap/">Android NDK知识脑图整理</a></li>
<li><a href="https://lairdli.top/2019/06/09/Android-C-RoadMap/">Andorid C知识脑图整理</a></li>
<li><a href="https://lairdli.top/2019/06/18/Android-Helper/">Android Helper 软件开发工具集</a></li>
</ul>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Tv</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tv</tag>
        <tag>Tvos</tag>
      </tags>
  </entry>
  <entry>
    <title>部门协作-版本管理工具Git要点梳理</title>
    <url>/2019/07/09/Vcs-Git/</url>
    <content><![CDATA[<html><head></head><body><p>本文总结版本控制工具git在日常开发工作常用到的一些命令，以及一些常用的场景应用，比如分支管理，远程管理，合并冲突处理等。后续持续更新中。</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>下面的图片很清晰的说明来一些命令和各个区域的关系 </p>
<p><a href="https://s2.ax1x.com/2020/03/07/3jOn4P.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://s2.ax1x.com/2020/03/07/3jOn4P.jpg" class="lazyload"></a></p>
<h5 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:yeszao/dofiler.git   <span class="comment"># 配置远程git版本库</span></span><br><span class="line">git pull origin master                                    <span class="comment"># 下载代码及快速合并 </span></span><br><span class="line">git push origin master                                    <span class="comment"># 上传代码及快速合并</span></span><br><span class="line">git fetch origin                                          <span class="comment"># 从远程库获取代码</span></span><br><span class="line"></span><br><span class="line">git branch                                                <span class="comment"># 显示所有分支</span></span><br><span class="line">git checkout master                                       <span class="comment"># 切换到master分支</span></span><br><span class="line">git checkout -b dev                                       <span class="comment"># 创建并切换到dev分支</span></span><br><span class="line">git commit -m <span class="string">"first version"</span>                             <span class="comment"># 提交</span></span><br><span class="line"></span><br><span class="line">git status                                                <span class="comment"># 查看状态</span></span><br><span class="line">git <span class="built_in">log</span>                                                   <span class="comment"># 查看提交历史</span></span><br><span class="line"></span><br><span class="line">git config --global core.editor vim                       <span class="comment"># 设置默认编辑器为vim（git默认用nano）</span></span><br><span class="line">git config core.ignorecase <span class="literal">false</span>                          <span class="comment"># 设置大小写敏感</span></span><br><span class="line">git config --global user.name <span class="string">"YOUR NAME"</span>                 <span class="comment"># 设置用户名</span></span><br><span class="line">git config --global user.email <span class="string">"YOUR EMAIL ADDRESS"</span>       <span class="comment"># 设置邮箱</span></span><br></pre></td></tr></tbody></table></figure></div>
<a id="more"></a>

<h5 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> <url>                 <span class="comment"># 克隆远程版本库</span></url></span><br><span class="line">git init                        <span class="comment"># 初始化本地版本库</span></span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git status                      <span class="comment"># 查看状态</span></span><br><span class="line">git diff                        <span class="comment"># 查看变更内容</span></span><br><span class="line">git add .                       <span class="comment"># 跟踪所有改动过的文件</span></span><br><span class="line">git add <file>                  <span class="comment"># 跟踪指定的文件</span></file></span><br><span class="line">git mv <old> <new>              <span class="comment"># 文件改名</span></new></old></span><br><span class="line">git rm <file>                   <span class="comment"># 删除文件</span></file></span><br><span class="line">git rm --cached <file>          <span class="comment"># 停止跟踪文件但不删除</span></file></span><br><span class="line">git commit -m “commit message”  <span class="comment"># 提交所有更新过的文件</span></span><br><span class="line">git commit --amend              <span class="comment"># 修改最后一次提交</span></span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span>                         <span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span> -p <file>               <span class="comment"># 查看指定文件的提交历史</span></file></span><br><span class="line">git blame <file>                <span class="comment"># 以列表方式查看指定文件的提交历史</span></file></span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="撤消"><a href="#撤消" class="headerlink" title="撤消"></a>撤消</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git reset --hard HEAD           <span class="comment"># 撤消工作目录中所有未提交文件的修改内容</span></span><br><span class="line">git reset --hard <version>      <span class="comment"># 撤销到某个特定版本</span></version></span><br><span class="line">git checkout HEAD <file>        <span class="comment"># 撤消指定的未提交文件的修改内容</span></file></span><br><span class="line">git checkout -- <file>          <span class="comment"># 同上一个命令</span></file></span><br><span class="line">git revert <commit>             <span class="comment"># 撤消指定的提交</span></commit></span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git branch                      <span class="comment"># 显示所有本地分支</span></span><br><span class="line">git checkout <branch tag>       <span class="comment"># 切换到指定分支或标签</span></branch></span><br><span class="line">git branch <new-branch>         <span class="comment"># 创建新分支</span></new-branch></span><br><span class="line">git branch -d <branch>          <span class="comment"># 删除本地分支</span></branch></span><br><span class="line">git tag                         <span class="comment"># 列出所有本地标签</span></span><br><span class="line">git tag <tagname>               <span class="comment"># 基于最新提交创建标签</span></tagname></span><br><span class="line">git tag -a <span class="string">"v1.0"</span> -m <span class="string">"一些说明"</span>  <span class="comment"># -a指定标签名称，-m指定标签说明</span></span><br><span class="line">git tag -d <tagname>            <span class="comment"># 删除标签</span></tagname></span><br><span class="line"></span><br><span class="line">git checkout dev                <span class="comment"># 合并特定的commit到dev分支上</span></span><br><span class="line">git cherry-pick 62ecb3</span><br></pre></td></tr></tbody></table></figure></div>
<h5 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git merge <branch>              <span class="comment"># 合并指定分支到当前分支</span></branch></span><br><span class="line">git merge --abort               <span class="comment"># 取消当前合并，重建合并前状态</span></span><br><span class="line">git merge dev -Xtheirs          <span class="comment"># 以合并dev分支到当前分支，有冲突则以dev分支为准</span></span><br><span class="line">git rebase <branch>             <span class="comment"># 衍合指定分支到当前分支</span></branch></span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote -v                   <span class="comment"># 查看远程版本库信息</span></span><br><span class="line">git remote show <remote>        <span class="comment"># 查看指定远程版本库信息</span></remote></span><br><span class="line">git remote add <remote> <url>   <span class="comment"># 添加远程版本库</span></url></remote></span><br><span class="line">git remote remove <remote>      <span class="comment"># 删除指定的远程版本库</span></remote></span><br><span class="line">git fetch <remote>              <span class="comment"># 从远程库获取代码</span></remote></span><br><span class="line">git pull <remote> <branch>      <span class="comment"># 下载代码及快速合并</span></branch></remote></span><br><span class="line">git push <remote> <branch>      <span class="comment"># 上传代码及快速合并</span></branch></remote></span><br><span class="line">git push <remote> :<branch tag-name> <span class="comment"># 删除远程分支或标签</span></branch></remote></span><br><span class="line">git push --tags                 <span class="comment"># 上传所有标签</span></span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h4><p>本文主要分析<a href="https://nvie.com/posts/a-successful-git-branching-model/?spm=a2c4e.10696291.0.0.6f5819a40ZbyMZ" target="_blank" rel="noopener">Git Flow</a>流程管理,参见如下图</p>
<p><a href="https://s2.ax1x.com/2020/03/07/3jOK9f.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://s2.ax1x.com/2020/03/07/3jOK9f.png" class="lazyload"></a></p>
<p>git flow具体步骤如下：</p>
<ol>
<li>代码项目会建develop/master两个分支，develop/master这两个分支不允许直接修改提交，在Git Flow 中，这两个分支至关重要，它们会贯彻整个流程始终，绝对不会被删除。只能合并，合并时会做代码审查。</li>
<li>代码开发或者修改bug时，以develop为基点，按功能xx 创建feature/xxx分支，测试完成后合并到develop分支</li>
<li>发布版本后合并release分支，并打标签，release分支从develop分支合并过来，master分支从release合并过来</li>
<li>线上版本出现bug时 从标签处创建hotfix分支，修改完毕后创建release标签，再合并到master和deveop分支</li>
</ol>
<h5 id="主分支master"><a href="#主分支master" class="headerlink" title="主分支master"></a>主分支master</h5><p>master 分支时常保持着软件可以正常运行的状态。由于要维护这一状态，所以不允许开发者直接对master 分支的代码进行修改和提交。</p>
<p>其他分支的开发工作进展到可以发布的程度后，将会与master分支进行合并，并且这一合并只在发布成品时进行。发布时将会附加版本编号的Git标签。</p>
<h5 id="开发分支develop"><a href="#开发分支develop" class="headerlink" title="开发分支develop"></a>开发分支develop</h5><p>develop分支是开发过程中代码中心分支。与master 分支一样，这个分支也不允许开发者直接进行修改和提交。</p>
<p>程序员要以develop分支为起点新建feature 分支，在feature 分支中进行新功能的开发或者代码的修正。也就是说develop分支维系着开发过程中的最新代码，以便程序员创建feature分支进行自己的工作。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -b develop master</span><br><span class="line"><span class="comment"># 切换到Master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 对Develop分支进行合并,使用--no-ff参数后，会执行正常合并，</span></span><br><span class="line"><span class="comment"># 在Master分支上生成一个新节点。</span></span><br><span class="line"><span class="comment"># 为了保证版本演进的清晰，我们希望采用这种做法。</span></span><br><span class="line">git merge --no-ff develop</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="临时分支"><a href="#临时分支" class="headerlink" title="临时分支"></a>临时分支</h5><h6 id="功能分支feature"><a href="#功能分支feature" class="headerlink" title="功能分支feature"></a>功能分支feature</h6><p>feature 分支是为了开发某种特定功能，以develop分支为起点，是开发者直接更改代码发送提交的分支。开发完成后，要再并入Develop。它的命名，可以采用feature/<em>的形式</em>。开发流程：</p>
<ol>
<li>从develop分支创建feature分支</li>
<li>从feature分支中实现目标功能</li>
<li>通过Github 向develop发送pull request</li>
<li>接受其他开发者审核后，将Pull Request合并至develop分支</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个功能分支</span></span><br><span class="line">git checkout -b feature-x develop</span><br><span class="line"><span class="comment"># 开发完成后，将功能分支合并到develop分支：</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature-x</span><br><span class="line">删除feature分支</span><br><span class="line">git branch -d feature-x</span><br></pre></td></tr></tbody></table></figure></div>

<h6 id="预发布分支release"><a href="#预发布分支release" class="headerlink" title="预发布分支release"></a>预发布分支release</h6><p>release分支是发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release/*的形式。</p>
<p><a href="https://s2.ax1x.com/2020/03/08/3vXD3V.png" data-fancybox="group" data-caption="git-flow-release" class="fancybox"><img alt="git-flow-release" title="git-flow-release" data-src="https://s2.ax1x.com/2020/03/08/3vXD3V.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个预发布分支</span></span><br><span class="line">git checkout -b release-1.2 develop</span><br><span class="line"><span class="comment"># 确认没有问题后，合并到master分支：</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-1.2</span><br><span class="line"><span class="comment"># 对合并生成的新节点，做一个标签</span></span><br><span class="line">git tag -a 1.2</span><br><span class="line"><span class="comment"># 再合并到develop分支</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-1.2</span><br><span class="line"><span class="comment"># 最后，删除预发布分支：</span></span><br><span class="line">git branch -d release-1.2</span><br></pre></td></tr></tbody></table></figure></div>

<div style="page-break-after: always;"></div>

<h6 id="修补bug分支hotfix"><a href="#修补bug分支hotfix" class="headerlink" title="修补bug分支hotfix"></a>修补bug分支hotfix</h6><p>软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用hotfix/*的形式。</p>
<p><a href="https://s2.ax1x.com/2020/03/08/3vXrcT.png" data-fancybox="group" data-caption="git-flow-hotfix" class="fancybox"><img alt="git-flow-hotfix" title="git-flow-hotfix" data-src="https://s2.ax1x.com/2020/03/08/3vXrcT.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个修补bug分支</span></span><br><span class="line">git checkout -b fixbug-0.1 master</span><br><span class="line"><span class="comment"># 修补结束后，合并到master分支：</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br><span class="line">git tag -a 0.1.1</span><br><span class="line"><span class="comment"># 再合并到develop分支</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br><span class="line"><span class="comment"># 最后，删除"修补bug分支"：</span></span><br><span class="line">git branch -d fixbug-0.1</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="Git-远程管理"><a href="#Git-远程管理" class="headerlink" title="Git 远程管理"></a>Git 远程管理</h4><h5 id="Git服务器迁移另外一台GIT服务器"><a href="#Git服务器迁移另外一台GIT服务器" class="headerlink" title="Git服务器迁移另外一台GIT服务器"></a>Git服务器迁移另外一台GIT服务器</h5><p>前提条件：</p>
<ul>
<li><p>first.git已存在</p>
</li>
<li><p>second.git 待同步仓储 第一次需初始化.</p>
<p>可以在gitlab,github网页初始化，空项目，不要初始化README.md等</p>
<p>可以以命令行方式初始化</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git init --bare</span><br></pre></td></tr></tbody></table></figure></div>

<p>方式一：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare https://first.git First-Server </span><br><span class="line"><span class="built_in">cd</span> First-Server </span><br><span class="line">git add tencent https://second.git</span><br><span class="line">git push tencent --all</span><br></pre></td></tr></tbody></table></figure></div>

<p>方式二：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare https://first.git First-Server </span><br><span class="line"><span class="built_in">cd</span> First-Server</span><br><span class="line">git push --mirror https://second.git</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="SVN服务器迁移到GIT服务器"><a href="#SVN服务器迁移到GIT服务器" class="headerlink" title="SVN服务器迁移到GIT服务器"></a>SVN服务器迁移到GIT服务器</h5><p>svn代码迁移到git服务器，主要用到git-svn命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建user.txt 提交记录映射表</span></span><br><span class="line">svn <span class="built_in">log</span> --xml | grep author | sort -u | perl -pe <span class="string">'s/.*>(.*?)<.* $1="/'</span"></.*></span><br><span class="line"><span class="comment"># 拉取svn代码</span></span><br><span class="line">git svn <span class="built_in">clone</span> http://svn_address --authors-file=users.txt --no-metadata -s my_project</span><br><span class="line"><span class="comment"># 如果提交记录太多，可选取最近提交记录，以下是取最近5000次</span></span><br><span class="line">git svn <span class="built_in">clone</span> -r5000:HEAD svn_address --authors-file=users.txt --no-metadata -s my_project</span><br><span class="line"><span class="comment"># 清理工作</span></span><br><span class="line">cp -Rf .git/refs/remotes/origin/tags/* .git/refs/tags/</span><br><span class="line">rm -Rf .git/refs/remotes</span><br><span class="line"><span class="comment"># 添加git服务器地址，并上传</span></span><br><span class="line">git remote add origin git@my-git-server:myrepository.git</span><br><span class="line">git push origin --all</span><br></span></pre></td></tr></tbody></table></figure></div>

<h5 id="绑定多个服务器"><a href="#绑定多个服务器" class="headerlink" title="绑定多个服务器"></a>绑定多个服务器</h5><p>方式一：git remote add</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git remote add tecent https://xxx.git</span><br><span class="line">git push origin master:master</span><br><span class="line">git push tecent master:master</span><br></pre></td></tr></tbody></table></figure></div>

<p>方式二 git remote set-url</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url --add https://xxx.git</span><br><span class="line">cat .git/config</span><br><span class="line">git push origin --all</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="切换已有仓储到另外一个git仓储"><a href="#切换已有仓储到另外一个git仓储" class="headerlink" title="切换已有仓储到另外一个git仓储"></a>切换已有仓储到另外一个git仓储</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git remote set-url origin https://xxx.git</span><br><span class="line">git branch --set-upstream-to origin/remote_branch  your_local_branch</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="合并冲突处理"><a href="#合并冲突处理" class="headerlink" title="合并冲突处理"></a>合并冲突处理</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git merge 分支名</span><br><span class="line">//有冲突的话，通过IDE解决冲突,</span><br><span class="line">git status //查看状态然后再执行</span><br><span class="line">git add </span><br><span class="line">git commit</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="服务器选择"><a href="#服务器选择" class="headerlink" title="服务器选择"></a>服务器选择</h4><p>git服务器选择，如果是小团队的话，建议直接服务器安装git后，命令行直接创建，也可以选择gitlab搭建，当然如果不介意公网，想更可视化查看代码，也可以考虑一些云服务器，目前国内的码云，阿里云，腾讯云,以及国外的github等都提供免费的个人代码云仓储。</p>
<blockquote>
<ul>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 命令行直接搭建 git init —bare</li>
<li>搭建<a href="https://about.gitlab.com/" target="_blank" rel="noopener">gitlab</a>内网环境</li>
<li>选择免费的云服务器代码托管 <a href="https://github.com/" target="_blank" rel="noopener">github</a>，<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a>，<a href="https://code.aliyun.com/" target="_blank" rel="noopener">阿里云</a>，<a href="https://code.aliyun.com/" target="_blank" rel="noopener">腾讯云</a>等。</li>
</ul>
</blockquote>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote>
<ul>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git-SCM</a></li>
<li><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">Git分支管理策略</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a></li>
<li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Git 命令图形化训练</a></li>
<li><a href="https://cloud.tencent.com/developer/section/1138653" target="_blank" rel="noopener">腾讯云Git</a></li>
</ul>
</blockquote>
<h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><blockquote>
<ul>
<li><a href="https://lairdli.top/2018/05/25/Android-Book-Recomendations/">Android 学习书籍推荐</a></li>
<li><a href="https://lairdli.top/2019/02/25/Android-3rd-Libs/">Android 常用第三方库整理</a></li>
<li><a href="https://lairdli.top/2019/01/30/Android-Journey/">Android 知识点脑图整理</a></li>
<li><a href="https://lairdli.top/2019/05/19/Android-RoadMap/">Android 路线图</a></li>
<li><a href="https://lairdli.top/2019/06/01/Android-NDK-RoadMap/">Android NDK知识脑图整理</a></li>
<li><a href="https://lairdli.top/2019/06/09/Android-C-RoadMap/">Andorid C知识脑图整理</a></li>
<li><a href="https://lairdli.top/2019/06/18/Android-Helper/">Android Helper 软件开发工具集</a></li>
</ul>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Vcs</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-Material Design技术点</title>
    <url>/2019/06/29/Android-Material-Design/</url>
    <content><![CDATA[<html><head></head><body><h2 id="Android-Material-Design"><a href="#Android-Material-Design" class="headerlink" title="Android Material Design"></a>Android Material Design</h2><p>Material Design（质感设计）是google在Android 5.0提出的一种全新的设计理论，旨在为手机，平板，TV，电脑 等平台提供一致的设计与体验。</p>
<h3 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h3><p>开局一张图，直接上脑图</p>
<p><a href="https://s2.ax1x.com/2020/03/07/3jLjB9.png" data-fancybox="group" data-caption="android-material-design" class="fancybox"><img alt="android-material-design" title="android-material-design" data-src="https://s2.ax1x.com/2020/03/07/3jLjB9.png" class="lazyload"></a></p>
<a id="more"></a>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h4><p>Material Design的设计思想是为了保持跨平台设计的一致性，将物理世界的体验带入屏幕，去掉物理世界的杂质，再加上虚拟世界的灵活特效，带给用户最接近现实的体验。</p>
<h4 id="材质与空间"><a href="#材质与空间" class="headerlink" title="材质与空间"></a>材质与空间</h4><p>魔法纸片是Material Design的重要信息载体，引入z轴概率，z坐标值越大，投影越重。</p>
<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>响应式交互，转场动画，细节动画等</p>
<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>色彩，字体，字体排版等约定</p>
<h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><p>桌面图标，小图标等</p>
<h4 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h4><p>图像布局，图片色彩设计等</p>
<h3 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h3><h4 id="ToolBar"><a href="#ToolBar" class="headerlink" title="ToolBar"></a>ToolBar</h4><p>可代替ActionBar，具备Material效果，应用三部曲</p>
<ul>
<li>更改application主题，改为非ActionBar主题</li>
<li>布局文件layout，引入v7包Toolbar,作为根布局</li>
<li>代码文件，findviewbyid->setSupportActionBar<h4 id="TabLayout"><a href="#TabLayout" class="headerlink" title="TabLayout"></a>TabLayout</h4></li>
</ul>
<p>Desin Support库中提供，可实现动态滑动标题栏效果，需配合其他组件使用</p>
<ul>
<li><p>布局文件layout 引入AppBarLayout,AppBarLayout包裹ToolBar ,TabLayout，ViewPager</p>
</li>
<li><p>代码文件设置 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">toolbar.setSupportActionBar(...)；</span><br><span class="line">tabLayout.addTab(...);</span><br><span class="line">viewPager.setAdapter(...);</span><br><span class="line">tabLayout.setupWithViewPager(...);</span><br><span class="line">tabLayout.setTabsFromPagerAdapter(...);</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h4 id="滑动菜单"><a href="#滑动菜单" class="headerlink" title="滑动菜单"></a>滑动菜单</h4><h5 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h5><p>v4包中提供，可配合toolbar添加导航呼出，应用步骤</p>
<ul>
<li><p>布局文件layout,引入v4-DrawerLayout作为根布局，子布局放入两个控件，，一个是主屏幕中显示内容，一个是滑动菜单显示的内容。第一个控件可引入toolbar，特别注意第二个控件的layout_gravity属性必须制定，一般为start</p>
</li>
<li><p>代码文件，获取actionBar，设置导航</p>
</li>
<li><p>代码文件，响应导航onOptionsItemSelected,触发左侧滑动控件显示drawerLayout.openDrawer(GravityCompat.START)</p>
</li>
</ul>
<h5 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h5><p>Desin Support库中提供的滑动页面控件，配合DrawerLayout使用。使用步骤如下：</p>
<ul>
<li>基本步骤同DrawerLayout使用</li>
<li>布局文件第二个控件滑动控件使用NavigationView。</li>
<li>准备NavigationView的app:menu布局文件,可使用子菜单</li>
<li>准备NavigationView的app:headerlayout布局文件</li>
<li>代码文件，findviewbyid找到NavigationView，设置默认checked，navView.setCheckedItem(..)设置item选中监听，navView.setNavigationItemSelectedListener(..)<h4 id="悬浮按钮和交互提示"><a href="#悬浮按钮和交互提示" class="headerlink" title="悬浮按钮和交互提示"></a>悬浮按钮和交互提示</h4></li>
</ul>
<h5 id="FloatActionButton"><a href="#FloatActionButton" class="headerlink" title="FloatActionButton"></a>FloatActionButton</h5><p>Desin Support库中提供，悬浮按钮使用步骤：</p>
<ul>
<li><p>布局文件layout中引入FloatActionButton控件</p>
</li>
<li><p>代码文件，findviewbyid找到FloatActionButton，设置监听事件fab.setOnclickListener(…)</p>
</li>
</ul>
<h5 id="SnackBar"><a href="#SnackBar" class="headerlink" title="SnackBar"></a>SnackBar</h5><p>类似Toast的提示，不过带了交互功能，调用方式也和Toast类似：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Snackbar.make(view,“Data deleted”,Snackbar.LENGTH_SHORT)</span><br><span class="line">  .setAction(<span class="string">"Undo"</span>,<span class="keyword">new</span> View.OnClickListener(){</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>{</span><br><span class="line">      Toast.makeText(context,<span class="string">"Data restored"</span>,Toast.LENGTH_SHORT)</span><br><span class="line">        .show();</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">  .show();</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h5><p>Desin Support库中提供，加强版FrameLayout,CoordinatorLayout可以监听其所有子控件各种事件，自动做出合并的响应，比如FloatActionButton+SnackBar的操作场景-如果SnackBar的弹出覆盖了FloatActionButton，如何换成CoordinatorLayout，FloatActionButton会自动向上偏移。</p>
<p>CoordinatorLayout中最经典的设计就是Behavior,我们也可以自定义Behavior实现组件的交互与滑动。</p>
<p>自定义Behavior需继承CoordinatorLayout.Behavior<view>,分两种情况：</view></p>
<ul>
<li>自定义View监听CoordinatorLayout里面的滑动状态，注意onStartNestedScroll()和onNestedPreScoll()</li>
<li>自定义View监听其他View的变化，如大小，位置，显示状态等。注意layoutDependsOn()(),onDependentViewChanged().</li>
</ul>
<h5 id="TextInputLayout"><a href="#TextInputLayout" class="headerlink" title="TextInputLayout"></a>TextInputLayout</h5><p>Desin Support库中提供，TextInputLayout是一个容器，跟ScrollView一样，只接受一个子元素，并且这个子元素为EditText,使用步骤：</p>
<ul>
<li><p>布局文件layout 引入TextInputLayout包裹EditText</p>
</li>
<li><p>设置EditText的hit属性，就会看到不一样的输入提示</p>
</li>
<li><p>代码文件，findviewbyid找到TextInputLayout，还可以设置错误提示</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">tl.setErrorEnable(<span class="keyword">true</span>);</span><br><span class="line">tl.setError(<span class="string">"error message tips!"</span>);</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>样式文件，改变主题的colorAccent，可改变hit提示颜色</p>
</li>
</ul>
<h5 id="BottomSheetBehavior"><a href="#BottomSheetBehavior" class="headerlink" title="BottomSheetBehavior"></a>BottomSheetBehavior</h5><p>Android Support 库23.2中引入，可轻松实现底部动作条功能，步骤：</p>
<ul>
<li><p>布局中加入app:layout_behavior属性</p>
</li>
<li><p>将布局作为CoordinatorLayout子布局</p>
</li>
<li><p>代码设置回调监听 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">behavior = ottomSheetBehavior.from(bottomview) ;</span><br><span class="line">behavior.setBottomSheetCallBack(...)</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h4 id="卡片式布局"><a href="#卡片式布局" class="headerlink" title="卡片式布局"></a>卡片式布局</h4><h5 id="CardView"><a href="#CardView" class="headerlink" title="CardView"></a>CardView</h5><p>v7包提供，实际上CardView也是一个FrameLayout,只是额外添加了圆角，阴影等效果，使用步骤同FrameLayout一样，只需在布局文件layout中引入CardView，设置圆角，阴影等属性配置即可。</p>
<h5 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h5><p>Desin Support库中提供,AppBarLayout实质是一个垂直方向的LinearLayout,在内部做了些滚动的封装，并应用了Material Design的设计理念。</p>
<p>可解决RecyclerView + Toolbar+CoordinatorLayout经典场景中的遮挡问题，解决步骤：</p>
<ul>
<li>布局文件layout中将Toolbar嵌套到AppbarLayout中</li>
<li>给RecyclerView设置一个布局行为app:layout_behavior=”…”</li>
</ul>
<h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><h5 id="SwipeRefreshLayout"><a href="#SwipeRefreshLayout" class="headerlink" title="SwipeRefreshLayout"></a>SwipeRefreshLayout</h5><p>v4包提供，SwipeRefreshLayout是用于实现下拉刷新的核心库。使用步骤：</p>
<ul>
<li><p>布局文件layout 中引入SwipeRefreshLayout包裹RecyclerView</p>
</li>
<li><p>代码文件设置刷新逻辑swipeRefresh.setOnRefreshListener(…)</p>
</li>
</ul>
<h4 id="可折叠式标题栏"><a href="#可折叠式标题栏" class="headerlink" title="可折叠式标题栏"></a>可折叠式标题栏</h4><h5 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a>CollapsingToolbarLayout</h5><p>Desin Support库提供，CollapsingToolbarLayout是一个作用于其他组件上的控件，需配合其他组件使用。使用步骤：</p>
<ul>
<li><p>布局文件layout ,CoordinatorLayout包裹AppBarLayout,AppBarLayout包裹CollapsingToolbarLayout。</p>
</li>
<li><p>CollapsingToolbarLayout包裹ToolBar+其他子控件（图片等）</p>
</li>
<li><p>CoordinatorLayout包裹NestedScollView(v4包提供，可嵌套响应滚动)，NestedScollView包裹LinearLayout,</p>
<p>LinearLayout可包裹显示长文字的CardView-TextView.或者CoordinatorLayout包裹RecyclerView。</p>
</li>
</ul>
<h4 id="沉浸式标题栏"><a href="#沉浸式标题栏" class="headerlink" title="沉浸式标题栏"></a>沉浸式标题栏</h4><ul>
<li>实现背景图和系统标题栏融合，需借助android:fitsSystemWindows这个属性：</li>
<li>控件设置android:fitsSystemWindows属性为true</li>
<li>主题中的android:statusBarColor设置为透明。由于android:statusBarColor是从5.0系统才有，需进行系统差异化处理。建立values-v21主题配置。</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://book.douban.com/subject/27080694/" target="_blank" rel="noopener">《Android进阶之光》</a>第2章</li>
<li><a href="https://book.douban.com/subject/26915433/" target="_blank" rel="noopener">《第一行代码-第二版》</a>第12章</li>
<li><a href="https://developer.android.google.cn/design/" target="_blank" rel="noopener">Android Developers Design</a></li>
<li><a href="https://www.jianshu.com/p/a44c119d6ef7" target="_blank" rel="noopener">Android沉浸式(透明)状态栏适配</a></li>
<li><a href="https://blog.csdn.net/guolin_blog/article/details/51763825" target="_blank" rel="noopener">Android状态栏微技巧</a></li>
</ul>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul>
<li><a href="https://lairdli.top/2018/05/25/Android-Book-Recomendations/">Android 学习书籍推荐</a></li>
<li><a href="https://lairdli.top/2019/02/25/Android-3rd-Libs/">Android 常用第三方库整理</a></li>
<li><a href="https://lairdli.top/2019/01/30/Android-Journey/">Android 知识点脑图整理</a></li>
<li><a href="https://lairdli.top/2019/05/19/Android-RoadMap/">Android 路线图</a></li>
<li><a href="https://lairdli.top/2019/06/01/Android-NDK-RoadMap/">Android NDK知识脑图整理</a></li>
<li><a href="https://lairdli.top/2019/06/09/Android-C-RoadMap/">Andorid C知识脑图整理</a></li>
<li><a href="https://lairdli.top/2019/06/18/Android-Helper/">Android Helper 软件开发工具集</a></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-版本进化以及差异梳理</title>
    <url>/2019/06/24/Android-Release/</url>
    <content><![CDATA[<html><head></head><body><h4 id="Android-Release"><a href="#Android-Release" class="headerlink" title="Android Release"></a>Android Release</h4><p>Android版本目前最新已发布了Android 9.0 Q测试版，本文旨在总结目前Android各个Release版本的新特性，以供App开发时，进行更好的版本适配，新功能开发。</p>
<h5 id="MindMap"><a href="#MindMap" class="headerlink" title="MindMap"></a>MindMap</h5><p>开局一张图，直接上脑图<br><a href="https://s2.ax1x.com/2020/03/07/3jOStx.png" data-fancybox="group" data-caption="Android Release" class="fancybox"><img alt="Android Release" title="Android Release" data-src="https://s2.ax1x.com/2020/03/07/3jOStx.png" class="lazyload"></a></p>
<a id="more"></a>

<h5 id="Android-9-Pie"><a href="#Android-9-Pie" class="headerlink" title="Android 9 Pie"></a>Android 9 Pie</h5><blockquote>
<ul>
<li>显示屏缺口支持</li>
<li>通知-短信通知支持图像</li>
<li>渠道设置、广播和请勿打扰</li>
<li>多摄像头支持和摄像头更新</li>
<li>安全增强功能</li>
</ul>
</blockquote>
<h5 id="Android-8-0-Oreo"><a href="#Android-8-0-Oreo" class="headerlink" title="Android 8.0 Oreo"></a>Android 8.0 Oreo</h5><blockquote>
<ul>
<li>用户体验-通知渠道等</li>
<li>自动填充框架</li>
<li>画中画模式</li>
<li>动态权限申请，后台广播管理更加严格</li>
</ul>
</blockquote>
<h5 id="Android-7-0-Nougat"><a href="#Android-7-0-Nougat" class="headerlink" title="Android 7.0 Nougat"></a>Android 7.0 Nougat</h5><blockquote>
<ul>
<li>多窗口支持</li>
<li>VR支持</li>
<li>后台省电</li>
<li>Unicode9支持 全新的emoji表情符号</li>
<li>支持JAVA8 Lambda</li>
</ul>
</blockquote>
<h5 id="Android-6-0-Marshmallow"><a href="#Android-6-0-Marshmallow" class="headerlink" title="Android 6.0 Marshmallow"></a>Android 6.0 Marshmallow</h5><blockquote>
<ul>
<li>运行时检查和请求权限</li>
<li>取消支持 Apache HTTP 客户端</li>
<li>WLAN 和网络连接变更</li>
</ul>
</blockquote>
<h5 id="Android-5-0-Lollipop"><a href="#Android-5-0-Lollipop" class="headerlink" title="Android 5.0 Lollipop"></a>Android 5.0 Lollipop</h5><blockquote>
<ul>
<li>Android Runtime (ART)</li>
<li>Material Design 样式</li>
<li>浮动通知</li>
<li>NDK支持64位</li>
<li>禁止Intent隐式调用</li>
<li>推出RecyclerView等</li>
</ul>
</blockquote>
<h5 id="Android-4-4-KitKat"><a href="#Android-4-4-KitKat" class="headerlink" title="Android 4.4 KitKat"></a>Android 4.4 KitKat</h5><blockquote>
<ul>
<li>通过主机卡模拟实现新的 NFC 功能</li>
<li>内存使用率分析工具 adb shell dumpsys procstats /db shell dumpsys meminfo </li>
</ul>
</blockquote>
<h4 id="Android-Adapter"><a href="#Android-Adapter" class="headerlink" title="Android Adapter"></a>Android Adapter</h4><p>各版本适配适配，从Android5.0开始有差异，需要特别注意以下几点</p>
<blockquote>
<ul>
<li>Android 5.0 开始禁止Intent隐式调用</li>
<li>Android 6.0 开始动态权限管理</li>
<li>Android 7.0中删除了三项隐式广播</li>
<li>Android 8.0 动态权限申请，后台广播管理更加严格</li>
<li>Android 9.0 挖孔屏适配</li>
</ul>
</blockquote>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><blockquote>
<ul>
<li><a href="https://book.douban.com/subject/27080694/" target="_blank" rel="noopener">《Android进阶之光》</a>第一章</li>
<li><a href>Android开发者官网-Android-Developer</a></li>
<li><a href="https://blog.csdn.net/qq_17766199/article/details/52013501" target="_blank" rel="noopener">谈谈Android 6.0 的动态权限管理</a></li>
<li><a href="https://blog.csdn.net/qq_17766199/article/details/77404712" target="_blank" rel="noopener">Android 7.0脱坑指南</a></li>
<li><a href="https://blog.csdn.net/qq_17766199/article/details/80965631" target="_blank" rel="noopener">Android 8.0适配指北</a></li>
<li><a href="https://www.jianshu.com/p/9e9e902ea039" target="_blank" rel="noopener">Android P 兼容与适配</a></li>
<li><a href="https://www.jianshu.com/p/1302ad5a4b04" target="_blank" rel="noopener">推荐一种非常好用的Android屏幕适配</a></li>
<li><a href="https://www.jianshu.com/p/251ff4ee94d3" target="_blank" rel="noopener">Android 6.0-9.0适配</a></li>
<li><a href="https://www.jianshu.com/p/f4b3b6a9a5d6?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation" target="_blank" rel="noopener">Android5.0&6.0新特性</a></li>
</ul>
</blockquote>
<h4 id="Recommended-reading"><a href="#Recommended-reading" class="headerlink" title="Recommended reading"></a>Recommended reading</h4><blockquote>
<ul>
<li><a href="https://lairdli.top/2018/05/25/Android-Book-Recomendations/">Android 学习书籍推荐</a></li>
<li><a href="https://lairdli.top/2019/02/25/Android-3rd-Libs/">Android 常用第三方库整理</a></li>
<li><a href="https://lairdli.top/2019/01/30/Android-Journey/">Android 知识点脑图整理</a></li>
<li><a href="https://lairdli.top/2019/05/19/Android-RoadMap/">Android 路线图</a></li>
<li><a href="https://lairdli.top/2019/06/01/Android-NDK-RoadMap/">Android NDK知识脑图整理</a></li>
<li><a href="https://lairdli.top/2019/06/09/Android-C-RoadMap/">Andorid C知识脑图整理</a></li>
<li><a href="https://lairdli.top/2019/06/18/Android-Helper/">Android Helper 软件开发工具集</a></li>
</ul>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Adapter</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-常用工具软件梳理</title>
    <url>/2019/06/18/Android-Helper/</url>
    <content><![CDATA[<html><head></head><body><h2 id="Android-Helper"><a href="#Android-Helper" class="headerlink" title="Android Helper"></a>Android Helper</h2><p><strong><em>工欲善其事 必先利其器</em></strong></p>
<p>本文总结整理了软件开发过程中的那些实用软件与工具，主要基于Android开发，其他行业语种开发，也大部分适用，请自行参考，有了这些”神兵利器”的协助，基本上能搞定日常工作中的开发需求了。</p>
<p>希望对不断上进的你有所帮助！</p>
<h4 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h4><p>开局一张图，直接上脑图</p>
<p><a href="https://s2.ax1x.com/2020/03/07/3jLIkq.png" data-fancybox="group" data-caption="Android Helper" class="fancybox"><img alt="Android Helper" title="Android Helper" data-src="https://s2.ax1x.com/2020/03/07/3jLIkq.png" class="lazyload"></a></p>
<a id="more"></a>
<h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>开发用的操作系统选择优先级 <em>macOS>Ubuntu>Windows</em></p>
<p>如果经济允许强烈推荐上macOS,退而求其次Ubuntu,至于是装双系统或者上虚拟机，看个人习惯了。</p>
<h4 id="开发IDE"><a href="#开发IDE" class="headerlink" title="开发IDE"></a>开发IDE</h4><ul>
<li><p><a href="https://developer.android.google.cn/studio" target="_blank" rel="noopener">AndroidStudio</a>  Android开发王者IDE😜</p>
</li>
<li><p><a href="http://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>  JAVA/Python开发IDE</p>
</li>
<li><p><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a> 文本编辑器，log查找，追踪问题神器，很可惜没有mac上的版本</p>
</li>
<li><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">VSCode</a> 微软出品，文本编辑器，IDE编辑器，试试你就知道它的强大，弱弱提醒一句，不要忘记插件哦</p>
</li>
<li><p><a href="https://www.sourceinsight.com/download/" target="_blank" rel="noopener">SourceInsight</a> 一款 C语言项目/Android源码 正确的打开姿势的神器</p>
</li>
<li><p><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">Eclipse</a> 老牌<em>JAVA</em> IDE，不多说了，估计火星人都知道</p>
</li>
<li><p><a href="https://sqlitestudio.pl/index.rvt" target="_blank" rel="noopener">SqliteStudio</a> sqlite IDE，一款让你可以正确打开.db的神器</p>
</li>
</ul>
<h4 id="设计相关"><a href="#设计相关" class="headerlink" title="设计相关"></a>设计相关</h4><ul>
<li><p><a href="http://u6.xainjo.com/pc/getrgb.zip" target="_blank" rel="noopener">GetRGB</a> 可以取屏幕颜色rgb,windows版本，至于macOS自带小工具-其他-数码测色计</p>
</li>
<li><p><a href="http://www.getmarkman.com/#/download-modal" target="_blank" rel="noopener">Mark Man</a> 尺寸标注工具，再也不怕美工小姐姐不给标注了喔</p>
</li>
<li><p><a href="http://www.onlinedown.net/soft/577835.htm" target="_blank" rel="noopener">viso</a> 微软office组件，需要单独安装，流程图，架构图，各种图绘制首选</p>
</li>
<li><p><a href="https://www.xmind.cn/" target="_blank" rel="noopener">xmind</a> 思维导图绘制利器，试试你就知道</p>
</li>
<li><p><a href="https://www.typora.io/" target="_blank" rel="noopener">typora</a> 一款markdown编辑软件，简洁又大方</p>
</li>
</ul>
<h4 id="素材相关"><a href="#素材相关" class="headerlink" title="素材相关"></a>素材相关</h4><ul>
<li><p><a href="https://www.videolan.org/" target="_blank" rel="noopener">vlc</a> 经典老牌播放器，测直播，测点播，测组播，测推流，首选</p>
</li>
<li><p><a href="http://shapes.softartstudio.com/" target="_blank" rel="noopener">shapes</a> 一个在线可以生成shapes的xml代码的软件，可视化调整，再也不用一遍遍微调dp了</p>
</li>
<li><p><a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a> 一个可以在线压缩图片的神器网址，当然as自带的webp转换也可以试试哦</p>
</li>
<li><p><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a> 阿里巴巴出品，还在愁图标找不到了，上iconfont，你会找到合适的</p>
</li>
<li><p><a href="https://dlc2.pconline.com.cn/filedown_1014667_8836521/7MGMxcHx/pconline1495537409798.zip" target="_blank" rel="noopener">scivo码流分析</a> ts码率分析软件，DVB开发，PSI/SI信息查看神器</p>
</li>
<li><p><a href="https://lottiefiles.com/" target="_blank" rel="noopener">lottiefiles</a> 一个在线动画库网址，试试会有惊喜哦</p>
</li>
</ul>
<h4 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h4><ul>
<li><a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">LeakCanary</a> 需集成代码，监测代码内存泄漏神器</li>
<li><a href="https://github.com/facebook/stetho" target="_blank" rel="noopener">Stetho</a> facebook出品，需集成代码，可在线查看数据库，sp等，再也不用捞出db文件再查看了</li>
<li><a href="https://github.com/amitshekhariitbhu/Android-Debug-Database" target="_blank" rel="noopener">Android-Debug-Database</a> Android在线查看数据库,默认8080端口，可自定义配置端口号</li>
<li><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="noopener">hugo</a> 大神出品，需集成代码，基于aop实现，调试函数耗时可以不用加日志了</li>
</ul>
<h4 id="终端调试"><a href="#终端调试" class="headerlink" title="终端调试"></a>终端调试</h4><ul>
<li><p><a href="http://adbshell.com/downloads" target="_blank" rel="noopener">adb</a> 还没用过adb的小伙伴，此处省略号…</p>
</li>
<li><p><a href="http://www.xshellcn.com/" target="_blank" rel="noopener">xshell</a> 服务器远程登录连接神器</p>
</li>
<li><p><a href="https://www.vandyke.com/products/securecrt/" target="_blank" rel="noopener">secureCRT</a> 一款串口连接神器，不解释。</p>
</li>
<li><p><a href="http://tftpd32.jounin.net/tftpd32_download.html" target="_blank" rel="noopener">tftpd</a> 很小众的一款软件，但很实用，给个提示，文件传输…busybox tftp ..</p>
</li>
<li><p><a href="https://chrome.google.com/webstore/detail/chromeadb/fhdoijgfljahinnpbolfdimpcfoicmnm?utm_source=chrome-ntp-launcher" target="_blank" rel="noopener">chromeadb</a> Chorme浏览器插件，adb连接后，可在浏览器调试，查看设备信息，远程控制等。</p>
</li>
</ul>
<h4 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h4><ul>
<li><p><a href="https://www.getpostman.com/" target="_blank" rel="noopener">postman</a> 接口请求，mock调试，神器</p>
</li>
<li><p><a href="https://www.wireshark.org/" target="_blank" rel="noopener">wireshark</a> 网络环境调试，抓包分析</p>
</li>
<li><p><a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">fildder</a> 接口请求，mock调试，抓包分析</p>
</li>
</ul>
<h4 id="应用分发"><a href="#应用分发" class="headerlink" title="应用分发"></a>应用分发</h4><ul>
<li><p><a href="https://fir.im/" target="_blank" rel="noopener">fir.im</a> 应用分发平台</p>
</li>
<li><p><a href="https://www.pgyer.com/" target="_blank" rel="noopener">pgyer</a> 蒲公英分发内侧平台</p>
</li>
</ul>
<h4 id="日志统计"><a href="#日志统计" class="headerlink" title="日志统计"></a>日志统计</h4><ul>
<li><p><a href="https://www.umeng.com/" target="_blank" rel="noopener">umeng</a> 友盟出品，需集成sdk</p>
</li>
<li><p><a href="https://bugly.qq.com/v2/" target="_blank" rel="noopener">bugfly</a> 腾讯出品，需集成sdk</p>
</li>
</ul>
<h4 id="Mock调试"><a href="#Mock调试" class="headerlink" title="Mock调试"></a>Mock调试</h4><ul>
<li><p><a href="https://tuimeizi.cn/" target="_blank" rel="noopener">tuimeizi</a> 还在找占位图么，瞧瞧这里，有惊喜。</p>
</li>
<li><p><a href="https://www.easy-mock.com/login" target="_blank" rel="noopener">easy-mock</a> 还在等后台调接口么，自己动手，也可以在线获取接口数码</p>
</li>
<li><p><a href="https://www.bejson.com/jsonviewernew/" target="_blank" rel="noopener">jsonview</a> json在线格式化，view</p>
</li>
<li><p><a href="https://www.bejson.com/jsoneditoronline/" target="_blank" rel="noopener">jsonEdit</a> json在线编辑</p>
</li>
</ul>
<h4 id="对比工具"><a href="#对比工具" class="headerlink" title="对比工具"></a>对比工具</h4><ul>
<li><p><a href="http://www.scootersoftware.com/download.php" target="_blank" rel="noopener">Beyond Compare</a> 老牌文件对比工具</p>
</li>
<li><p><a href="https://freefilesync.org/download.php" target="_blank" rel="noopener">freefilesync</a> 免费的文件对比工具</p>
</li>
<li><p><a href="http://gd.jisuxz.com/down/md5zhushou_1_1_0_2_Jisuxz.com.rar%0a" target="_blank" rel="noopener">md5tools</a> 文件md5查看工具</p>
</li>
</ul>
<h4 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h4><ul>
<li><p><a href="https://www.teamviewer.cn/cn/" target="_blank" rel="noopener">TeamViewer</a> 很老牌的远程控制软件，个人免费使用，然而，然而，现在被代理了，各种被监测商业用途，说多了都是泪呀！</p>
</li>
<li><p><a href="https://sunlogin.oray.com/personal/" target="_blank" rel="noopener">向日葵</a> 国产远程控制软件，个人版免费使用，再也不用担心在线5分钟了，哈哈</p>
</li>
<li><p><a href="https://im.qq.com/download/" target="_blank" rel="noopener">QQ</a> 别忘了QQ也有远程控制桌面这个功能哦。</p>
</li>
</ul>
<h4 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h4><ul>
<li><p><a href="https://tool.lu" target="_blank" rel="noopener">在线工具集</a> 一个神奇的工具集网址</p>
</li>
<li><p><a href="https://qqe2.com/" target="_blank" rel="noopener">json在线</a> 一个json在线工具网址</p>
</li>
<li><p><a href="https://www.wanandroid.com/tools" target="_blank" rel="noopener">玩Android tools</a> 鸿洋大神WanAndroid网站工具页</p>
</li>
</ul>
<h4 id="资源搜索"><a href="#资源搜索" class="headerlink" title="资源搜索"></a>资源搜索</h4><ul>
<li><p><a href="https://www.google.com.hk/" target="_blank" rel="noopener">google</a> 需自备梯子</p>
</li>
<li><p><a href="https://github.com/" target="_blank" rel="noopener">github</a> 神奇的网站，不解释</p>
</li>
<li><p><a href="https://stackoverflow.com/search?q=" target="_blank" rel="noopener">stackoverflow</a> 神奇的网站，不解释</p>
</li>
<li><p><a href="https://www.androidos.net.cn/sourcecode" target="_blank" rel="noopener">androidos</a> Android源码在线查看</p>
</li>
<li><p><a href="http://androidxref.com/" target="_blank" rel="noopener">androidxref</a> Android源码在线查看</p>
</li>
<li><p><a href="https://www.wanandroid.com/" target="_blank" rel="noopener">玩Android</a> 鸿洋大神博客网站</p>
</li>
</ul>
<h3 id="Recommended-reading"><a href="#Recommended-reading" class="headerlink" title="Recommended reading"></a>Recommended reading</h3><blockquote>
<ul>
<li><a href="https://lairdli.top/2018/05/25/Android-Book-Recomendations/">Android 学习书籍推荐</a></li>
<li><a href="https://lairdli.top/2019/02/25/Android-3rd-Libs/">Android 常用第三方库整理</a></li>
<li><a href="https://lairdli.top/2019/01/30/Android-Journey/">Android 知识点脑图整理</a></li>
<li><a href="https://lairdli.top/2019/05/19/Android-RoadMap/">Android 路线图</a></li>
<li><a href="https://lairdli.top/2019/06/01/Android-NDK-RoadMap/">Android NDK知识脑图整理</a></li>
<li><a href="https://lairdli.top/2019/06/09/Android-C-RoadMap/">Andorid C知识脑图整理</a></li>
</ul>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-C语言技术路线梳理</title>
    <url>/2019/06/09/Android-C-RoadMap/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Android-C-RoadMap"><a href="#Android-C-RoadMap" class="headerlink" title="Android C RoadMap"></a>Android C RoadMap</h1><p>对于Android应用开发者而言，想必在大学C语言都是必修课，现在面对C估计熟悉又陌生，但掌握基础的C语言开发对于Android开发还是会锦上添花的，不管是源码的阅读，驱动开发，jni开发，都绕不开C.趁着前段时间开始JNI开发的经历，大概梳理了下C语言开发基础的脑图点，和重要的知识点。  </p>
<h2 id="Let’s-become-a-better-Android-C-Developer"><a href="#Let’s-become-a-better-Android-C-Developer" class="headerlink" title="Let’s become a better Android/C Developer"></a>Let’s become a better Android/C Developer</h2><p>本文适用于</p>
<blockquote>
<ol>
<li>任何想要学习C开发但不知道从哪里开始的人。</li>
<li>已经学习Android/C开发，但想学习Android底层相关开发的人</li>
</ol>
</blockquote>
<p>本文的目标是提供适当C/C++ RoadMap（路线图)，方便知识Review，以使你成为更好的Android/C开发人员。</p>
<p> <em>There is no better way to learn something than by doing.</em></p>
<h2 id="Getting-started-with-the-MindMap"><a href="#Getting-started-with-the-MindMap" class="headerlink" title="Getting started with the MindMap"></a><strong>Getting started with the MindMap</strong></h2><p>开局一张图，直接上脑图</p>
<p><a href="https://s2.ax1x.com/2020/03/07/3jOljg.png" data-fancybox="group" data-caption="jni-c-journey" class="fancybox"><img alt="jni-c-journey" title="jni-c-journey" data-src="https://s2.ax1x.com/2020/03/07/3jOljg.png" class="lazyload"></a></p>
<a id="more"></a>

<h2 id="First-comes-a-strong-core-foundation"><a href="#First-comes-a-strong-core-foundation" class="headerlink" title="First comes  a strong core foundation"></a>First comes  a strong core foundation</h2><blockquote>
<ul>
<li>基础类型 ->常见类型的分类，有符号，无符号，占用字节数等。</li>
<li>数组 -> 一位数组，二维数组</li>
<li>结构体 ->实质就是一个变量仓储，留意初始化，成员变量访问等</li>
<li>函数 ->尽量精简，避免代码冗余</li>
<li>运算符 -> 加减乘除，三目操作，位运算等</li>
<li>枚举 -> 枚举定义，访问等</li>
<li>预编译/重定义  ->#define/typedef 前者是预编译，后者是运算时加载，相当于昵称别名</li>
</ul>
</blockquote>
<h2 id="Learning-is-endless-take-it-to-the-next-advance-level"><a href="#Learning-is-endless-take-it-to-the-next-advance-level" class="headerlink" title="Learning is endless, take it to the next advance level"></a>Learning is endless, take it to the next advance level</h2><blockquote>
<ul>
<li>指针  ->  实质是内存地址索引，注意避免空指针，野指针</li>
<li>链表  -> 实质是指针的串行，注意指针的指向</li>
<li>线程管理 ->常用phread库，注意线程锁申请/释放，加锁/解锁 成对出现</li>
<li>内存管理 -> 实际开发中养成良好的开发习惯，注意指针变量声明初始化，macloc,memset等</li>
</ul>
</blockquote>
<h2 id="Online-Study-Source"><a href="#Online-Study-Source" class="headerlink" title="Online Study Source"></a>Online Study Source</h2><h3 id="Beginner-Resource"><a href="#Beginner-Resource" class="headerlink" title="Beginner Resource"></a>Beginner Resource</h3><blockquote>
<ul>
<li><a href="https://www.gitbook.com/book/wizardforcel/lcthw/details" target="_blank" rel="noopener">笨方法学C</a></li>
<li><a href="https://github.com/jobbole/awesome-c-cn" target="_blank" rel="noopener">C 语言资源大全中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.runoob.com/cprogramming/c-tutorial.html">菜鸟教程——C 语言教程</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//www.shiyanlou.com/courses/57">实验楼——C语言入门教程 </a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.imooc.com/learn/249">慕课网——C语言入门 </a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//study.163.com/course/introduction/1003030021.htm%23/courseDetail">网易云课堂——C语言基础入门 </a></li>
</ul>
</blockquote>
<h3 id="Other-Resource"><a href="#Other-Resource" class="headerlink" title="Other Resource"></a>Other Resource</h3><blockquote>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/aix/library/au-toughgame/">C 语言中的指针和内存泄漏</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/linux/l-cn-cobject/index.html">如何写出优美的 C 代码</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//coolshell.cn/articles/11466.html">C语言的整型溢出问题 | 酷 壳 - CoolShell.cn</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.jianshu.com/p/14e8c549600c">易被遗忘的C/C++要点总结</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//zcheng.ren/2016/08/15/memcpySeries/%3Fqqdrsign%3D005a4">C/C++的mem函数和strcpy函数的区别和应用</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/ts_54eagle/article/details/4418627">C语言的变量作用域及头文件</a></li>
<li><a href="https://www.cnblogs.com/dongsheng/p/4184153.html" target="_blank" rel="noopener">C语言中线程管理</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.codeceo.com/article/10-c-interview-algorithm.html">10个经典的C语言面试基础算法及代码</a></li>
</ul>
</blockquote>
<h2 id="Recommended-reading"><a href="#Recommended-reading" class="headerlink" title="Recommended reading"></a>Recommended reading</h2><blockquote>
<ul>
<li><a href="https://lairdli.top/2018/05/25/Android-Book-Recomendations/">Android 学习书籍推荐</a></li>
<li><a href="https://lairdli.top/2019/02/25/Android-3rd-Libs/">Android 常用第三方库整理</a></li>
<li><a href="https://lairdli.top/2019/01/30/Android-Journey/">Android 知识点脑图整理</a></li>
<li><a href="https://lairdli.top/2019/05/19/Android-RoadMap/">Android 路线图</a></li>
<li><a href="https://lairdli.top/2019/06/01/Android-NDK-RoadMap/">Android NDK知识脑图整理</a></li>
</ul>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-JNI/NDK知识点梳理</title>
    <url>/2019/06/01/Android-NDK-RoadMap/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Android-NDK-RoadMap"><a href="#Android-NDK-RoadMap" class="headerlink" title="Android NDK RoadMap"></a>Android NDK RoadMap</h1><h2 id="Let’s-become-a-better-Android-NDK-Developer"><a href="#Let’s-become-a-better-Android-NDK-Developer" class="headerlink" title="Let’s become a better Android/NDK Developer"></a>Let’s become a better Android/NDK Developer</h2><p>本文使用于</p>
<blockquote>
<ol>
<li>任何想要学习JNI-NDK开发但不知道从哪里开始的人。</li>
<li>已经学习Android开发，但想学习Android-NDK-JNI相关开发的人</li>
</ol>
</blockquote>
<p>本文的目标是提供适当Android-JNI-NDK RoadMap（路线图)，列出常见需要注意的点，方便知识Review，以使你成为更好的Android/NDK开发人员。本文不会详情的展示如何演示脑图所展示的知识点，展开来谈，一篇的篇幅远远不够，但文章末会列出相关学习资源，给认真学习上进的你。</p>
<p> <em>There is no better way to learn something than by doing.</em></p>
<h2 id="Getting-started-with-the-MindMap"><a href="#Getting-started-with-the-MindMap" class="headerlink" title="Getting started with the MindMap"></a><strong>Getting started with the MindMap</strong></h2><p>开局一张图，直接上脑图</p>
<p><a href="https://s2.ax1x.com/2020/03/07/3jOGHs.png" data-fancybox="group" data-caption="jni-c-journey" class="fancybox"><img alt="jni-c-journey" title="jni-c-journey" data-src="https://s2.ax1x.com/2020/03/07/3jOGHs.png" class="lazyload"></a></p>
<a id="more"></a>

<h2 id="First-comes-a-strong-core-foundation"><a href="#First-comes-a-strong-core-foundation" class="headerlink" title="First comes  a strong core foundation"></a>First comes  a strong core foundation</h2><ul>
<li><p>简介，下载，配置，集成，编译</p>
<blockquote>
<ul>
<li>JNI可以理解层沟通应用层(java)与底层(c)之间的桥梁，可以相互通信，相互调用。</li>
<li>下载建议下载r14以前版本，高版本，as可能会编译时找不到对应的arm</li>
<li>AS集成，配置有大体分两种种情况，一种是引用cmake.txt,一种是引用Android.mk,推荐后者，可单独ndk编译，也可放源码类编译，详情参考底部推荐资源</li>
</ul>
</blockquote>
</li>
<li><p>异常-调试</p>
<blockquote>
<ul>
<li>异常的引起大致是由于代码规范不够严谨到账，遇到异常不用慌，理性分析，google一下，你懂的！</li>
<li>ndk的调试推荐Android官网介绍的<a href="https://developer.android.google.cn/ndk/guides/ndk-stack?hl=zh_cn" target="_blank" rel="noopener">ndk-stack</a></li>
</ul>
</blockquote>
</li>
<li><p>makefile编写</p>
<blockquote>
<p>makefile 文件实质是一个编译脚本，告诉编译器改索引哪些文件，编译哪些文件，依赖哪些库，编译输出格式等。</p>
<p>建议项目分包按 src(源文件)，include(头文件)，libs(依赖库)，(test)(测试)分包设计，方便makefile索引文件</p>
<p>具体编写语法参考Android官网介绍的<a href="https://developer.android.google.cn/ndk/guides/android_mk" target="_blank" rel="noopener">ndk-Android.mk</a></p>
<p>源文件或者头文件依赖比较多，建议索引文件目录</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">makefile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line">LOCAL_PATH:= <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">PROJECT_PATH = <span class="variable">$(LOCAL_PATH)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE    := libmodule</span><br><span class="line">LOCAL_LDFLAGS += -shared</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加模块使用宏定义</span></span><br><span class="line">LOCAL_CFLAGS += -DMODULE_FLAG</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加需要包含的头文件路径，会依次遍历向下所有目录，</span></span><br><span class="line">MY_HEADER_PATH += <span class="variable">$(PROJECT_PATH)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加需要包含的头文件路径，不会向下遍历，最后一个不要加\号</span></span><br><span class="line">LOCAL_C_INCLUDES += <span class="variable">$(PROJECT_PATH)</span>../<span class="keyword">include</span></span><br><span class="line"></span><br><span class="line">LOCAL_C_INCLUDES += <span class="variable">$(<span class="built_in">shell</span> find <span class="variable">$(MY_HEADER_PATH)</span> -type d)</span>                              </span><br><span class="line"><span class="variable">$(<span class="built_in">warning</span> "<span class="variable">$(LOCAL_MODULE)</span>: LOCAL_C_INCLUDES =<span class="variable">$(LOCAL_C_INCLUDES)</span>")</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描目录下的所有源文件，会向下依次遍历</span></span><br><span class="line">MY_FILES_PATH  := <span class="variable">$(PROJECT_PATH)</span></span><br><span class="line"><span class="comment"># 添加指定C/CPP文件，只添加某个</span></span><br><span class="line">LOCAL_SRC_FILES += <span class="variable">$(LOCAL_PATH)</span>/test.c</span><br><span class="line"></span><br><span class="line">MY_FILES_SUFFIX := %.cpp %.c %.cc</span><br><span class="line">My_All_Files := <span class="variable">$(<span class="built_in">foreach</span> src_path,<span class="variable">$(MY_FILES_PATH)</span>, $(<span class="built_in">shell</span> find "<span class="variable">$(src_path)</span>" -type f)</span> ) </span><br><span class="line">My_All_Files := $(My_All_Files:<span class="variable">$(MY_CPP_PATH)</span>/./%=<span class="variable">$(MY_CPP_PATH)</span>%)</span><br><span class="line">MY_SRC_LIST  := <span class="variable">$(<span class="built_in">filter</span> <span class="variable">$(MY_FILES_SUFFIX)</span>,<span class="variable">$(My_All_Files)</span>)</span> </span><br><span class="line">MY_SRC_LIST  := $(MY_SRC_LIST:<span class="variable">$(LOCAL_PATH)</span>/%=%)</span><br><span class="line">LOCAL_SRC_FILES += <span class="variable">$(MY_SRC_LIST)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">warning</span> "<span class="variable">$(LOCAL_MODULE)</span>: LOCAL_SRC_FILES =<span class="variable">$(LOCAL_SRC_FILES)</span>")</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#添加需要链接的静态库</span></span><br><span class="line">LOCAL_STATIC_LIBRARIES  := </span><br><span class="line"></span><br><span class="line"><span class="comment">#添加需要链接的动态库</span></span><br><span class="line">LOCAL_SHARED_LIBRARIES  := </span><br><span class="line"><span class="variable">$(<span class="built_in">warning</span> "<span class="variable">$(LOCAL_MODULE)</span>: LOCAL_SHARED_LIBRARIES=<span class="variable">$(LOCAL_SHARED_LIBRARIES)</span>")</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#添加需要链接的系统库，如ndk编译，需要链接的log/android等</span></span><br><span class="line">LOCAL_LDLIBS    += -llog -landroid -lc</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定编译目标，这边编译动态库</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h2 id="Learning-is-endless-take-it-to-the-next-advance-level"><a href="#Learning-is-endless-take-it-to-the-next-advance-level" class="headerlink" title="Learning is endless, take it to the next advance level"></a>Learning is endless, take it to the next advance level</h2><ul>
<li><p>Jni-c-调用java</p>
<blockquote>
<ul>
<li><p>大致可以分为c调用java静态方法和类，实例方法和类这四类</p>
</li>
<li><p>调用流程-大致如下：</p>
<p>环境变量->找到java类->找到静态方法或者变量->设置静态方法或者变量->释放变量</p>
<p>环境变量->找到java类->创建java实例或者变量->设置实例方法或者变量->释放变量</p>
</li>
</ul>
</blockquote>
</li>
<li><p>Jni-动态注册</p>
<blockquote>
<ul>
<li><p>动态注册的好处就是可以在c文件实现函数时可以自定义函数名，另外一个好处是 解决c语言不支持函数重载(c++除外)的问题。</p>
</li>
<li><p>动态注册的大体流程是jni_onload注册本地函数，建立映射表</p>
</li>
</ul>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*native method map to java methods</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> JNINativeMethod methods[] = {</span><br><span class="line">		{<span class="string">"Init"</span>, <span class="string">"()I"</span>, (<span class="keyword">void</span> *)Init},</span><br><span class="line">		{<span class="string">"u java method name"</span>, <span class="string">"u java method sigal"</span>, u c/c++ method name},</span><br><span class="line">	};</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Register several native methods for one class.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNativeMethods</span><span class="params">(JNIEnv *env, <span class="keyword">const</span> <span class="keyword">char</span> *className,</span></span></span><br><span class="line"><span class="function"><span class="params">									 JNINativeMethod *gMethods, <span class="keyword">int</span> numMethods)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		jclass clazz;</span><br><span class="line">		LOGI(TAG, <span class="string">"++++++++++%s in"</span>, __FUNCTION__);</span><br><span class="line"></span><br><span class="line">		clazz = env->FindClass(className);</span><br><span class="line">		<span class="keyword">if</span> (clazz == <span class="literal">NULL</span>)</span><br><span class="line">		{</span><br><span class="line">			LOGE(TAG, <span class="string">"Native registration unable to find class '%s'"</span>, className);</span><br><span class="line">			<span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (env->RegisterNatives(clazz, gMethods, numMethods) < <span class="number">0</span>)</span><br><span class="line">		{</span><br><span class="line">			LOGE(TAG, <span class="string">"RegisterNatives failed for '%s'"</span>, className);</span><br><span class="line">			<span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		LOGI(TAG, <span class="string">"++++++++++%s out"</span>, __FUNCTION__);</span><br><span class="line">		<span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Register native methods for all classes we know about.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"> * returns JNI_TRUE on success.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNatives</span><span class="params">(JNIEnv *env)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		LOGI(TAG, <span class="string">"++++++++++%s in"</span>, __FUNCTION__);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!registerNativeMethods(env, classPathName, methods, <span class="keyword">sizeof</span>(methods) / <span class="keyword">sizeof</span>(methods[<span class="number">0</span>])))</span><br><span class="line">		{</span><br><span class="line">			LOGE(TAG, <span class="string">"%s err"</span>, __FUNCTION__);</span><br><span class="line">			<span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		LOGI(TAG, <span class="string">"++++++++++%s out"</span>, __FUNCTION__);</span><br><span class="line">		<span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *reserved)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		JNIEnv *env;</span><br><span class="line">		g_JavaVM = vm;</span><br><span class="line">		<span class="keyword">int</span> result;</span><br><span class="line">		LOGI(TAG, <span class="string">"++++++++++%s in"</span>, __FUNCTION__);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (vm->GetEnv((<span class="keyword">void</span> **)&env, JNI_VERSION_1_4) != JNI_OK)</span><br><span class="line">		{</span><br><span class="line">			LOGE(TAG, <span class="string">"Failed to get the environment using GetEnv()"</span>);</span><br><span class="line">			<span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (registerNatives(env) != JNI_TRUE)</span><br><span class="line">		{</span><br><span class="line">			LOGE(TAG, <span class="string">"ERROR: registerNatives failed"</span>);</span><br><span class="line">			<span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		result = JNI_VERSION_1_4;</span><br><span class="line">		LOGI(TAG, <span class="string">"++++++++++%s out"</span>, __FUNCTION__);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	}</span><br></pre></td></tr></tbody></table></figure></div></li>
<li><p>jni-线程处理</p>
<blockquote>
<p>线程处理大致是线程加锁操作，特别注意注意锁申请，释放，加锁，解锁对称调用，以免出现内存泄漏，或者程序死锁，异常</p>
</blockquote>
</li>
</ul>
<h2 id="Online-Study-Source"><a href="#Online-Study-Source" class="headerlink" title="Online Study Source"></a>Online Study Source</h2><blockquote>
<ul>
<li><a href="https://developer.android.google.cn/ndk/guides?hl=zh_cn" target="_blank" rel="noopener">Android-developers-ndk</a></li>
<li><a href="https://developer.android.google.cn/ndk/downloads/index.html" target="_blank" rel="noopener">Android-ndk-download</a></li>
<li><a href="https://www.runoob.com/w3cnote/jni-getting-started-tutorials.html" target="_blank" rel="noopener">Android-JNI入门-菜鸟教程</a></li>
<li><a href="http://www.imooc.com/learn/411" target="_blank" rel="noopener">Android-JNI入门-慕课网</a></li>
<li><a href="http://www.imooc.com/learn/918" target="_blank" rel="noopener">Android-JNI进阶</a></li>
<li><a href="https://www.cnblogs.com/dongsheng/p/4184153.html" target="_blank" rel="noopener">Android-JNI-pThreads</a></li>
</ul>
</blockquote>
<h2 id="Recommended-reading"><a href="#Recommended-reading" class="headerlink" title="Recommended reading"></a>Recommended reading</h2><blockquote>
<ul>
<li><a href="https://lairdli.top/2018/05/25/Android-Book-Recomendations/">Android 学习书籍推荐</a></li>
<li><a href="https://lairdli.top/2019/02/25/Android-3rd-Libs/">Android 常用第三方库整理</a></li>
<li><a href="https://lairdli.top/2019/01/30/Android-Journey/">Android 知识点脑图整理</a></li>
<li><a href="https://lairdli.top/2019/05/19/Android-RoadMap/">Android RoadMap</a></li>
</ul>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jni</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-技术路线图</title>
    <url>/2019/05/19/Android-RoadMap/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Android-RoadMap"><a href="#Android-RoadMap" class="headerlink" title="Android RoadMap"></a>Android RoadMap</h1><p>翻译整理国外Android开发总结的一篇博文，原文路径：</p>
<p><a href="https://link.medium.com/o13FgtRpHW" target="_blank" rel="noopener">“A Roadmap To Become A Better Android Developer” by Amit Shekhar </a></p>
<p>文章传送门比较多，信息量比较大，需自备梯子。</p>
<h2 id="Let’s-become-a-better-Android-Developer"><a href="#Let’s-become-a-better-Android-Developer" class="headerlink" title="Let’s become a better Android Developer"></a>Let’s become a better Android Developer</h2><p>本文使用于：</p>
<blockquote>
<ol>
<li>任何想要学习Android开发但不知道从哪里开始的人。</li>
<li>已经开始使用Android开发但希望变得更好的任何人。</li>
</ol>
</blockquote>
<p>本文的目标是提供适当RoadMap（路线图），以使你成为更好的Android开发人员。 如果这个RoadMap可以帮助你成为更好的Android开发人员，那么我的任务就会完成。</p>
<p> <em>There is no better way to learn something than by doing.</em></p>
<a id="more"></a>

<h2 id="Getting-started-with-the-Android-Development"><a href="#Getting-started-with-the-Android-Development" class="headerlink" title="Getting started with the Android Development"></a><strong>Getting started with the Android Development</strong></h2><blockquote>
<ol>
<li>首先，你必须有掌握Android开发必须具体的JAVA基础知识，建议书籍<a href="http://product.dangdang.com/9265169.html" target="_blank" rel="noopener">HeadFirst for Java</a></li>
<li>在PC或笔记本电脑上设置Android开发的Android Studio IDE。 <a href="https://blog.mindorks.com/install-android-studio" target="_blank" rel="noopener">传送门-Install Android Studio</a></li>
<li>参加你认为自己感觉舒适的Android应用开发课程或任何书籍。 对课程或书籍感到满意是非常重要的。 当你参加课程或阅读本书时，请始终将其应用于示例应用程序。 我的意思是说，无论你读什么，行动起来才是最重要。</li>
<li>在Android Studio中设置Kotlin。 <a href="https://blog.mindorks.com/setup-kotlin-in-android-studio" target="_blank" rel="noopener">传送门-Setup Kotlin in Android Studio</a>。</li>
<li>Android Studio IDE简介。<a href="https://blog.mindorks.com/introduction-to-android-studio-ide" target="_blank" rel="noopener">传送门-Introduction to Android Studio IDE</a>。</li>
<li>Android用户界面 -  XML和视图组件 <a href="https://blog.mindorks.com/android-user-interface-view-components" target="_blank" rel="noopener">传送门-Android User Interface — XML and View Components</a></li>
</ol>
</blockquote>
<h2 id="Improving-yourself-as-an-Android-Developer"><a href="#Improving-yourself-as-an-Android-Developer" class="headerlink" title="Improving yourself as an Android Developer"></a><strong>Improving yourself as an Android Developer</strong></h2><blockquote>
<ol>
<li>理解Activity 生命周期，因为在构建无错误的应用程序时，了解Activity生命周期非常重要。<a href="https://blog.mindorks.com/android-activity-lifecycle" target="_blank" rel="noopener">传送门- Android Activity and its LifeCycle</a></li>
<li>理解Fragment及其生命周期。 它主要是为了在大屏幕上支持更加动态和灵活的UI设计，例如平板电脑。推荐阅读 <a href>传送门-Android Fragment and its LifeCycle</a>[<a href="https://blog.mindorks.com/android-fragments-and-its-lifecycle]">https://blog.mindorks.com/android-fragments-and-its-lifecycle]</a></li>
<li>理解如何调试Android应用程序，因为它是任何开发人员最重要的技能。 Android Studio提供了一个调试器，允许您执行许多重要操作。<a href="https://developer.android.google.cn/studio/debug/" target="_blank" rel="noopener">传送门-调试您的应用|Android Developer</a></li>
<li>理解 Navigations，Task和Back Stack。 Android Activity是我们希望用户浏览的屏幕的逻辑结构。 每个Activity与其他Activity相关的关系对于良好的用户体验非常重要。<a href="https://blog.mindorks.com/android-task-and-back-stack-review-5017f2c18196" target="_blank" rel="noopener">传送门-Android Task and Back Stack Review</a></li>
<li>理解 Context 在 Android应用程序。 要开发更好的Android应用，我们必须知道什么是Context？ Android开发中的 Context 几乎无处不在，它是Android开发中最重要的东西，因此我们必须理解正确使用它。<a href="https://blog.mindorks.com/understanding-context-in-android-application-330913e32514" target="_blank" rel="noopener">传送门-Understanding Context In Android Application</a></li>
<li>理解 Threading。 由于Java虚拟机允许应用程序具有多个线程执行并发运行。 我们必须知道如何正确利用多线程环境。<a href="https://developer.android.google.cn/reference/java/lang/Thread" target="_blank" rel="noopener">传送门-Thread|Androd Deceloper</a></li>
<li>理解如何处理 Configuration 更改。 某些设备配置可在运行时更改，例如屏幕方向，键盘可用性以及用户启用多窗口模式时。 我们必须知道如何处理这些变化。<a href="https://developer.android.google.cn/guide/topics/resources/runtime-changes" target="_blank" rel="noopener">传送门-处理运行时变更|Androd Deceloper</a></li>
<li>理解数据库和SQL。<a href="https://youtu.be/FR4QIeZaPeM" target="_blank" rel="noopener">传送门-Know about db & sql|Youtube</a></li>
<li>理解REST和HTTP。<a href="https://youtu.be/Q-BpqyOT3a8" target="_blank" rel="noopener">传送门-Know about Rest & HTTP|YouTube</a></li>
<li>理解ContentProvider。 它们用于在应用程序之间共享数据。 它们提供了定义数据安全性和封装数据的机制。<a href="https://developer.android.google.cn/guide/topics/providers/content-providers" target="_blank" rel="noopener">传送门-内容提供程序|Android Developers</a></li>
<li>理解第三方Libraries。 我们有 Mindorks Android Store浏览所有重要的Android库，项目，工具和应用程序。 将它们与GitHub点赞数进行比较。<a href="https://mindorks.com/android/store" target="_blank" rel="noopener">传送门-AndroidStore|MindOrks</a></li>
<li>理解Android Core。 Looper，Handler和 HandlerThread 是Android解决异步编程问题的方法。 他们不是老派，而是一个整洁的结构，在这个结构上构建了一个复杂的android框架。<a href="https://blog.mindorks.com/android-core-looper-handler-and-handlerthread-bd54d69fe91a" target="_blank" rel="noopener">传送门-Understanding Android Core: Looper, Handler, and HandlerThread</a></li>
<li>理解Service和 IntentService 。 Service是用于在后台执行操作的组件，例如播放音乐，处理网络事务，交互内容提供者等。它没有任何UI（用户界面）。<a href="https://developer.android.google.cn/guide/components/services" target="_blank" rel="noopener">传送门-服务|Android Developers</a></li>
<li>探索何时应考虑使用 ArrayMap 以获得更好的Android应用程序性能。<a href="https://blog.mindorks.com/android-app-performance-metrics-a1176334186e" target="_blank" rel="noopener">传送门-Android App Optimization Using ArrayMap and SparseArray</a></li>
<li>了解获取内存使用情况，CPU使用率等指标的工具。在Android应用程序开发过程中，您应该持续测量一些指标。<a href="https://blog.mindorks.com/android-app-performance-metrics-a1176334186e" target="_blank" rel="noopener">传送门-Android App Performance Metrics</a></li>
<li>理解缓存实现。<a href="https://youtu.be/7lxVqqWwTb0" target="_blank" rel="noopener">传送门-Cachematters for net..|Youtube</a></li>
<li>了解优化网络请求频率。<a href>传送门-优化网络请求|Youtube</a></li>
<li>了解Android传感器，GPS，加速。<a href="https://developer.android.google.cn/guide/topics/sensors/sensors_motion" target="_blank" rel="noopener">传送门-Motion sensors|Android Developers</a></li>
<li>了解位置和地图。<a href="https://developer.android.google.cn/guide/topics/location/" target="_blank" rel="noopener">传送门-Location and Maps|Android Developers</a></li>
<li>了解如何创建自定义视图。 为开发更好的Android应用，我们必须知道如何创建自定义视图。<a href="https://developer.android.google.cn/guide/topics/ui/custom-components" target="_blank" rel="noopener">传送门-Custom View Components|Android Developers</a></li>
<li>始终更多地关注学习技巧，而不是那么多框架。 这有助于深入理解，。 举个例子，正如我说写的：<a href="https://blog.mindorks.com/how-the-android-image-loading-library-glide-and-fresco-works-962bc9d1cc40" target="_blank" rel="noopener">How the Andorid image loading library glide and fresc works?</a></li>
<li>了解如何检测和修复Android应用程序中的内存泄漏。持有对不再需要的对象的引用是一种不好的做法，在服务之后释放对象引用有助于垃圾收集器杀死该对象，这最终有助于自己解决内存泄漏问题。 如果不必要地保留对象引用，则只会导致内存泄漏。 <a href="https://blog.mindorks.com/detecting-and-fixing-memory-leaks-in-android" target="_blank" rel="noopener">传送门-Detecting and fixing memory leaks in android</a></li>
<li>了解Android app中的性能模式以及如何提高app的性能。<a href="https://youtu.be/pzfzz50W5Uo" target="_blank" rel="noopener">传送门-Garbage Collection|Youtube</a></li>
<li>了解如何优化电量使用情况 <a href="https://youtu.be/81W61JA6YHw" target="_blank" rel="noopener">传送门-|Location & Battery Drain| YouTube</a></li>
<li>了解应用程序的启动时间并努力改进它。<a href="https://youtu.be/Vw1G1s73DsY" target="_blank" rel="noopener">传送门-App Launch Time|YouTube</a></li>
<li>了解如何减少APK大小。<a href="https://blog.mindorks.com/how-to-reduce-apk-size-in-android-2f3713d2d662" target="_blank" rel="noopener">传送门-How to reduce APK size in android</a></li>
<li>了解BitMaps。 由于需要大量内存，因此很容易引起OOM。 用户喜欢内容！ 特别是当内容格式良好且看起来不错时。 图像就是非常好的内容提供载体，主要是因为它们的图像传千字的特性。 但由此也消耗大量内存。 大量的内存！<a href="https://developer.android.google.cn/topic/performance/graphics/" target="_blank" rel="noopener">传送门-Handling bitmaps|Android Developers</a></li>
<li>了解Android架构组件。<a href="https://blog.mindorks.com/what-are-android-architecture-components" target="_blank" rel="noopener">传送门-What are Android Architecture Components?</a></li>
<li>了解编写测试。<a href="https://codelabs.developers.google.com/codelabs/android-testing/index.html?index=..%2F..index#0" target="_blank" rel="noopener">传送门-Android Testing Codelab</a></li>
<li>学习 RxJava 。 如今， RxJava 是开发Android应用程序的必备条件。<a href="https://blog.mindorks.com/a-complete-guide-to-learn-rxjava-b55c0cea3631" target="_blank" rel="noopener">传送门1-A Complete Guide To Learn RxJava</a></li>
<li>学习Kotlin。<a href="https://blog.mindorks.com/a-complete-guide-to-learn-kotlin-for-android-development-b1e5d23cc2d8" target="_blank" rel="noopener">传送门1-A Complete Guide To Learn Kotlin For Android Development</a> <a href="https://www.kotlincn.net/" target="_blank" rel="noopener">传送门2-koltincn</a></li>
<li>学习Kotlin协同程序。 <a href="https://blog.mindorks.com/mastering-kotlin-coroutines-in-android-step-by-step-guide" target="_blank" rel="noopener">传送门-Mastering Kotlin Coroutines In Android - Step By Step Guide</a></li>
<li>了解依赖注入，Dagger。<a href="https://blog.mindorks.com/the-new-dagger-2-android-injector-cbe7d55afa6a" target="_blank" rel="noopener">传送门1-The New Dagger 2 Android Injector</a> <a href="https://blog.mindorks.com/introduction-to-dagger-2-using-dependency-injection-in-android-part-1-223289c2a01b" target="_blank" rel="noopener">传送门2-Introduction to Dagger 2</a></li>
<li>了解MVP架构。<a href="https://mindorks.com/course/android-mvp-introduction" target="_blank" rel="noopener">传送门-Android MVP Introduction</a></li>
<li>了解MVVM架构。<a href="https://blog.mindorks.com/essential-guide-for-designing-your-android-app-architecture-mvp-part-1-74efaf1cda40" target="_blank" rel="noopener">传送门1-Essential Guide For Designing Your Android App Architecture: MVP</a> <a href="https://github.com/MindorksOpenSource/android-mvvm-architecture" target="_blank" rel="noopener">传送门2-android-mvvm-architecture</a></li>
<li>了解如何 在Android应用程序中 应用 proguard 。 它是一种用于缩小代码，混淆代码和优化代码的工具，可以减小应用程序的大小。<a href="https://blog.mindorks.com/applying-proguard-in-an-android-application" target="_blank" rel="noopener">传送门-Applying Proguard In An Android Application</a></li>
<li>阅读有关构建安全Android应用程序的安全提示。<a href="https://developer.android.google.cn/training/articles/security-tips" target="_blank" rel="noopener">传送门-安全要点|Android Developers</a></li>
<li>了解Android有用的工具。 因为我们都很幸运地生活在一个互相帮助的世界里，每个人都可以建立分享工具。 这些工具使开发更快，生活更轻松。 不要忘记探索和使用这些工具。<a href="https://blog.mindorks.com/android-development-useful-tools-fd73283e82e3" target="_blank" rel="noopener">传送门-Android Development Useful Tools</a></li>
<li>阅读其他代码。 这是开发人员可以做的最好的事情，并学习以最佳方式编写代码。 我个人认为我从开源应用程序的代码中学到了很多东西。</li>
<li>了解Android开发最佳实践。<a href="https://blog.mindorks.com/android-development-best-practices-83c94b027fd3" target="_blank" rel="noopener">传送门1-Android Development Best Practices</a>     <a href="https://github.com/futurice/android-best-practices" target="_blank" rel="noopener">传送门2-futurice/android-best-practices</a></li>
<li>学习Git。 它是一个版本控制系统，用于跟踪计算机文件中的更改并协调多个人之间处理这些文件。<a href="https://git-scm.com/doc" target="_blank" rel="noopener">传送门-git</a></li>
<li>了解如何使用lint检查改进代码 <a href="https://developer.android.google.cn/studio/write/lint" target="_blank" rel="noopener">传送门-使用 Lint 改进您的代码</a></li>
<li>了解Gradle构建工具。<a href="https://gradle.org/" target="_blank" rel="noopener">传送门-Gradle Build Tool</a></li>
<li>为开源项目做出贡献。 我喜欢开源。 它真的帮助我提高了自己。 所以，开始为开源做贡献。<a href="https://opensource.guide/how-to-contribute/" target="_blank" rel="noopener">传送门-How to Contribute to Open Source</a></li>
<li>了解持续集成。 持续集成可确保您的代码构建在不属于您自己的计算机的服务器上。 使用像Jenkins，Circle CI，Travis等CI。</li>
<li>学会使用android studio插件，这样会让android开发变得更有效率。<a href="https://link.medium.com/8uiBDhmKOW" target="_blank" rel="noopener">传送门-How to become more productive in android with android studio plugins</a></li>
<li>始终使用Android中的新技术进行更新。 如果你错过它，你就会错过它。 始终更新的最佳方式是加入社区或关注一些Twitter帐户。</li>
<li>直接从Android开发者频道观看和了解Android系列视频中的Android性能模式。<a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE" target="_blank" rel="noopener">传送门-Android Performance Patterns|Android Developers| YouTube </a></li>
<li>最后。 如果你想要一份很棒的工作，请从这里准备 <a href="https://github.com/MindorksOpenSource/android-interview-questions" target="_blank" rel="noopener">传送门-android-interview-questions</a></li>
</ol>
</blockquote>
<h2 id="Recommended-reading"><a href="#Recommended-reading" class="headerlink" title="Recommended reading"></a>Recommended reading</h2><blockquote>
<ol>
<li><a href="https://lairdli.top/2018/05/25/Android-Book-Recomendations/">Android 学习书籍推荐</a></li>
<li><a href="https://lairdli.top/2019/02/25/Android-3rd-Libs/">Android 常用第三方库整理</a></li>
<li><a href="https://lairdli.top/2019/01/30/Android-Journey/">Android 知识点脑图整理</a></li>
<li><a href="https://blog.mindorks.com/how-to-become-a-complete-android-developer-110d7ef91f2a" target="_blank" rel="noopener">How To Become A Complete Android Developer</a></li>
<li><a href="https://swift.ctolib.com/article/wiki/40512" target="_blank" rel="noopener">Awesome Android Complete Reference </a></li>
<li><a href="https://developer.android.google.cn/" target="_blank" rel="noopener">Android Developers 中文网</a></li>
</ol>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-常用第三方开源框架梳理</title>
    <url>/2019/02/25/Android-3rd-Libs/</url>
    <content><![CDATA[<html><head></head><body><p>总结个人Android开发过程中常用的（经典的）第三方库。</p>
<p>方便技术选型，记忆回顾。持续 更新中……</p>
<h2 id="Mind-Mapping"><a href="#Mind-Mapping" class="headerlink" title="Mind Mapping"></a>Mind Mapping</h2><p>对应如下思维导图所描述，第三方库按功能分，大致可以分为如下几类：</p>
<blockquote>
<ul>
<li><strong>UI</strong></li>
<li><strong>WebView</strong></li>
<li><strong>网络请求-Net Requst</strong></li>
<li><strong>数据解析-Data Parse</strong></li>
<li><strong>数据库    -DataBase</strong></li>
<li><strong>图片加载-Image Load</strong></li>
<li><strong>缓存框架-Cache</strong></li>
<li><strong>依赖注册-Dependency Injection</strong></li>
<li><strong>响应式  -Reactive</strong></li>
<li><strong>事件总线-Event Bus</strong></li>
<li><strong>权限适配-Permissions</strong></li>
<li><strong>架构组件–Componentization</strong> </li>
</ul>
</blockquote>
<p><a href="https://s2.ax1x.com/2020/03/07/3jLXnJ.png" data-fancybox="group" data-caption="android-3rd-libs" class="fancybox"><img alt="android-3rd-libs" title="android-3rd-libs" data-src="https://s2.ax1x.com/2020/03/07/3jLXnJ.png" class="lazyload"></a></p>
<a id="more"></a>

<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><blockquote>
<ul>
<li><p>[CircleImageView] (<a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="noopener">https://github.com/hdodenhof/CircleImageView</a>) 提供Android圆角图片库</p>
</li>
<li><p><a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="noopener">PhotoView</a> 通过各种触摸手势实现支持缩放的Android Image View</p>
</li>
<li><p><a href="https://github.com/YoKeyword/Fragmentation" target="_blank" rel="noopener">Fragmentation</a> 一个功能强大的库用于管理Android-Fragment！</p>
</li>
<li><p><a href="https://github.com/mikepenz/MaterialDrawer" target="_blank" rel="noopener">MaterialDrawer</a> 适用于Android项目的灵活，易用，一体化抽屉库</p>
</li>
<li><p><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="noopener">material-dialogs</a> 适用于Kotlin和Android的漂亮流畅的对话框API</p>
</li>
<li><p><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="noopener">BaseRecyclerViewAdapterHelper</a> 功能强大且灵活的RecyclerAdapter</p>
</li>
<li><p><a href="https://github.com/mikepenz/FastAdapter" target="_blank" rel="noopener">FastAdapter</a> 快速且易用的适配器库</p>
</li>
<li><p><a href="https://github.com/zxing/zxing" target="_blank" rel="noopener">zxing</a> ZXing（“Zebra Crossing”）用于Java，Android的条形码扫描库</p>
</li>
<li><p><a href="https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">Lottie</a> 在Android和iOS，Web和React Native上渲染After Effects动画库</p>
</li>
</ul>
</blockquote>
<h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><blockquote>
<ul>
<li><p><a href="https://github.com/Justson/AgentWeb" target="_blank" rel="noopener">AgentWeb</a> AgentWeb是一个基于Android WebView的强大库</p>
</li>
<li><p><a href="https://crosswalk-project.org/index_zh.html" target="_blank" rel="noopener">Crosswalk</a> 采用了 <code>Chromenium</code> 内核，是一款开源的 <code>web</code> 引擎</p>
</li>
<li><p><a href="https://x5.tencent.com/" target="_blank" rel="noopener">X5</a> X5内核是腾讯基于优秀开源Webkit [1]  深度优化的浏览器渲染引擎</p>
</li>
<li><p><a href="https://github.com/JackyAndroid/AndroidChromium" target="_blank" rel="noopener">AndroidChromium</a>  google开源的Android版本的Chormium浏览器源码</p>
</li>
</ul>
</blockquote>
<h2 id="Net-Requst"><a href="#Net-Requst" class="headerlink" title="Net Requst"></a>Net Requst</h2><blockquote>
<ul>
<li><a href="https://github.com/google/volley" target="_blank" rel="noopener">Volley</a>  google开源HTTP库，它使Android应用程序的网络更容易，最重要的是，更快</li>
<li><a href="https://github.com/koush/AndroidAsync" target="_blank" rel="noopener">AndroidAsync</a> 一个底层网络协议库，更多解锁功能可以结合<a href="https://github.com/koush/ion" target="_blank" rel="noopener">Ion</a> 使用。</li>
<li><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">OkHttp</a> square出品，适用于Android和Java应用程序的HTTP + HTTP / 2客户端。</li>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="noopener">Retrofit</a> square出品，适用于Android和Java的类型安全的HTTP客户端。</li>
<li><a href="https://github.com/eclipse/paho.mqtt.android" target="_blank" rel="noopener">paho.mqtt.android</a>  适用于MQTT </li>
<li><a href="https://github.com/karlmdavis/ksoap2-android" target="_blank" rel="noopener">ksoap2-android</a> 适用于Android平台的轻量级高效SOAP库。</li>
<li><a href="https://github.com/NanoHttpd/nanohttpd" target="_blank" rel="noopener">nanohttpd</a>  适用于Android-Java中的小巧，易于嵌入的HTTP服务器</li>
</ul>
<p>除以上开源第三方库外，Android还自带以下网络请求模块</p>
<ul>
<li>HttpUrlConnection 适用于Android 2.3及以上版本，api简单，易扩展升级</li>
<li>HttpClient 可兼容Android 2.3一下版本，api数量多，不易扩展</li>
<li>AsyncTask Android封装好的轻量级异步类，使用时需实现子类</li>
</ul>
</blockquote>
<h2 id="Data-Parse"><a href="#Data-Parse" class="headerlink" title="Data Parse"></a>Data Parse</h2><blockquote>
<ul>
<li><p><a href="https://github.com/google/gson" target="_blank" rel="noopener">Gson/Json</a> google出品，一个Java序列化/反序列化库，用于将Java对象转换为JSON并返回</p>
</li>
<li><p><a href="https://github.com/FasterXML/jackson" target="_blank" rel="noopener">JackSon/Json </a> 用于处理JSON和XML格式化的类库</p>
</li>
<li><p><a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">FastJson/Json</a> alibaba出品，用于Java的快速JSON解析器/生成器</p>
</li>
<li><p><a href="https://github.com/jhy/jsoup" target="_blank" rel="noopener">Jsoup/Html</a> 用于Java解析HTML</p>
</li>
<li><p><a href="https://github.com/dom4j/dom4j" target="_blank" rel="noopener">dom4j</a> 用于Xml解析</p>
</li>
</ul>
<p>除此之外，Android还自带XMl解析，主要分三类</p>
<ul>
<li>SAX(Simple API for XML)</li>
<li>DOM</li>
<li>POll (<a href="http://xmlpull.org/" target="_blank" rel="noopener">XmlPull</a>)</li>
</ul>
</blockquote>
<h2 id="DataBase"><a href="#DataBase" class="headerlink" title="DataBase"></a>DataBase</h2><blockquote>
<ul>
<li><p><a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="noopener">LitePal</a>  郭林大神开源的一款基于ORM模式的SQLite数据库框架</p>
</li>
<li><p><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">GreenDao</a> 一款轻松快速的Android ORM解决方案，可将对象映射到SQLite数据库</p>
</li>
<li><p><a href="https://github.com/objectbox/objectbox-java" target="_blank" rel="noopener">Object-Box</a>ObjectBox是一个用于对象的超快速轻量级数据库</p>
</li>
<li><p><a href="https://github.com/square/sqlbrite" target="_blank" rel="noopener">SQLBrite</a> 对 Android 系统的<code>SQLiteOpenHelper</code>和 <code>ContentResolver</code> 的轻量级封装,配合Rxjava使用</p>
</li>
<li><p><a href="https://github.com/realm/realm-java" target="_blank" rel="noopener">Realm</a> 是一个移动数据库：SQLite和ORM的替代品</p>
<p>除此之外，<a href="https://developer.android.google.cn/jetpack" target="_blank" rel="noopener">Android Jetpack</a>架构组件中自带的<a href="https://developer.android.google.cn/topic/libraries/architecture/room" target="_blank" rel="noopener">Room</a>组件，也是基于ORM的SQlite数据库框架</p>
</li>
</ul>
</blockquote>
<h2 id="Image-Load"><a href="#Image-Load" class="headerlink" title="Image Load"></a>Image Load</h2><blockquote>
<ul>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="noopener">Android-Universal-Image-Loader</a>老牌图片加载，显示，缓存库</li>
<li><a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a> google推荐的图片加载，显示，缓存库</li>
<li><a href="https://github.com/square/picasso" target="_blank" rel="noopener">Picasso</a> 适用于Android的强大图像下载和缓存库</li>
<li><a href="https://github.com/facebook/fresco" target="_blank" rel="noopener">Fresco</a> facebook出品，用于管理图像及其使用内存的Android库</li>
</ul>
</blockquote>
<h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><blockquote>
<ul>
<li><a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="noopener">DiskLruCache</a>基于磁盘的LRU缓存的Java实现，专门针对Android兼容性</li>
</ul>
</blockquote>
<h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><blockquote>
<ul>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">ButterKnife</a> 将Android视图和回调绑定到字段和方法,省去findviewbyid</li>
<li><a href="https://github.com/square/dagger" target="_blank" rel="noopener">Dagger</a> 适用于Android和Java的快速依赖注入器,Ioc,依赖解耦，控制反转，建议MVP架构搭配适用 </li>
</ul>
</blockquote>
<h2 id="Reactive"><a href="#Reactive" class="headerlink" title="Reactive"></a>Reactive</h2><blockquote>
<ul>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a> JVM的Reactive Extensions - 一个使用Java VM的可观察序列组成异步和基于事件的程序的库</li>
<li>[RxAndroid </li>
<li>](<a href="https://github.com/ReactiveX/RxAndroid)适用于Android的RxJava绑定" target="_blank" rel="noopener">https://github.com/ReactiveX/RxAndroid)适用于Android的RxJava绑定</a></li>
<li><a href="https://github.com/JakeWharton/RxBinding" target="_blank" rel="noopener">RxBinding</a> 用于Android UI小部件的RxJava绑定API。</li>
<li><a href="https://github.com/google/agera" target="_blank" rel="noopener">Agera</a> Android的反应式编程，Agera是一组类和接口，用于帮助编写Android的功能，异步和响应式应用程序</li>
</ul>
</blockquote>
<h2 id="Event-Bus"><a href="#Event-Bus" class="headerlink" title="Event Bus"></a>Event Bus</h2><blockquote>
<ul>
<li><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">EventBus </a> 适用于Android和Java的事件总线，可简化活动，碎片，线程，服务等之间的通信。减少代码，提高质量。</li>
<li><a href="https://github.com/square/otto" target="_blank" rel="noopener">Otto</a> 基于Guava的事件总线的Android支持库，组件化通讯，减低耦合性</li>
</ul>
</blockquote>
<h2 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h2><blockquote>
<ul>
<li><p><a href="https://github.com/permissions-dispatcher/PermissionsDispatcher" target="_blank" rel="noopener">PermissionsDispatcher</a> 基于简单注释的API，用于处理Android运行时权限</p>
</li>
<li><p><a href="https://github.com/tbruyelle/RxPermissions" target="_blank" rel="noopener">RxPermissions</a> 能配合RxJava与新的Android M权限模型一起使用，用于处理Android运行时权限</p>
</li>
<li><p><a href="https://github.com/czy1121/settingscompat" target="_blank" rel="noopener">SettingsCompat</a> 特殊权限(Special Permissions)兼容库，悬浮窗权限(SYSTEM_ALERT_WINDOW)与系统设置修改权限(WRITE_SETTINGS)</p>
</li>
</ul>
</blockquote>
<h2 id="Componentization"><a href="#Componentization" class="headerlink" title="Componentization"></a>Componentization</h2><blockquote>
<ul>
<li><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">ARouter</a>  alibaba出品，帮助 Android App 进行组件化改造的路由框架</li>
<li><a href="https://github.com/meituan/WMRouter" target="_blank" rel="noopener">WMRouter</a> 美团出品，是一款Android路由框架，基于组件化的设计思路，有功能灵活、使用简单的特点</li>
</ul>
</blockquote>
<h2 id="Utlis"><a href="#Utlis" class="headerlink" title="Utlis"></a>Utlis</h2><blockquote>
<ul>
<li><p><a href="https://github.com/orhanobut/logger" target="_blank" rel="noopener">Logger</a> 一款简易，精致，功能强大的Android日志库</p>
</li>
<li><p><a href="https://github.com/JakeWharton/timber" target="_blank" rel="noopener">timber</a> 一款小型可扩展API的日志类，可在Android的普通Log类之上提供实用程序，易集成扩展</p>
</li>
<li><p><a href="https://github.com/mikepenz/AboutLibraries" target="_blank" rel="noopener">AboutLibraries</a> 显示第三方库信息的库，一般在开源项目类引用。</p>
</li>
</ul>
</blockquote>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>其他扩展可参考</p>
<blockquote>
<ul>
<li><a href="https://www.jianshu.com/p/383468f58fe1" target="_blank" rel="noopener">Android 开源项目及库汇总</a></li>
<li><a href="https://github.com/JsonChao/Awesome-Third-Library-Source-Analysis" target="_blank" rel="noopener">Awesome-Third-Library-Source-Analysis</a></li>
<li><a href="https://mindorks.com/android/store" target="_blank" rel="noopener">Android Store</a></li>
</ul>
</blockquote>
<p>优秀的开源库数不胜数，以上总结Android常用框架，不要求全部掌握，但至少保证如下几点：</p>
<blockquote>
<ol>
<li>不必重复造梯子，善用<a href="https://www.google.com.hk/" target="_blank" rel="noopener">google</a>，<a href="/github.com">github</a>等，以便技术选型。</li>
<li>对照着官网,能会使用，跟进实际项目需求能对比选择合适3RD-Lib。</li>
<li>经典的，使用频率比较高的开源框架，需理解其设计思想。</li>
</ol>
</blockquote>
<p>好记性不如烂笔头，所用即所知，所思即所得。</p>
<p>共勉学习之。</p>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>开源框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-技术路线图谱梳理</title>
    <url>/2019/01/30/Android-Journey/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Android-Journey"><a href="#Android-Journey" class="headerlink" title="Android Journey"></a>Android Journey</h1><p>  新的2019年，新的开始，做一个Android相关知识整理，资源聚合。</p>
<a id="more"></a>

<h2 id="01-Core-Java"><a href="#01-Core-Java" class="headerlink" title="01.Core Java"></a>01.Core Java</h2><p>Main Points</p>
<blockquote>
<p>OOP思想，接口与抽象，迭代与枚举，组合与继承，重载与重写，修饰符，多态与继承，多继承</p>
<p>集合与泛型。对象与基元，Java内存模型与垃圾回收机制，并发，异常，其他……</p>
</blockquote>
<p>References</p>
<blockquote>
<ol>
<li><a href="https://blog.csdn.net/bjweimengshu/article/details/78878593" target="_blank" rel="noopener">Java编程思想-导读</a></li>
<li><a href="https://github.com/MindorksOpenSource/android-interview-questions#core-java" target="_blank" rel="noopener">mindorks-android-interview-questions-core-java</a></li>
<li><a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener">runoob-Java</a>  </li>
</ol>
</blockquote>
<h2 id="02-Core-Android"><a href="#02-Core-Android" class="headerlink" title="02.Core Android"></a>02.Core Android</h2><p>Main Points</p>
<blockquote>
<p>base（四大组件，app structure ，Context, AndroidManiefest, Application）</p>
<p>Activity,Fragment,Lifecycle,launch mode,ViewGroup,View,canvas,SurfaceView,Constraint,</p>
<p>view tree,<code>ListView</code> ,RecyclerView, ViewHolder,SnapHelper,<code>Dialog</code> ,Toast,Intents , Broadcasting,Services,Inter-process Communication,Long-running Operations,</p>
<p>Working With Multimedia Content,Data Saving,Look and Feel,Memory Optimizations,</p>
<p>Battery Life Optimizations,Supporting Different Screen Sizes,Permissions,Native Programming,</p>
<p>Android System Internal,Debugging and Programming Tools,Others</p>
</blockquote>
<p>References</p>
<blockquote>
<p>1.《第一行代码》《Android进阶解密》《Android开发艺术探索》《Android进阶之光》</p>
<p>2.<a href="https://github.com/MindorksOpenSource/android-interview-questions#core-android" target="_blank" rel="noopener">mindorks-android-interview-question-core-android</a></p>
<p>3.<a href="https://developer.android.google.cn/courses/fundamentals-training/overview-v2" target="_blank" rel="noopener">google-fundamentals-training</a></p>
<p>4.<a href="https://developers.google.cn/training/courses/android-advanced" target="_blank" rel="noopener">google-android-advanced</a></p>
<p>5.<a href="https://developers.google.cn/" target="_blank" rel="noopener">google-android-developer</a></p>
</blockquote>
<h2 id="03-Core-Kotlin"><a href="#03-Core-Kotlin" class="headerlink" title="03.Core Kotlin"></a>03.Core Kotlin</h2><p>Main Points</p>
<blockquote>
<p>基础语法 习惯用法 编码规范  类与对象 函数与 Lambda 表达式</p>
<p>多平台程序设计原生 协程 工具 其他等</p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://www.kotlincn.net/" target="_blank" rel="noopener">Kotlin 语言中文站</a></p>
<p><a href="http://kotlinlang.org/" target="_blank" rel="noopener"></a><a href="https://kotlinlang.org/" target="_blank" rel="noopener">Kotlin Programming Language</a></p>
<p><a href="http://www.runoob.com/kotlin/kotlin-tutorial.html" target="_blank" rel="noopener">runoob-kotlin</a></p>
<p><a href="https://cn.udacity.com/course/kotlin-bootcamp-for-programmers--ud9011" target="_blank" rel="noopener">Kotlin Bootcamp for Programmers by google</a></p>
<p><a href="https://hltj.gitbooks.io/kotlin-reference-chinese/content/" target="_blank" rel="noopener">kotlin 中文pdf</a></p>
</blockquote>
<h2 id="04-Core-Flutter"><a href="#04-Core-Flutter" class="headerlink" title="04.Core Flutter"></a>04.Core Flutter</h2><p>Main Points</p>
<blockquote>
<p>基础Widget  容器类Widget  可滚动Widget  功能型Widget </p>
<p>时间处理与通知 动画 自定义Widget 文件操作与网络请求 </p>
<p>包与插件 国际化 核心原理</p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://flutter.io/" target="_blank" rel="noopener">Flutter - Beautiful native apps in record time</a></p>
<p><a href="https://flutterchina.club/" target="_blank" rel="noopener">Flutter中文网</a></p>
<p><a href="https://flutter-io.cn/" target="_blank" rel="noopener">Flutter 社区中文资源</a></p>
<p><a href="https://book.flutterchina.club/" target="_blank" rel="noopener">flutter实战</a></p>
</blockquote>
<h2 id="05-Jetpack"><a href="#05-Jetpack" class="headerlink" title="05.Jetpack"></a>05.Jetpack</h2><p>Main Points</p>
<blockquote>
<p>基础  AppCompat Android KTX 多dexc处理 测试</p>
<p>架构 Databinding Lifecycles Livedata Navigation Paging Room  ViewModel WorkManger</p>
<p>行为 下载管理器 媒体播放 通知 权限 偏好设置 共享 切片 </p>
<p>界面 动画和过度 Auto 表情符号 Fragment 布局 调试板 TV </p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://blog.mindorks.com/what-is-android-jetpack-and-why-should-we-use-it" target="_blank" rel="noopener">minorks-jetpack</a></p>
<p><a href="https://developer.android.com/jetpack/?hl=zh-cn" target="_blank" rel="noopener">Android Jetpack - Android Developers</a></p>
</blockquote>
<h2 id="06-Aosp"><a href="#06-Aosp" class="headerlink" title="06.Aosp"></a>06.Aosp</h2><p>Main Points</p>
<blockquote>
<p>下载 编译 导入 AndroidStudio 源码分析 学习 调试</p>
<p>framework sdk ndk  </p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://source.android.google.cn/" target="_blank" rel="noopener">google-aosp</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学开源镜像</a></p>
<p><a href="https://www.jianshu.com/p/2beae17c9b12" target="_blank" rel="noopener">ubuntu-aosp编译</a></p>
<p><a href="http://wuxiaolong.me/categories/AOSP/" target="_blank" rel="noopener">wuxiaolong-aosp-blog</a></p>
</blockquote>
<h2 id="07-Test"><a href="#07-Test" class="headerlink" title="07.Test"></a>07.Test</h2><p>Main Points</p>
<blockquote>
<p>单元测试</p>
<p>UI测试</p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://developer.android.google.cn/studio/test/?hl=zh-cn" target="_blank" rel="noopener">测试应用 | Android Developers</a></p>
<p><a href="https://www.jianshu.com/p/03118c11c199" target="_blank" rel="noopener">在Android Studio中进行单元测试和UI测试</a></p>
</blockquote>
<h2 id="08-Tools-And-Technologies"><a href="#08-Tools-And-Technologies" class="headerlink" title="08.Tools And Technologies"></a>08.Tools And Technologies</h2><p>Main Points</p>
<blockquote>
<p>RxJava2 Dagger2  Okhttp  EventBus GreenDao  Glide Lenkcanary</p>
<p>Android Development Useful Tools </p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://github.com/JsonChao/Awesome-Third-Library-Source-Analysis" target="_blank" rel="noopener">Awesome-Third-Library-Source-Analysis</a></p>
</blockquote>
<h2 id="09-TV"><a href="#09-TV" class="headerlink" title="09.TV"></a>09.TV</h2><p>Main Points</p>
<blockquote>
<p>DVB OTT DLNA Ngod  Vod Rtsp</p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://www.onelib.biz/blog/stb" target="_blank" rel="noopener">OneLib 智库</a></p>
<p><a href="https://www.jianshu.com/p/91b508b0260b" target="_blank" rel="noopener">DLNA 与 UPnP 初探</a></p>
<p><a href="https://www.jianshu.com/p/5a260182cc82/" target="_blank" rel="noopener">Android设备投屏技术:协议&概念</a></p>
<p><a href="https://zh.wikipedia.org/zh-hans/%E5%8D%B3%E6%99%82%E4%B8%B2%E6%B5%81%E5%8D%94%E5%AE%9A" target="_blank" rel="noopener">RTSP - 维基百科</a></p>
</blockquote>
<h2 id="10-Architecture"><a href="#10-Architecture" class="headerlink" title="10. Architecture"></a>10. Architecture</h2><p>Main Points</p>
<blockquote>
<p>MVP  Presenter Model  MVC  MVI Control  MVVC</p>
<p>Repository Pattern</p>
<p>Clean Code</p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://github.com/MindorksOpenSource/android-interview-questions#architecture" target="_blank" rel="noopener">mindorks-android-interview-questions-architecture</a></p>
</blockquote>
<h2 id="11-Design-Patterns"><a href="#11-Design-Patterns" class="headerlink" title="11.Design Patterns"></a>11.Design Patterns</h2><p>Main Points</p>
<blockquote>
<p>Creational patterns  </p>
<p>Structural patterns</p>
<p>Behavioural patterns</p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://github.com/MindorksOpenSource/android-interview-questions#core-java#What%20are%20the%20design%20patterns?" target="_blank" rel="noopener">What are the design patterns?</a></p>
<p><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">runoob-设计模式</a></p>
<p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">图说设计模式</a></p>
<p>《Head First 设计模式》、《Android进阶之光》</p>
</blockquote>
<h2 id="12-Tools"><a href="#12-Tools" class="headerlink" title="12.Tools"></a>12.Tools</h2><p>Main Points</p>
<blockquote>
<p>git genkins sonarqube icon tingpng  dummyimage</p>
</blockquote>
<p>References</p>
<blockquote>
<p><a href="https://git-scm.com/" target="_blank" rel="noopener">git-scm</a></p>
<p><a href="http://try.github.io/" target="_blank" rel="noopener">git-github</a></p>
<p><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">git-online</a></p>
<p><a href="https://tinypng.com/" target="_blank" rel="noopener">tingpng</a></p>
<p><a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">androiddevicetools</a></p>
<p><a href="https://dummyimage.com/" target="_blank" rel="noopener">dummyimage</a></p>
</blockquote>
<h2 id="13-Data-Structures-And-Algorithms"><a href="#13-Data-Structures-And-Algorithms" class="headerlink" title="13.Data Structures And Algorithms"></a>13.Data Structures And Algorithms</h2><p>Main Points</p>
<blockquote>
<p>Lettcode</p>
</blockquote>
<p>References</p>
<blockquote>
<p>《剑指Offer》、《编程之美》、《编程珠玑》、《算法》</p>
</blockquote>
<h2 id="14-Computer"><a href="#14-Computer" class="headerlink" title="14.Computer"></a>14.Computer</h2><p>Main Points</p>
<blockquote>
<p>计算机操作系统 Linux 网络 </p>
</blockquote>
<p>References</p>
<blockquote>
<p>《现代操作系统》</p>
<p>《Linux私房菜 基础学习篇》</p>
<p>《计算机网络：自顶向下方法》(原书第6版)、《HTTP权威指南》、《图解TCP/IP》</p>
</blockquote>
<h2 id="15-Study-Site"><a href="#15-Study-Site" class="headerlink" title="15.Study Site"></a>15.Study Site</h2><blockquote>
<p>1.<a href="https://developer.android.google.cn/" target="_blank" rel="noopener">Android-Developer</a></p>
<p>2.<a href="https://developers.google.cn/china/" target="_blank" rel="noopener">Goole-中文开发者</a></p>
<p>3.<a href="http://www.wanandroid.com/index" target="_blank" rel="noopener">鸿洋大神的博客网站</a></p>
<p>4.<a href="https://mindorks.com/" target="_blank" rel="noopener">印度有名的Android学习社区</a></p>
<p>5.<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰的学习网站</a></p>
<p>6.<a href="https://flutter-io.cn/" target="_blank" rel="noopener">flutter中文社区</a></p>
<p>7.<a href="https://www.onelib.biz/blog" target="_blank" rel="noopener">oneLib智库，DVB ，SI/PSI 总结的很好</a></p>
<p>8.<a href="https://source.android.google.cn/" target="_blank" rel="noopener">Android 开源源码工程</a></p>
<p>9.<a href="http://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a></p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发-经典书籍梳理</title>
    <url>/2018/05/25/Android-Book-Recomendations/</url>
    <content><![CDATA[<html><head></head><body><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="基本语法-如继承、异常、引用、泛型等"><a href="#基本语法-如继承、异常、引用、泛型等" class="headerlink" title="基本语法(如继承、异常、引用、泛型等)"></a>基本语法(如继承、异常、引用、泛型等)</h3><p><a href="https://book.douban.com/subject/25762168/" target="_blank" rel="noopener">Java核心技术 卷I</a>（适合入门）</p>
<p> <a href="https://book.douban.com/subject/5362860" target="_blank" rel="noopener">Java解惑</a> （介绍Java代码是什么样的）</p>
<p><a href="https://book.douban.com/subject/3360807/" target="_blank" rel="noopener">Effective Java中文版</a>（如何写好的Java代码）</p>
<h3 id="多线程、并发"><a href="#多线程、并发" class="headerlink" title="多线程、并发"></a>多线程、并发</h3><p><a href="https://book.douban.com/subject/10484692/" target="_blank" rel="noopener">Java并发编程实战</a> （系统全面的介绍了Java的并发，如何设计支持并发的数据结构）</p>
<h3 id="Java-7"><a href="#Java-7" class="headerlink" title="Java 7"></a>Java 7</h3><p><a href="https://book.douban.com/subject/24841235/" target="_blank" rel="noopener">Java程序员修炼之道</a> （详细的介绍Java 7 的新特性）</p>
<h3 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h3><p><a href="https://book.douban.com/subject/26274206/" target="_blank" rel="noopener">写给大忙人看的Java SE 8</a></p>
<p><a href="https://book.douban.com/subject/26587213/" target="_blank" rel="noopener">函数式编程思维</a></p>
<h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><p><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">深入理解Java虚拟机</a> （并不是那么难，Java程序员都该看看）</p>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p><a href="https://book.douban.com/subject/25828043/" target="_blank" rel="noopener">Java性能优化权威指南</a> （后面的章节好像用处不大，前面有些部分还是值得看）</p>
<p><a href="http://union.click.jd.com/jdc?d=VUed84" target="_blank" rel="noopener">《Thinking in java》</a></p>
<p><a href="http://union.click.jd.com/jdc?d=qj7efm" target="_blank" rel="noopener">《Effective Java》</a></p>
<a id="more"></a>

<h2 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h2><p>算法时间复杂度、空间复杂度的基本认知</p>
<p>熟悉常用数据结构：链表、队列、散列表、树等；</p>
<p>递归、分支等基本思想；</p>
<p>常用算法应用：排序、查找、比较等</p>
<p><a href="https://book.douban.com/subject/1139426/" target="_blank" rel="noopener">数据结构与算法分析</a> （涵盖面比较全、示例是Java语言）</p>
<p><a href="https://book.douban.com/subject/26337727/" target="_blank" rel="noopener">算法设计与分析基础</a> （实用主义的典型、偏算法设计）</p>
<p><a href="https://book.douban.com/subject/3227098/" target="_blank" rel="noopener">编程珠玑</a> （实践型算法数据）</p>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>对Linux/OS的基本认知</p>
<p>Linux的常用命令</p>
<p><a href="https://book.douban.com/subject/4889838/" target="_blank" rel="noopener">鸟哥的Linux私房菜</a></p>
<p><a href="https://book.douban.com/subject/6097773/" target="_blank" rel="noopener">Linux内核设计与实现(原书第3版)</a> （很精炼的语言描述清楚了内核算法）</p>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>Http/Https</p>
<p>TCP/IP</p>
<p><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="noopener">图解HTTP</a></p>
<p><a href="https://book.douban.com/subject/24737674/" target="_blank" rel="noopener">图解TCP/IP</a></p>
<p>进阶<a href="https://book.douban.com/subject/1088054/" target="_blank" rel="noopener">TCP/IP详解</a></p>
<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="Android入门："><a href="#Android入门：" class="headerlink" title="Android入门："></a>Android入门：</h2><p><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="noopener">Android Training</a></p>
<p><a href="https://developer.android.com/guide/index.html" target="_blank" rel="noopener">Android API Guides</a></p>
<p>胡凯推荐理由：入门使用官方的这两份文档是最好不过的了，没有比这个更权威，更准确的Android学习资料了。中文书可以随便买两本入门，配合一起看看就好了。在实践的过程中多参考官方的Sample Code，多按照官方的推荐进行代码实践！</p>
<p>汤涛推荐理由：官方文档，权威专业，入门不二之选，正确的入门姿势，对后续的成长帮助非常之大。</p>
<p><a href="http://union.click.jd.com/jdc?d=OiNvls" target="_blank" rel="noopener">《第一行代码》</a></p>
<p><a href="http://union.click.jd.com/jdc?d=i7Htvy" target="_blank" rel="noopener">《疯狂Android讲义》</a></p>
<p><a href="http://item.jd.com/11223114.html" target="_blank" rel="noopener">《Android4高级编程》</a> </p>
<p><a href="http://item.jd.com/11431307.html" target="_blank" rel="noopener">《Android编程权威指南》</a></p>
<h2 id="Android进阶"><a href="#Android进阶" class="headerlink" title="Android进阶"></a>Android进阶</h2><p><a href="http://item.jd.com/11791229.html" target="_blank" rel="noopener">《App研发录》</a></p>
<p><a href="http://item.jd.com/11758334.html" target="_blank" rel="noopener">《Android群英传》</a></p>
<p><a href="http://union.click.jd.com/jdc?d=OLlkvE" target="_blank" rel="noopener">《深入理解Android》</a></p>
<p><a href="http://union.click.jd.com/jdc?d=xQb0ys" target="_blank" rel="noopener">《Android开发艺术探索》</a></p>
<p><a href="http://item.jd.com/11838754.html" target="_blank" rel="noopener">《Android系统源代码情景分析》</a></p>
<p><a href="http://union.click.jd.com/jdc?d=Rvhkhz" target="_blank" rel="noopener">《Clean Code》</a></p>
<p><a href="http://union.click.jd.com/jdc?d=M1G62A" target="_blank" rel="noopener">《HeadFirst设计模式》</a></p>
<p><a href="http://union.click.jd.com/jdc?d=gvVU3X" target="_blank" rel="noopener">《重构：改善既有代码的设计》</a></p>
<h2 id="Android底层"><a href="#Android底层" class="headerlink" title="Android底层"></a>Android底层</h2><p>《深入理解Android ***》系列书籍，邓凡平老师写的系列。</p>
<p><a href="http://item.jd.com/11793928.html" target="_blank" rel="noopener">《Android源码设计模式》</a>，结合设计模式分析源码</p>
<p><a href="http://item.jd.com/10002153064.html" target="_blank" rel="noopener">《Android框架揭秘》</a>，底层架构的一本好书</p>
<p><a href="http://union.click.jd.com/jdc?d=prBOg1" target="_blank" rel="noopener">《Linux内核设计与实现》</a></p>
<p><a href="http://union.click.jd.com/jdc?d=jgOT1u" target="_blank" rel="noopener">《深入理解Linux内核》</a></p>
<hr>
<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><h2 id="基础工具"><a href="#基础工具" class="headerlink" title="基础工具"></a>基础工具</h2><p>IDE、Git、Maven</p>
<p><a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">AndroidStudio</a></p>
<p><a href="http://iissnan.com/progit/html/zh/ch1_0.html" target="_blank" rel="noopener">Git权威指南中文手册</a></p>
<h2 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h2><p>代码整洁</p>
<p>码质量</p>
<p>码重构</p>
<p><a href="https://book.douban.com/subject/10797189/" target="_blank" rel="noopener">编写可读代码的艺术</a> （来自Google工程师，专注于代码可读性）</p>
<p><a href="https://book.douban.com/subject/4199741/" target="_blank" rel="noopener">代码整洁之道</a>（使用面向对象+敏捷开发原则编写清晰可维护的代码）</p>
<p><a href="https://book.douban.com/subject/4262627/" target="_blank" rel="noopener">重构-改善既有代码的设计</a> （学习改善已有代码）</p>
<p><a href="https://book.douban.com/subject/1173730/" target="_blank" rel="noopener">重构手册</a> （改善代码的实际操作）</p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>23种常见设计模式</p>
<p><a href="https://book.douban.com/subject/2334288/" target="_blank" rel="noopener">大话设计模式</a></p>
<p><a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener">Head First设计模式</a>(两本入门级的设计模式书籍)</p>
<p><a href="https://book.douban.com/subject/1052241/" target="_blank" rel="noopener">设计模式-可复用面向对象软件的基础</a>（设计模式在实际中的应用）</p>
<h2 id="四、敏捷开发"><a href="#四、敏捷开发" class="headerlink" title="四、敏捷开发"></a>四、敏捷开发</h2><p><a href="https://book.douban.com/subject/1790225/" target="_blank" rel="noopener">解析极限编程</a></p>
<p><a href="https://book.douban.com/subject/4037534/" target="_blank" rel="noopener">敏捷开发的艺术</a></p>
<p>进阶<a href="http://book.douban.com/subject/5348122/" target="_blank" rel="noopener">敏捷软件开发-原则、模式与实践</a></p>
<h2 id="专业开发"><a href="#专业开发" class="headerlink" title="专业开发"></a>专业开发</h2><p>序员职业素养</p>
<p>更高效、更实效</p>
<p><a href="https://book.douban.com/subject/11614538/" target="_blank" rel="noopener">程序员的是职业素养</a></p>
<p><a href="https://book.douban.com/subject/5387402/" target="_blank" rel="noopener">程序员修炼之道-从小工到专家</a></p>
<h2 id="思考人生"><a href="#思考人生" class="headerlink" title="思考人生"></a>思考人生</h2><p><a href="https://book.douban.com/subject/6021440/" target="_blank" rel="noopener">黑客与画家</a> (硅谷创业之父Paul Craham 的文集，主要介绍黑客及优秀程序员的爱好和动机)</p>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Book</tag>
      </tags>
  </entry>
</search>
